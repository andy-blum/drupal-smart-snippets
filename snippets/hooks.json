{
	"hook_cron": {
		"prefix": "hook_cron",
		"body": [
			"/**",
			" * Implements hook_cron.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_cron() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform periodic actions.",
			"Modules that require some commands to be executed periodically can",
			"implement hook_cron(). The engine will then call the hook whenever a cron",
			"run happens, as defined by the administrator. Typical tasks managed by",
			"hook_cron() are database maintenance, backups, recalculation of settings",
			"or parameters, automated mailing, and retrieving remote data.",
			"Short-running or non-resource-intensive tasks can be executed directly in",
			"the hook_cron() implementation.",
			"Long-running tasks and tasks that could time out, such as retrieving remote",
			"data, sending email, and intensive file tasks, should use the queue API",
			"instead of executing the tasks directly. To do this, first define one or",
			"more queues via a \\Drupal\\Core\\Annotation\\QueueWorker plugin. Then, add items",
			"that need to be processed to the defined queues."
		],
		"scope": "php"
	},
	"hook_data_type_info_alter": {
		"prefix": "hook_data_type_info_alter",
		"body": [
			"/**",
			" * Implements hook_data_type_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_data_type_info_alter(&\\$data_types) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter available data types for typed data wrappers."
		],
		"scope": "php"
	},
	"hook_queue_info_alter": {
		"prefix": "hook_queue_info_alter",
		"body": [
			"/**",
			" * Implements hook_queue_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_queue_info_alter(&\\$queues) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter cron queue information before cron runs.",
			"Called by \\Drupal\\Core\\Cron to allow modules to alter cron queue settings",
			"before any jobs are processed."
		],
		"scope": "php"
	},
	"hook_mail_alter": {
		"prefix": "hook_mail_alter",
		"body": [
			"/**",
			" * Implements hook_mail_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_mail_alter(&\\$message) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter an email message created with MailManagerInterface->mail().",
			"Hook hook_mail_alter() allows modification of email messages created and sent",
			"with MailManagerInterface->mail(). Usage examples include adding and/or",
			"changing message text, message fields, and message headers.",
			"Email messages sent using functions other than MailManagerInterface->mail()",
			"will not invoke hook_mail_alter(). For example, a contributed module directly",
			"calling the MailInterface->mail() or PHP mail() function will not invoke",
			"this hook. All core modules use MailManagerInterface->mail() for messaging,",
			"it is best practice but not mandatory in contributed modules."
		],
		"scope": "php"
	},
	"hook_mail": {
		"prefix": "hook_mail",
		"body": [
			"/**",
			" * Implements hook_mail.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_mail(\\$key, &\\$message, \\$params) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Prepares a message based on parameters;",
			"This hook is called from MailManagerInterface->mail(). Note that hook_mail(),",
			"unlike hook_mail_alter(), is only called on the $module argument to",
			"MailManagerInterface->mail(), not all modules."
		],
		"scope": "php"
	},
	"hook_mail_backend_info_alter": {
		"prefix": "hook_mail_backend_info_alter",
		"body": [
			"/**",
			" * Implements hook_mail_backend_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_mail_backend_info_alter(&\\$info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the list of mail backend plugin definitions."
		],
		"scope": "php"
	},
	"hook_countries_alter": {
		"prefix": "hook_countries_alter",
		"body": [
			"/**",
			" * Implements hook_countries_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_countries_alter(&\\$countries) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the default country list."
		],
		"scope": "php"
	},
	"hook_display_variant_plugin_alter": {
		"prefix": "hook_display_variant_plugin_alter",
		"body": [
			"/**",
			" * Implements hook_display_variant_plugin_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_display_variant_plugin_alter(array &\\$definitions) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter display variant plugin definitions."
		],
		"scope": "php"
	},
	"hook_layout_alter": {
		"prefix": "hook_layout_alter",
		"body": [
			"/**",
			" * Implements hook_layout_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_layout_alter(&\\$definitions) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Allow modules to alter layout plugin definitions."
		],
		"scope": "php"
	},
	"hook_cache_flush": {
		"prefix": "hook_cache_flush",
		"body": [
			"/**",
			" * Implements hook_cache_flush.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_cache_flush() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Flush all persistent and static caches.",
			"This hook asks your module to clear all of its static caches,",
			"in order to ensure a clean environment for subsequently",
			"invoked data rebuilds.",
			"Do NOT use this hook for rebuilding information. Only use it to flush custom",
			"caches.",
			"Static caches using drupal_static() do not need to be reset manually.",
			"However, all other static variables that do not use drupal_static() must be",
			"manually reset.",
			"This hook is invoked by drupal_flush_all_caches(). It runs before module data",
			"is updated and before hook_rebuild()."
		],
		"scope": "php"
	},
	"hook_rebuild": {
		"prefix": "hook_rebuild",
		"body": [
			"/**",
			" * Implements hook_rebuild.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_rebuild() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Rebuild data based upon refreshed caches.",
			"This hook allows your module to rebuild its data based on the latest/current",
			"module data. It runs after hook_cache_flush() and after all module data has",
			"been updated.",
			"This hook is only invoked after the system has been completely cleared;",
			"i.e., all previously cached data is known to be gone and every API in the",
			"system is known to return current information, so your module can safely rely",
			"on all available data to rebuild its own."
		],
		"scope": "php"
	},
	"hook_config_import_steps_alter": {
		"prefix": "hook_config_import_steps_alter",
		"body": [
			"/**",
			" * Implements hook_config_import_steps_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_config_import_steps_alter(&\\$sync_steps, \\Drupal\\Core\\Config\\ConfigImporter \\$config_importer) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the configuration synchronization steps."
		],
		"scope": "php"
	},
	"hook_config_schema_info_alter": {
		"prefix": "hook_config_schema_info_alter",
		"body": [
			"/**",
			" * Implements hook_config_schema_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_config_schema_info_alter(&\\$definitions) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter config typed data definitions.",
			"For example you can alter the typed data types representing each",
			"configuration schema type to change default labels or form element renderers",
			"used for configuration translation.",
			"If implementations of this hook add or remove configuration schema a",
			"ConfigSchemaAlterException will be thrown. Keep in mind that there are tools",
			"that may use the configuration schema for static analysis of configuration",
			"files, like the string extractor for the localization system. Such systems",
			"won't work with dynamically defined configuration schemas.",
			"For adding new data types use configuration schema YAML files instead."
		],
		"scope": "php"
	},
	"hook_validation_constraint_alter": {
		"prefix": "hook_validation_constraint_alter",
		"body": [
			"/**",
			" * Implements hook_validation_constraint_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_validation_constraint_alter(array &\\$definitions) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter validation constraint plugin definitions."
		],
		"scope": "php"
	},
	"hook_query_alter": {
		"prefix": "hook_query_alter",
		"body": [
			"/**",
			" * Implements hook_query_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_query_alter(Drupal\\Core\\Database\\Query\\AlterableInterface \\$query) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform alterations to a structured query.",
			"Structured (aka dynamic) queries that have tags associated may be altered by any module",
			"before the query is executed."
		],
		"scope": "php"
	},
	"hook_query_TAG_alter": {
		"prefix": "hook_query_TAG_alter",
		"body": [
			"/**",
			" * Implements hook_query_TAG_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_query_${2:TAG}_alter(Drupal\\Core\\Database\\Query\\AlterableInterface \\$query) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform alterations to a structured query for a given tag.",
			"Some common tags include:",
			"- 'entity_reference': For queries that return entities that may be referenced",
			"by an entity reference field.",
			"- ENTITY_TYPE . '_access': For queries of entities that will be displayed in",
			"a listing (e.g., from Views) and therefore require access control."
		],
		"scope": "php"
	},
	"hook_schema": {
		"prefix": "hook_schema",
		"body": [
			"/**",
			" * Implements hook_schema.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_schema() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Define the current version of the database schema.",
			"A Drupal schema definition is an array structure representing one or more",
			"tables and their related keys and indexes. A schema is defined by",
			"hook_schema() which must live in your module's .install file.",
			"The tables declared by this hook will be automatically created when the",
			"module is installed, and removed when the module is uninstalled. This happens",
			"before hook_install() is invoked, and after hook_uninstall() is invoked,",
			"respectively.",
			"By declaring the tables used by your module via an implementation of",
			"hook_schema(), these tables will be available on all supported database",
			"engines. You don't have to deal with the different SQL dialects for table",
			"creation and alteration of the supported database engines.",
			"See the Schema API Handbook at https://www.drupal.org/node/146843 for details",
			"on schema definition structures. Note that foreign key definitions are for",
			"documentation purposes only; foreign keys are not created in the database,",
			"nor are they enforced by Drupal."
		],
		"scope": "php"
	},
	"hook_entity_access": {
		"prefix": "hook_entity_access",
		"body": [
			"/**",
			" * Implements hook_entity_access.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_access(\\Drupal\\Core\\Entity\\EntityInterface \\$entity, \\$operation, \\Drupal\\Core\\Session\\AccountInterface \\$account) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Control entity operation access.",
			"Note that this hook is not called for listings (e.g., from entity queries",
			"and Views). For nodes, see"
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_access": {
		"prefix": "hook_ENTITY_TYPE_access",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_access.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_access(\\Drupal\\Core\\Entity\\EntityInterface \\$entity, \\$operation, \\Drupal\\Core\\Session\\AccountInterface \\$account) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Control entity operation access for a specific entity type.",
			"Note that this hook is not called for listings (e.g., from entity queries",
			"and Views). For nodes, see"
		],
		"scope": "php"
	},
	"hook_entity_create_access": {
		"prefix": "hook_entity_create_access",
		"body": [
			"/**",
			" * Implements hook_entity_create_access.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_create_access(\\Drupal\\Core\\Session\\AccountInterface \\$account, array \\$context, \\$entity_bundle) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Control entity create access."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_create_access": {
		"prefix": "hook_ENTITY_TYPE_create_access",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_create_access.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_create_access(\\Drupal\\Core\\Session\\AccountInterface \\$account, array \\$context, \\$entity_bundle) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Control entity create access for a specific entity type."
		],
		"scope": "php"
	},
	"hook_entity_type_build": {
		"prefix": "hook_entity_type_build",
		"body": [
			"/**",
			" * Implements hook_entity_type_build.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_type_build(array &\\$entity_types) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Add to entity type definitions.",
			"Modules may implement this hook to add information to defined entity types,",
			"as defined in \\Drupal\\Core\\Entity\\EntityTypeInterface.",
			"To alter existing information or to add information dynamically, use",
			"hook_entity_type_alter()."
		],
		"scope": "php"
	},
	"hook_entity_type_alter": {
		"prefix": "hook_entity_type_alter",
		"body": [
			"/**",
			" * Implements hook_entity_type_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_type_alter(array &\\$entity_types) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the entity type definitions.",
			"Modules may implement this hook to alter the information that defines an",
			"entity type. All properties that are available in",
			"\\Drupal\\Core\\Entity\\Annotation\\EntityType and all the ones additionally",
			"provided by modules can be altered here.",
			"Do not use this hook to add information to entity types, unless one of the",
			"following is true:",
			"- You are filling in default values.",
			"- You need to dynamically add information only in certain circumstances.",
			"- Your hook needs to run after hook_entity_type_build() implementations.",
			"Use hook_entity_type_build() instead in all other cases."
		],
		"scope": "php"
	},
	"hook_entity_view_mode_info_alter": {
		"prefix": "hook_entity_view_mode_info_alter",
		"body": [
			"/**",
			" * Implements hook_entity_view_mode_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_view_mode_info_alter(&\\$view_modes) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the view modes for entity types."
		],
		"scope": "php"
	},
	"hook_entity_bundle_info": {
		"prefix": "hook_entity_bundle_info",
		"body": [
			"/**",
			" * Implements hook_entity_bundle_info.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_bundle_info() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Describe the bundles for entity types."
		],
		"scope": "php"
	},
	"hook_entity_bundle_info_alter": {
		"prefix": "hook_entity_bundle_info_alter",
		"body": [
			"/**",
			" * Implements hook_entity_bundle_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_bundle_info_alter(&\\$bundles) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the bundles for entity types."
		],
		"scope": "php"
	},
	"hook_entity_bundle_create": {
		"prefix": "hook_entity_bundle_create",
		"body": [
			"/**",
			" * Implements hook_entity_bundle_create.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_bundle_create(\\$entity_type_id, \\$bundle) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on entity_bundle_create().",
			"This hook is invoked after the operation has been performed."
		],
		"scope": "php"
	},
	"hook_entity_bundle_delete": {
		"prefix": "hook_entity_bundle_delete",
		"body": [
			"/**",
			" * Implements hook_entity_bundle_delete.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_bundle_delete(\\$entity_type_id, \\$bundle) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on entity_bundle_delete().",
			"This hook is invoked after the operation has been performed."
		],
		"scope": "php"
	},
	"hook_entity_create": {
		"prefix": "hook_entity_create",
		"body": [
			"/**",
			" * Implements hook_entity_create.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_create(\\Drupal\\Core\\Entity\\EntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Acts when creating a new entity.",
			"This hook runs after a new entity object has just been instantiated."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_create": {
		"prefix": "hook_ENTITY_TYPE_create",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_create.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_create(\\Drupal\\Core\\Entity\\EntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Acts when creating a new entity of a specific type.",
			"This hook runs after a new entity object has just been instantiated."
		],
		"scope": "php"
	},
	"hook_entity_revision_create": {
		"prefix": "hook_entity_revision_create",
		"body": [
			"/**",
			" * Implements hook_entity_revision_create.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_revision_create(Drupal\\Core\\Entity\\EntityInterface \\$new_revision, Drupal\\Core\\Entity\\EntityInterface \\$entity, \\$keep_untranslatable_fields) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to entity revision creation."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_revision_create": {
		"prefix": "hook_ENTITY_TYPE_revision_create",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_revision_create.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_revision_create(Drupal\\Core\\Entity\\EntityInterface \\$new_revision, Drupal\\Core\\Entity\\EntityInterface \\$entity, \\$keep_untranslatable_fields) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to entity revision creation."
		],
		"scope": "php"
	},
	"hook_entity_preload": {
		"prefix": "hook_entity_preload",
		"body": [
			"/**",
			" * Implements hook_entity_preload.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_preload(array \\$ids, \\$entity_type_id) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on an array of entity IDs before they are loaded.",
			"This hook can be used by modules that need, for example, to return a",
			"different revision than the default one."
		],
		"scope": "php"
	},
	"hook_entity_load": {
		"prefix": "hook_entity_load",
		"body": [
			"/**",
			" * Implements hook_entity_load.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_load(array \\$entities, \\$entity_type_id) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on entities when loaded.",
			"This is a generic load hook called for all entity types loaded via the",
			"entity API.",
			"hook_entity_storage_load() should be used to load additional data for",
			"content entities."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_load": {
		"prefix": "hook_ENTITY_TYPE_load",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_load.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_load(\\$entities) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on entities of a specific type when loaded."
		],
		"scope": "php"
	},
	"hook_entity_storage_load": {
		"prefix": "hook_entity_storage_load",
		"body": [
			"/**",
			" * Implements hook_entity_storage_load.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_storage_load(array \\$entities, \\$entity_type) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on content entities when loaded from the storage.",
			"The results of this hook will be cached."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_storage_load": {
		"prefix": "hook_ENTITY_TYPE_storage_load",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_storage_load.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_storage_load(array \\$entities) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on content entities of a given type when loaded from the storage.",
			"The results of this hook will be cached if the entity type supports it."
		],
		"scope": "php"
	},
	"hook_entity_presave": {
		"prefix": "hook_entity_presave",
		"body": [
			"/**",
			" * Implements hook_entity_presave.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_presave(Drupal\\Core\\Entity\\EntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on an entity before it is created or updated.",
			"You can get the original entity object from $entity->original when it is an",
			"update of the entity."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_presave": {
		"prefix": "hook_ENTITY_TYPE_presave",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_presave.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_presave(Drupal\\Core\\Entity\\EntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on a specific type of entity before it is created or updated.",
			"You can get the original entity object from $entity->original when it is an",
			"update of the entity."
		],
		"scope": "php"
	},
	"hook_entity_insert": {
		"prefix": "hook_entity_insert",
		"body": [
			"/**",
			" * Implements hook_entity_insert.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_insert(Drupal\\Core\\Entity\\EntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to creation of a new entity.",
			"This hook runs once the entity has been stored. Note that hook",
			"implementations may not alter the stored entity data."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_insert": {
		"prefix": "hook_ENTITY_TYPE_insert",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_insert.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_insert(Drupal\\Core\\Entity\\EntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to creation of a new entity of a particular type.",
			"This hook runs once the entity has been stored. Note that hook",
			"implementations may not alter the stored entity data."
		],
		"scope": "php"
	},
	"hook_entity_update": {
		"prefix": "hook_entity_update",
		"body": [
			"/**",
			" * Implements hook_entity_update.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_update(Drupal\\Core\\Entity\\EntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to updates to an entity.",
			"This hook runs once the entity storage has been updated. Note that hook",
			"implementations may not alter the stored entity data. Get the original entity",
			"object from $entity->original."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_update": {
		"prefix": "hook_ENTITY_TYPE_update",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_update.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_update(Drupal\\Core\\Entity\\EntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to updates to an entity of a particular type.",
			"This hook runs once the entity storage has been updated. Note that hook",
			"implementations may not alter the stored entity data. Get the original entity",
			"object from $entity->original."
		],
		"scope": "php"
	},
	"hook_entity_translation_create": {
		"prefix": "hook_entity_translation_create",
		"body": [
			"/**",
			" * Implements hook_entity_translation_create.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_translation_create(\\Drupal\\Core\\Entity\\EntityInterface \\$translation) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Acts when creating a new entity translation.",
			"This hook runs after a new entity translation object has just been",
			"instantiated."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_translation_create": {
		"prefix": "hook_ENTITY_TYPE_translation_create",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_translation_create.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_translation_create(\\Drupal\\Core\\Entity\\EntityInterface \\$translation) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Acts when creating a new entity translation of a specific type.",
			"This hook runs after a new entity translation object has just been",
			"instantiated."
		],
		"scope": "php"
	},
	"hook_entity_translation_insert": {
		"prefix": "hook_entity_translation_insert",
		"body": [
			"/**",
			" * Implements hook_entity_translation_insert.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_translation_insert(\\Drupal\\Core\\Entity\\EntityInterface \\$translation) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to creation of a new entity translation.",
			"This hook runs once the entity translation has been stored. Note that hook",
			"implementations may not alter the stored entity translation data."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_translation_insert": {
		"prefix": "hook_ENTITY_TYPE_translation_insert",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_translation_insert.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_translation_insert(\\Drupal\\Core\\Entity\\EntityInterface \\$translation) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to creation of a new entity translation of a particular type.",
			"This hook runs once the entity translation has been stored. Note that hook",
			"implementations may not alter the stored entity translation data."
		],
		"scope": "php"
	},
	"hook_entity_translation_delete": {
		"prefix": "hook_entity_translation_delete",
		"body": [
			"/**",
			" * Implements hook_entity_translation_delete.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_translation_delete(\\Drupal\\Core\\Entity\\EntityInterface \\$translation) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to entity translation deletion.",
			"This hook runs once the entity translation has been deleted from storage."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_translation_delete": {
		"prefix": "hook_ENTITY_TYPE_translation_delete",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_translation_delete.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_translation_delete(\\Drupal\\Core\\Entity\\EntityInterface \\$translation) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to entity translation deletion of a particular type.",
			"This hook runs once the entity translation has been deleted from storage."
		],
		"scope": "php"
	},
	"hook_entity_predelete": {
		"prefix": "hook_entity_predelete",
		"body": [
			"/**",
			" * Implements hook_entity_predelete.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_predelete(Drupal\\Core\\Entity\\EntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act before entity deletion."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_predelete": {
		"prefix": "hook_ENTITY_TYPE_predelete",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_predelete.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_predelete(Drupal\\Core\\Entity\\EntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act before entity deletion of a particular entity type."
		],
		"scope": "php"
	},
	"hook_entity_delete": {
		"prefix": "hook_entity_delete",
		"body": [
			"/**",
			" * Implements hook_entity_delete.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_delete(Drupal\\Core\\Entity\\EntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to entity deletion.",
			"This hook runs once the entity has been deleted from the storage."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_delete": {
		"prefix": "hook_ENTITY_TYPE_delete",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_delete.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_delete(Drupal\\Core\\Entity\\EntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to entity deletion of a particular type.",
			"This hook runs once the entity has been deleted from the storage."
		],
		"scope": "php"
	},
	"hook_entity_revision_delete": {
		"prefix": "hook_entity_revision_delete",
		"body": [
			"/**",
			" * Implements hook_entity_revision_delete.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_revision_delete(Drupal\\Core\\Entity\\EntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to entity revision deletion.",
			"This hook runs once the entity revision has been deleted from the storage."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_revision_delete": {
		"prefix": "hook_ENTITY_TYPE_revision_delete",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_revision_delete.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_revision_delete(Drupal\\Core\\Entity\\EntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to entity revision deletion of a particular type.",
			"This hook runs once the entity revision has been deleted from the storage."
		],
		"scope": "php"
	},
	"hook_entity_view": {
		"prefix": "hook_entity_view",
		"body": [
			"/**",
			" * Implements hook_entity_view.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_view(array &\\$build, \\Drupal\\Core\\Entity\\EntityInterface \\$entity, \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface \\$display, \\$view_mode) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on entities being assembled before rendering."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_view": {
		"prefix": "hook_ENTITY_TYPE_view",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_view.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_view(array &\\$build, \\Drupal\\Core\\Entity\\EntityInterface \\$entity, \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface \\$display, \\$view_mode) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on entities of a particular type being assembled before rendering."
		],
		"scope": "php"
	},
	"hook_entity_view_alter": {
		"prefix": "hook_entity_view_alter",
		"body": [
			"/**",
			" * Implements hook_entity_view_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_view_alter(array &\\$build, Drupal\\Core\\Entity\\EntityInterface \\$entity, \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface \\$display) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the results of the entity build array.",
			"This hook is called after the content has been assembled in a structured",
			"array and may be used for doing processing which requires that the complete",
			"entity content structure has been built.",
			"If a module wishes to act on the rendered HTML of the entity rather than the",
			"structured content array, it may use this hook to add a #post_render",
			"callback. Alternatively, it could also implement hook_preprocess_HOOK() for",
			"the particular entity type template, if there is one (e.g., node.html.twig).",
			"See the"
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_view_alter": {
		"prefix": "hook_ENTITY_TYPE_view_alter",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_view_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_view_alter(array &\\$build, Drupal\\Core\\Entity\\EntityInterface \\$entity, \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface \\$display) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the results of the entity build array for a particular entity type.",
			"This hook is called after the content has been assembled in a structured",
			"array and may be used for doing processing which requires that the complete",
			"entity content structure has been built.",
			"If a module wishes to act on the rendered HTML of the entity rather than the",
			"structured content array, it may use this hook to add a #post_render",
			"callback. Alternatively, it could also implement hook_preprocess_HOOK() for",
			"the particular entity type template, if there is one (e.g., node.html.twig).",
			"See the"
		],
		"scope": "php"
	},
	"hook_entity_prepare_view": {
		"prefix": "hook_entity_prepare_view",
		"body": [
			"/**",
			" * Implements hook_entity_prepare_view.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_prepare_view(\\$entity_type_id, array \\$entities, array \\$displays, \\$view_mode) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on entities as they are being prepared for view.",
			"Allows you to operate on multiple entities as they are being prepared for",
			"view. Only use this if attaching the data during the entity loading phase",
			"is not appropriate, for example when attaching other 'entity' style objects."
		],
		"scope": "php"
	},
	"hook_entity_view_mode_alter": {
		"prefix": "hook_entity_view_mode_alter",
		"body": [
			"/**",
			" * Implements hook_entity_view_mode_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_view_mode_alter(&\\$view_mode, Drupal\\Core\\Entity\\EntityInterface \\$entity, \\$context) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Change the view mode of an entity that is being displayed."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_build_defaults_alter": {
		"prefix": "hook_ENTITY_TYPE_build_defaults_alter",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_build_defaults_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_build_defaults_alter(array &\\$build, \\Drupal\\Core\\Entity\\EntityInterface \\$entity, \\$view_mode) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter entity renderable values before cache checking in drupal_render().",
			"Invoked for a specific entity type.",
			"The values in the #cache key of the renderable array are used to determine if",
			"a cache entry exists for the entity's rendered output. Ideally only values",
			"that pertain to caching should be altered in this hook."
		],
		"scope": "php"
	},
	"hook_entity_build_defaults_alter": {
		"prefix": "hook_entity_build_defaults_alter",
		"body": [
			"/**",
			" * Implements hook_entity_build_defaults_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_build_defaults_alter(array &\\$build, \\Drupal\\Core\\Entity\\EntityInterface \\$entity, \\$view_mode) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter entity renderable values before cache checking in drupal_render().",
			"The values in the #cache key of the renderable array are used to determine if",
			"a cache entry exists for the entity's rendered output. Ideally only values",
			"that pertain to caching should be altered in this hook."
		],
		"scope": "php"
	},
	"hook_entity_view_display_alter": {
		"prefix": "hook_entity_view_display_alter",
		"body": [
			"/**",
			" * Implements hook_entity_view_display_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_view_display_alter(\\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface \\$display, array \\$context) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the settings used for displaying an entity."
		],
		"scope": "php"
	},
	"hook_entity_display_build_alter": {
		"prefix": "hook_entity_display_build_alter",
		"body": [
			"/**",
			" * Implements hook_entity_display_build_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_display_build_alter(&\\$build, \\$context) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the render array generated by an EntityDisplay for an entity."
		],
		"scope": "php"
	},
	"hook_entity_prepare_form": {
		"prefix": "hook_entity_prepare_form",
		"body": [
			"/**",
			" * Implements hook_entity_prepare_form.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_prepare_form(\\Drupal\\Core\\Entity\\EntityInterface \\$entity, \\$operation, \\Drupal\\Core\\Form\\FormStateInterface \\$form_state) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Acts on an entity object about to be shown on an entity form.",
			"This can be typically used to pre-fill entity values or change the form state",
			"before the entity form is built. It is invoked just once when first building",
			"the entity form. Rebuilds will not trigger a new invocation."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_prepare_form": {
		"prefix": "hook_ENTITY_TYPE_prepare_form",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_prepare_form.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_prepare_form(\\Drupal\\Core\\Entity\\EntityInterface \\$entity, \\$operation, \\Drupal\\Core\\Form\\FormStateInterface \\$form_state) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Acts on a particular type of entity object about to be in an entity form.",
			"This can be typically used to pre-fill entity values or change the form state",
			"before the entity form is built. It is invoked just once when first building",
			"the entity form. Rebuilds will not trigger a new invocation."
		],
		"scope": "php"
	},
	"hook_entity_form_display_alter": {
		"prefix": "hook_entity_form_display_alter",
		"body": [
			"/**",
			" * Implements hook_entity_form_display_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_form_display_alter(\\Drupal\\Core\\Entity\\Display\\EntityFormDisplayInterface \\$form_display, array \\$context) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the settings used for displaying an entity form."
		],
		"scope": "php"
	},
	"hook_entity_base_field_info": {
		"prefix": "hook_entity_base_field_info",
		"body": [
			"/**",
			" * Implements hook_entity_base_field_info.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_base_field_info(\\Drupal\\Core\\Entity\\EntityTypeInterface \\$entity_type) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Provides custom base field definitions for a content entity type.",
			"Field (storage) definitions returned by this hook must run through the",
			"regular field storage life-cycle operations: they need to be properly",
			"installed, updated, and uninstalled. This would typically be done through the",
			"Entity Update API provided by the entity definition update manager."
		],
		"scope": "php"
	},
	"hook_entity_base_field_info_alter": {
		"prefix": "hook_entity_base_field_info_alter",
		"body": [
			"/**",
			" * Implements hook_entity_base_field_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_base_field_info_alter(&\\$fields, \\Drupal\\Core\\Entity\\EntityTypeInterface \\$entity_type) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter base field definitions for a content entity type."
		],
		"scope": "php"
	},
	"hook_entity_bundle_field_info": {
		"prefix": "hook_entity_bundle_field_info",
		"body": [
			"/**",
			" * Implements hook_entity_bundle_field_info.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_bundle_field_info(\\Drupal\\Core\\Entity\\EntityTypeInterface \\$entity_type, \\$bundle, array \\$base_field_definitions) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Provides field definitions for a specific bundle within an entity type.",
			"Bundle fields either have to override an existing base field, or need to",
			"provide a field storage definition via hook_entity_field_storage_info()",
			"unless they are computed."
		],
		"scope": "php"
	},
	"hook_entity_bundle_field_info_alter": {
		"prefix": "hook_entity_bundle_field_info_alter",
		"body": [
			"/**",
			" * Implements hook_entity_bundle_field_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_bundle_field_info_alter(&\\$fields, \\Drupal\\Core\\Entity\\EntityTypeInterface \\$entity_type, \\$bundle) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter bundle field definitions."
		],
		"scope": "php"
	},
	"hook_entity_field_storage_info": {
		"prefix": "hook_entity_field_storage_info",
		"body": [
			"/**",
			" * Implements hook_entity_field_storage_info.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_field_storage_info(\\Drupal\\Core\\Entity\\EntityTypeInterface \\$entity_type) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Provides field storage definitions for a content entity type.",
			"Field storage definitions returned by this hook must run through the regular",
			"field storage life-cycle operations: they need to be properly installed,",
			"updated, and uninstalled. This would typically be done through the Entity",
			"Update API provided by the entity definition update manager."
		],
		"scope": "php"
	},
	"hook_entity_field_storage_info_alter": {
		"prefix": "hook_entity_field_storage_info_alter",
		"body": [
			"/**",
			" * Implements hook_entity_field_storage_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_field_storage_info_alter(&\\$fields, \\Drupal\\Core\\Entity\\EntityTypeInterface \\$entity_type) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter field storage definitions for a content entity type."
		],
		"scope": "php"
	},
	"hook_entity_operation": {
		"prefix": "hook_entity_operation",
		"body": [
			"/**",
			" * Implements hook_entity_operation.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_operation(\\Drupal\\Core\\Entity\\EntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Declares entity operations."
		],
		"scope": "php"
	},
	"hook_entity_operation_alter": {
		"prefix": "hook_entity_operation_alter",
		"body": [
			"/**",
			" * Implements hook_entity_operation_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_operation_alter(array &\\$operations, \\Drupal\\Core\\Entity\\EntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter entity operations."
		],
		"scope": "php"
	},
	"hook_entity_field_access": {
		"prefix": "hook_entity_field_access",
		"body": [
			"/**",
			" * Implements hook_entity_field_access.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_field_access(\\$operation, \\Drupal\\Core\\Field\\FieldDefinitionInterface \\$field_definition, \\Drupal\\Core\\Session\\AccountInterface \\$account, \\Drupal\\Core\\Field\\FieldItemListInterface \\$items = NULL) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Control access to fields.",
			"This hook is invoked from",
			"\\Drupal\\Core\\Entity\\EntityAccessControlHandler::fieldAccess() to let modules",
			"grant or deny operations on fields."
		],
		"scope": "php"
	},
	"hook_entity_field_access_alter": {
		"prefix": "hook_entity_field_access_alter",
		"body": [
			"/**",
			" * Implements hook_entity_field_access_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_field_access_alter(array &\\$grants, array \\$context) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the default access behavior for a given field.",
			"Use this hook to override access grants from another module. Note that the",
			"original default access flag is masked under the ':default' key."
		],
		"scope": "php"
	},
	"hook_entity_field_values_init": {
		"prefix": "hook_entity_field_values_init",
		"body": [
			"/**",
			" * Implements hook_entity_field_values_init.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_field_values_init(\\Drupal\\Core\\Entity\\FieldableEntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Acts when initializing a fieldable entity object.",
			"This hook runs after a new entity object or a new entity translation object",
			"has just been instantiated. It can be used to set initial values, e.g. to",
			"provide defaults."
		],
		"scope": "php"
	},
	"hook_ENTITY_TYPE_field_values_init": {
		"prefix": "hook_ENTITY_TYPE_field_values_init",
		"body": [
			"/**",
			" * Implements hook_ENTITY_TYPE_field_values_init.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${2:ENTITY_TYPE}_field_values_init(\\Drupal\\Core\\Entity\\FieldableEntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Acts when initializing a fieldable entity object.",
			"This hook runs after a new entity object or a new entity translation object",
			"has just been instantiated. It can be used to set initial values, e.g. to",
			"provide defaults."
		],
		"scope": "php"
	},
	"hook_entity_extra_field_info": {
		"prefix": "hook_entity_extra_field_info",
		"body": [
			"/**",
			" * Implements hook_entity_extra_field_info.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_extra_field_info() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Exposes \"pseudo-field\" components on content entities.",
			"Field UI's \"Manage fields\" and \"Manage display\" pages let users re-order",
			"fields, but also non-field components. For nodes, these include elements",
			"exposed by modules through hook_form_alter(), for instance.",
			"Content entities or modules that want to have their components supported",
			"should expose them using this hook. The user-defined settings (weight,",
			"visible) are automatically applied when entities or entity forms are",
			"rendered."
		],
		"scope": "php"
	},
	"hook_entity_extra_field_info_alter": {
		"prefix": "hook_entity_extra_field_info_alter",
		"body": [
			"/**",
			" * Implements hook_entity_extra_field_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_entity_extra_field_info_alter(&\\$info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter \"pseudo-field\" components on content entities."
		],
		"scope": "php"
	},
	"hook_hook_info": {
		"prefix": "hook_hook_info",
		"body": [
			"/**",
			" * Implements hook_hook_info.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_${1:${TM_FILENAME_BASE:hook}}_info() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Defines one or more hooks that are exposed by a module.",
			"Normally hooks do not need to be explicitly defined. However, by declaring a",
			"hook explicitly, a module may define a \"group\" for it. Modules that implement",
			"a hook may then place their implementation in either $module.module or in",
			"$module.$group.inc. If the hook is located in $module.$group.inc, then that",
			"file will be automatically loaded when needed.",
			"In general, hooks that are rarely invoked and/or are very large should be",
			"placed in a separate include file, while hooks that are very short or very",
			"frequently called should be left in the main module file so that they are",
			"always available.",
			"See system_hook_info() for all hook groups defined by Drupal core."
		],
		"scope": "php"
	},
	"hook_module_implements_alter": {
		"prefix": "hook_module_implements_alter",
		"body": [
			"/**",
			" * Implements hook_module_implements_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_module_implements_alter(&\\$implementations, \\$hook) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the registry of modules implementing a hook.",
			"This hook is invoked during \\Drupal::moduleHandler()->getImplementations().",
			"A module may implement this hook in order to reorder the implementing",
			"modules, which are otherwise ordered by the module's system weight.",
			"Note that hooks invoked using \\Drupal::moduleHandler->alter() can have",
			"multiple variations(such as hook_form_alter() and hook_form_FORM_ID_alter()).",
			"\\Drupal::moduleHandler->alter() will call all such variants defined by a",
			"single module in turn. For the purposes of hook_module_implements_alter(),",
			"these variants are treated as a single hook. Thus, to ensure that your",
			"implementation of hook_form_FORM_ID_alter() is called at the right time,",
			"you will have to change the order of hook_form_alter() implementation in",
			"hook_module_implements_alter()."
		],
		"scope": "php"
	},
	"hook_system_info_alter": {
		"prefix": "hook_system_info_alter",
		"body": [
			"/**",
			" * Implements hook_system_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_system_info_alter(array &\\$info, \\Drupal\\Core\\Extension\\Extension \\$file, \\$type) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the information parsed from module and theme .info.yml files.",
			"This hook is invoked in \\Drupal\\Core\\Extension\\ExtensionList::doList(). A",
			"module may implement this hook in order to add to or alter the data generated",
			"by reading the .info.yml file with \\Drupal\\Core\\Extension\\InfoParser.",
			"Using implementations of this hook to make modules required by setting the",
			"$info['required'] key is discouraged. Doing so will slow down the module",
			"installation and uninstallation process. Instead, use",
			"\\Drupal\\Core\\Extension\\ModuleUninstallValidatorInterface."
		],
		"scope": "php"
	},
	"hook_module_preinstall": {
		"prefix": "hook_module_preinstall",
		"body": [
			"/**",
			" * Implements hook_module_preinstall.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_module_preinstall(\\$module) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform necessary actions before a module is installed."
		],
		"scope": "php"
	},
	"hook_modules_installed": {
		"prefix": "hook_modules_installed",
		"body": [
			"/**",
			" * Implements hook_modules_installed.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_modules_installed(\\$modules, \\$is_syncing) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform necessary actions after modules are installed.",
			"This function differs from hook_install() in that it gives all other modules",
			"a chance to perform actions when a module is installed, whereas",
			"hook_install() is only called on the module actually being installed. See",
			"\\Drupal\\Core\\Extension\\ModuleInstaller::install() for a detailed description of",
			"the order in which install hooks are invoked.",
			"This hook should be implemented in a .module file, not in an .install file."
		],
		"scope": "php"
	},
	"hook_install": {
		"prefix": "hook_install",
		"body": [
			"/**",
			" * Implements hook_install.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_install(\\$is_syncing) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform setup tasks when the module is installed.",
			"If the module implements hook_schema(), the database tables will",
			"be created before this hook is fired.",
			"If the module provides a MODULE.routing.yml or alters routing information",
			"these changes will not be available when this hook is fired. If up-to-date",
			"router information is required, for example to use \\Drupal\\Core\\Url, then",
			"(preferably) use hook_modules_installed() or rebuild the router in the",
			"hook_install() implementation.",
			"Implementations of this hook are by convention declared in the module's",
			".install file. The implementation can rely on the .module file being loaded.",
			"The hook will only be called when a module is installed. The module's schema",
			"version will be set to the module's greatest numbered update hook. Because of",
			"this, any time a hook_update_N() is added to the module, this function needs",
			"to be updated to reflect the current version of the database schema.",
			"See the"
		],
		"scope": "php"
	},
	"hook_module_preuninstall": {
		"prefix": "hook_module_preuninstall",
		"body": [
			"/**",
			" * Implements hook_module_preuninstall.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_module_preuninstall(\\$module) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform necessary actions before a module is uninstalled."
		],
		"scope": "php"
	},
	"hook_modules_uninstalled": {
		"prefix": "hook_modules_uninstalled",
		"body": [
			"/**",
			" * Implements hook_modules_uninstalled.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_modules_uninstalled(\\$modules, \\$is_syncing) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform necessary actions after modules are uninstalled.",
			"This function differs from hook_uninstall() in that it gives all other",
			"modules a chance to perform actions when a module is uninstalled, whereas",
			"hook_uninstall() is only called on the module actually being uninstalled.",
			"It is recommended that you implement this hook if your module stores",
			"data that may have been set by other modules."
		],
		"scope": "php"
	},
	"hook_uninstall": {
		"prefix": "hook_uninstall",
		"body": [
			"/**",
			" * Implements hook_uninstall.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_uninstall(\\$is_syncing) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Remove any information that the module sets.",
			"The information that the module should remove includes:",
			"- state that the module has set using \\Drupal::state()",
			"- modifications to existing tables",
			"The module should not remove its entry from the module configuration.",
			"Database tables defined by hook_schema() will be removed automatically.",
			"The uninstall hook must be implemented in the module's .install file. It",
			"will fire when the module gets uninstalled but before the module's database",
			"tables are removed, allowing your module to query its own tables during",
			"this routine."
		],
		"scope": "php"
	},
	"hook_install_tasks": {
		"prefix": "hook_install_tasks",
		"body": [
			"/**",
			" * Implements hook_install_tasks.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_install_tasks(&\\$install_state) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Return an array of tasks to be performed by an installation profile.",
			"Any tasks you define here will be run, in order, after the installer has",
			"finished the site configuration step but before it has moved on to the",
			"final import of languages and the end of the installation. This is invoked",
			"by install_tasks(). You can have any number of custom tasks to perform",
			"during this phase.",
			"Each task you define here corresponds to a callback function which you must",
			"separately define and which is called when your task is run. This function",
			"will receive the global installation state variable, $install_state, as",
			"input, and has the opportunity to access or modify any of its settings. See",
			"the install_state_defaults() function in the installer for the list of",
			"$install_state settings used by Drupal core.",
			"At the end of your task function, you can indicate that you want the",
			"installer to pause and display a page to the user by returning any themed",
			"output that should be displayed on that page (but see below for tasks that",
			"use the form API or batch API; the return values of these task functions are",
			"handled differently). You should also use #title within the task",
			"callback function to set a custom page title. For some tasks, however, you",
			"may want to simply do some processing and pass control to the next task",
			"without ending the page request; to indicate this, simply do not send back",
			"a return value from your task function at all. This can be used, for",
			"example, by installation profiles that need to configure certain site",
			"settings in the database without obtaining any input from the user.",
			"The task function is treated specially if it defines a form or requires",
			"batch processing; in that case, you should return either the form API",
			"definition or batch API array, as appropriate. See below for more",
			"information on the 'type' key that you must define in the task definition",
			"to inform the installer that your task falls into one of those two",
			"categories. It is important to use these APIs directly, since the installer",
			"may be run non-interactively (for example, via a command line script), all",
			"in one page request; in that case, the installer will automatically take",
			"care of submitting forms and processing batches correctly for both types of",
			"installations. You can inspect the $install_state['interactive'] boolean to",
			"see whether or not the current installation is interactive, if you need",
			"access to this information.",
			"Remember that a user installing Drupal interactively will be able to reload",
			"an installation page multiple times, so you should use \\Drupal::state() to",
			"store any data that you may need later in the installation process. Any",
			"temporary state must be removed using \\Drupal::state()->delete() before",
			"your last task has completed and control is handed back to the installer."
		],
		"scope": "php"
	},
	"hook_install_tasks_alter": {
		"prefix": "hook_install_tasks_alter",
		"body": [
			"/**",
			" * Implements hook_install_tasks_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_install_tasks_alter(&\\$tasks, \\$install_state) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the full list of installation tasks.",
			"You can use this hook to change or replace any part of the Drupal",
			"installation process that occurs after the installation profile is selected.",
			"This hook is invoked on the install profile in install_tasks()."
		],
		"scope": "php"
	},
	"hook_update_N": {
		"prefix": "hook_update_N",
		"body": [
			"/**",
			" * Implements hook_update_N.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_update_${2:N}() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform a single update between minor versions.",
			"Hook hook_update_N() can only be used to update between minor versions of a",
			"module. To upgrade between major versions of Drupal (for example, between",
			"Drupal 7 and 8), use the"
		],
		"scope": "php"
	},
	"hook_post_update_NAME": {
		"prefix": "hook_post_update_NAME",
		"body": [
			"/**",
			" * Implements hook_post_update_NAME.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_post_update_${2:NAME}(&\\$sandbox) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Executes an update which is intended to update data, like entities.",
			"These implementations have to be placed in a MODULE.post_update.php file.",
			"These updates are executed after all hook_update_N() implementations. At this",
			"stage Drupal is already fully repaired so you can use any API as you wish.",
			"NAME can be arbitrary machine names. In contrast to hook_update_N() the",
			"alphanumeric naming of functions in the file is the only thing which ensures",
			"the execution order of those functions. If update order is mandatory,",
			"you should add numerical prefix to NAME or make it completely numerical.",
			"Drupal also ensures to not execute the same hook_post_update_NAME() function",
			"twice."
		],
		"scope": "php"
	},
	"hook_removed_post_updates": {
		"prefix": "hook_removed_post_updates",
		"body": [
			"/**",
			" * Implements hook_removed_post_updates.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_removed_post_updates() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Return an array of removed hook_post_update_NAME() function names.",
			"This should be used to indicate post-update functions that have existed in",
			"some previous version of the module, but are no longer available.",
			"This implementation has to be placed in a MODULE.post_update.php file."
		],
		"scope": "php"
	},
	"hook_update_dependencies": {
		"prefix": "hook_update_dependencies",
		"body": [
			"/**",
			" * Implements hook_update_dependencies.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_update_dependencies() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Return an array of information about module update dependencies.",
			"This can be used to indicate update functions from other modules that your",
			"module's update functions depend on, or vice versa. It is used by the update",
			"system to determine the appropriate order in which updates should be run, as",
			"well as to search for missing dependencies.",
			"Implementations of this hook should be placed in a mymodule.install file in",
			"the same directory as mymodule.module."
		],
		"scope": "php"
	},
	"hook_update_last_removed": {
		"prefix": "hook_update_last_removed",
		"body": [
			"/**",
			" * Implements hook_update_last_removed.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_update_last_removed() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Return a number which is no longer available as hook_update_N().",
			"If you remove some update functions from your mymodule.install file, you",
			"should notify Drupal of those missing functions. This way, Drupal can",
			"ensure that no update is accidentally skipped.",
			"Implementations of this hook should be placed in a mymodule.install file in",
			"the same directory as mymodule.module."
		],
		"scope": "php"
	},
	"hook_updater_info": {
		"prefix": "hook_updater_info",
		"body": [
			"/**",
			" * Implements hook_updater_info.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_updater_info() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Provide information on Updaters (classes that can update Drupal).",
			"Drupal\\Core\\Updater\\Updater is a class that knows how to update various parts",
			"of the Drupal file system, for example to update modules that have newer",
			"releases, or to install a new theme."
		],
		"scope": "php"
	},
	"hook_updater_info_alter": {
		"prefix": "hook_updater_info_alter",
		"body": [
			"/**",
			" * Implements hook_updater_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_updater_info_alter(&\\$updaters) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the Updater information array.",
			"An Updater is a class that knows how to update various parts of the Drupal",
			"file system, for example to update modules that have newer releases, or to",
			"install a new theme."
		],
		"scope": "php"
	},
	"hook_requirements": {
		"prefix": "hook_requirements",
		"body": [
			"/**",
			" * Implements hook_requirements.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_requirements(\\$phase) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Check installation requirements and do status reporting.",
			"This hook has three closely related uses, determined by the $phase argument:",
			"- Checking installation requirements ($phase == 'install').",
			"- Checking update requirements ($phase == 'update').",
			"- Status reporting ($phase == 'runtime').",
			"Note that this hook, like all others dealing with installation and updates,",
			"must reside in a module_name.install file, or it will not properly abort",
			"the installation of the module if a critical requirement is missing.",
			"During the 'install' phase, modules can for example assert that",
			"library or server versions are available or sufficient.",
			"Note that the installation of a module can happen during installation of",
			"Drupal itself (by install.php) with an installation profile or later by hand.",
			"As a consequence, install-time requirements must be checked without access",
			"to the full Drupal API, because it is not available during install.php.",
			"If a requirement has a severity of REQUIREMENT_ERROR, install.php will abort",
			"or at least the module will not install.",
			"Other severity levels have no effect on the installation.",
			"Module dependencies do not belong to these installation requirements,",
			"but should be defined in the module's .info.yml file.",
			"During installation (when $phase == 'install'), if you need to load a class",
			"from your module, you'll need to include the class file directly.",
			"The 'runtime' phase is not limited to pure installation requirements",
			"but can also be used for more general status information like maintenance",
			"tasks and security issues.",
			"The returned 'requirements' will be listed on the status report in the",
			"administration section, with indication of the severity level.",
			"Moreover, any requirement with a severity of REQUIREMENT_ERROR severity will",
			"result in a notice on the administration configuration page."
		],
		"scope": "php"
	},
	"hook_file_download": {
		"prefix": "hook_file_download",
		"body": [
			"/**",
			" * Implements hook_file_download.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_file_download(\\$uri) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Control access to private file downloads and specify HTTP headers.",
			"This hook allows modules to enforce permissions on file downloads whenever",
			"Drupal is handling file download, as opposed to the web server bypassing",
			"Drupal and returning the file from a public directory. Modules can also",
			"provide headers to specify information like the file's name or MIME type."
		],
		"scope": "php"
	},
	"hook_file_url_alter": {
		"prefix": "hook_file_url_alter",
		"body": [
			"/**",
			" * Implements hook_file_url_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_file_url_alter(&\\$uri) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the URL to a file.",
			"This hook is called from file_create_url(), and  is called fairly",
			"frequently (10+ times per page), depending on how many files there are in a",
			"given page.",
			"If CSS and JS aggregation are disabled, this can become very frequently",
			"(50+ times per page) so performance is critical.",
			"This function should alter the URI, if it wants to rewrite the file URL."
		],
		"scope": "php"
	},
	"hook_file_mimetype_mapping_alter": {
		"prefix": "hook_file_mimetype_mapping_alter",
		"body": [
			"/**",
			" * Implements hook_file_mimetype_mapping_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_file_mimetype_mapping_alter(&\\$mapping) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter MIME type mappings used to determine MIME type from a file extension.",
			"Invoked by \\Drupal\\Core\\File\\MimeType\\ExtensionMimeTypeGuesser::guess(). It",
			"is used to allow modules to add to or modify the default mapping from",
			"\\Drupal\\Core\\File\\MimeType\\ExtensionMimeTypeGuesser::$defaultMapping."
		],
		"scope": "php"
	},
	"hook_archiver_info_alter": {
		"prefix": "hook_archiver_info_alter",
		"body": [
			"/**",
			" * Implements hook_archiver_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_archiver_info_alter(&\\$info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter archiver information declared by other modules.",
			"See hook_archiver_info() for a description of archivers and the archiver",
			"information structure."
		],
		"scope": "php"
	},
	"hook_filetransfer_info": {
		"prefix": "hook_filetransfer_info",
		"body": [
			"/**",
			" * Implements hook_filetransfer_info.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_filetransfer_info() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Register information about FileTransfer classes provided by a module.",
			"The FileTransfer class allows transferring files over a specific type of",
			"connection. Core provides classes for FTP and SSH. Contributed modules are",
			"free to extend the FileTransfer base class to add other connection types,",
			"and if these classes are registered via hook_filetransfer_info(), those",
			"connection types will be available to site administrators using the Update",
			"manager when they are redirected to the authorize.php script to authorize",
			"the file operations."
		],
		"scope": "php"
	},
	"hook_filetransfer_info_alter": {
		"prefix": "hook_filetransfer_info_alter",
		"body": [
			"/**",
			" * Implements hook_filetransfer_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_filetransfer_info_alter(&\\$filetransfer_info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the FileTransfer class registry."
		],
		"scope": "php"
	},
	"hook_ajax_render_alter": {
		"prefix": "hook_ajax_render_alter",
		"body": [
			"/**",
			" * Implements hook_ajax_render_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_ajax_render_alter(array &\\$data) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the Ajax command data that is sent to the client."
		],
		"scope": "php"
	},
	"hook_form_alter": {
		"prefix": "hook_form_alter",
		"body": [
			"/**",
			" * Implements hook_form_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_form_alter(&\\$form, \\Drupal\\Core\\Form\\FormStateInterface \\$form_state, \\$form_id) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform alterations before a form is rendered.",
			"One popular use of this hook is to add form elements to the node form. When",
			"altering a node form, the node entity can be retrieved by invoking",
			"$form_state->getFormObject()->getEntity().",
			"Implementations are responsible for adding cache contexts/tags/max-age as",
			"needed. See https://www.drupal.org/developing/api/8/cache.",
			"In addition to hook_form_alter(), which is called for all forms, there are",
			"two more specific form hooks available. The first,",
			"hook_form_BASE_FORM_ID_alter(), allows targeting of a form/forms via a base",
			"form (if one exists). The second, hook_form_FORM_ID_alter(), can be used to",
			"target a specific form directly.",
			"The call order is as follows: all existing form alter functions are called",
			"for module A, then all for module B, etc., followed by all for any base",
			"theme(s), and finally for the theme itself. The module order is determined",
			"by system weight, then by module name.",
			"Within each module, form alter hooks are called in the following order:",
			"first, hook_form_alter(); second, hook_form_BASE_FORM_ID_alter(); third,",
			"hook_form_FORM_ID_alter(). So, for each module, the more general hooks are",
			"called first followed by the more specific."
		],
		"scope": "php"
	},
	"hook_form_FORM_ID_alter": {
		"prefix": "hook_form_FORM_ID_alter",
		"body": [
			"/**",
			" * Implements hook_form_FORM_ID_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_form_${2:FORM_ID}_alter(&\\$form, \\Drupal\\Core\\Form\\FormStateInterface \\$form_state, \\$form_id) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Provide a form-specific alteration instead of the global hook_form_alter().",
			"Implementations are responsible for adding cache contexts/tags/max-age as",
			"needed. See https://www.drupal.org/developing/api/8/cache.",
			"Modules can implement hook_form_FORM_ID_alter() to modify a specific form,",
			"rather than implementing hook_form_alter() and checking the form ID, or",
			"using long switch statements to alter multiple forms.",
			"Form alter hooks are called in the following order: hook_form_alter(),",
			"hook_form_BASE_FORM_ID_alter(), hook_form_FORM_ID_alter(). See",
			"hook_form_alter() for more details."
		],
		"scope": "php"
	},
	"hook_form_BASE_FORM_ID_alter": {
		"prefix": "hook_form_BASE_FORM_ID_alter",
		"body": [
			"/**",
			" * Implements hook_form_BASE_FORM_ID_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_form_${2:BASE_FORM_ID}_alter(&\\$form, \\Drupal\\Core\\Form\\FormStateInterface \\$form_state, \\$form_id) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Provide a form-specific alteration for shared ('base') forms.",
			"Implementations are responsible for adding cache contexts/tags/max-age as",
			"needed. See https://www.drupal.org/developing/api/8/cache.",
			"By default, when \\Drupal::formBuilder()->getForm() is called, Drupal looks",
			"for a function with the same name as the form ID, and uses that function to",
			"build the form. In contrast, base forms allow multiple form IDs to be mapped",
			"to a single base (also called 'factory') form function.",
			"Modules can implement hook_form_BASE_FORM_ID_alter() to modify a specific",
			"base form, rather than implementing hook_form_alter() and checking for",
			"conditions that would identify the shared form constructor.",
			"To identify the base form ID for a particular form (or to determine whether",
			"one exists) check the $form_state. The base form ID is stored under",
			"$form_state->getBuildInfo()['base_form_id'].",
			"Form alter hooks are called in the following order: hook_form_alter(),",
			"hook_form_BASE_FORM_ID_alter(), hook_form_FORM_ID_alter(). See",
			"hook_form_alter() for more details."
		],
		"scope": "php"
	},
	"hook_batch_alter": {
		"prefix": "hook_batch_alter",
		"body": [
			"/**",
			" * Implements hook_batch_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_batch_alter(&\\$batch) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter batch information before a batch is processed.",
			"Called by batch_process() to allow modules to alter a batch before it is",
			"processed."
		],
		"scope": "php"
	},
	"hook_language_switch_links_alter": {
		"prefix": "hook_language_switch_links_alter",
		"body": [
			"/**",
			" * Implements hook_language_switch_links_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_language_switch_links_alter(array &\\$links, \\$type, \\Drupal\\Core\\Url \\$url) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform alterations on language switcher links.",
			"A language switcher link may need to point to a different path or use a",
			"translated link text before going through the link generator, which will",
			"just handle the path aliases."
		],
		"scope": "php"
	},
	"hook_transliteration_overrides_alter": {
		"prefix": "hook_transliteration_overrides_alter",
		"body": [
			"/**",
			" * Implements hook_transliteration_overrides_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_transliteration_overrides_alter(&\\$overrides, \\$langcode) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Provide language-specific overrides for transliteration.",
			"If the overrides you want to provide are standard for your language, consider",
			"providing a patch for the Drupal Core transliteration system instead of using",
			"this hook. This hook can be used temporarily until Drupal Core's",
			"transliteration tables are fixed, or for sites that want to use a",
			"non-standard transliteration system."
		],
		"scope": "php"
	},
	"hook_menu_links_discovered_alter": {
		"prefix": "hook_menu_links_discovered_alter",
		"body": [
			"/**",
			" * Implements hook_menu_links_discovered_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_menu_links_discovered_alter(&\\$links) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alters all the menu links discovered by the menu link plugin manager."
		],
		"scope": "php"
	},
	"hook_menu_local_tasks_alter": {
		"prefix": "hook_menu_local_tasks_alter",
		"body": [
			"/**",
			" * Implements hook_menu_local_tasks_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_menu_local_tasks_alter(&\\$data, \\$route_name, \\Drupal\\Core\\Cache\\RefinableCacheableDependencyInterface &\\$cacheability) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter local tasks displayed on the page before they are rendered.",
			"This hook is invoked by \\Drupal\\Core\\Menu\\LocalTaskManager::getLocalTasks().",
			"The system-determined tabs and actions are passed in by reference. Additional",
			"tabs may be added.",
			"The local tasks are under the 'tabs' element and keyed by plugin ID.",
			"Each local task is an associative array containing:",
			"- #theme: The theme function to use to render.",
			"- #link: An associative array containing:",
			"- title: The localized title of the link.",
			"- url: a Url object.",
			"- localized_options: An array of options to pass to",
			"\\Drupal\\Core\\Utility\\LinkGeneratorInterface::generate().",
			"- #weight: The link's weight compared to other links.",
			"- #active: Whether the link should be marked as 'active'."
		],
		"scope": "php"
	},
	"hook_menu_local_actions_alter": {
		"prefix": "hook_menu_local_actions_alter",
		"body": [
			"/**",
			" * Implements hook_menu_local_actions_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_menu_local_actions_alter(&\\$local_actions) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter local actions plugins."
		],
		"scope": "php"
	},
	"hook_local_tasks_alter": {
		"prefix": "hook_local_tasks_alter",
		"body": [
			"/**",
			" * Implements hook_local_tasks_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_local_tasks_alter(&\\$local_tasks) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter local tasks plugins."
		],
		"scope": "php"
	},
	"hook_contextual_links_alter": {
		"prefix": "hook_contextual_links_alter",
		"body": [
			"/**",
			" * Implements hook_contextual_links_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_contextual_links_alter(array &\\$links, \\$group, array \\$route_parameters) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter contextual links before they are rendered.",
			"This hook is invoked by",
			"\\Drupal\\Core\\Menu\\ContextualLinkManager::getContextualLinkPluginsByGroup().",
			"The system-determined contextual links are passed in by reference. Additional",
			"links may be added and existing links can be altered.",
			"Each contextual link contains the following entries:",
			"- title: The localized title of the link.",
			"- route_name: The route name of the link.",
			"- route_parameters: The route parameters of the link.",
			"- localized_options: An array of URL options.",
			"- (optional) weight: The weight of the link, which is used to sort the links."
		],
		"scope": "php"
	},
	"hook_contextual_links_plugins_alter": {
		"prefix": "hook_contextual_links_plugins_alter",
		"body": [
			"/**",
			" * Implements hook_contextual_links_plugins_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_contextual_links_plugins_alter(array &\\$contextual_links) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the plugin definition of contextual links."
		],
		"scope": "php"
	},
	"hook_system_breadcrumb_alter": {
		"prefix": "hook_system_breadcrumb_alter",
		"body": [
			"/**",
			" * Implements hook_system_breadcrumb_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_system_breadcrumb_alter(\\Drupal\\Core\\Breadcrumb\\Breadcrumb &\\$breadcrumb, \\Drupal\\Core\\Routing\\RouteMatchInterface \\$route_match, array \\$context) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform alterations to the breadcrumb built by the BreadcrumbManager."
		],
		"scope": "php"
	},
	"hook_link_alter": {
		"prefix": "hook_link_alter",
		"body": [
			"/**",
			" * Implements hook_link_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_link_alter(&\\$variables) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the parameters for links."
		],
		"scope": "php"
	},
	"hook_plugin_filter_TYPE_alter": {
		"prefix": "hook_plugin_filter_TYPE_alter",
		"body": [
			"/**",
			" * Implements hook_plugin_filter_TYPE_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_plugin_filter_${2:TYPE}_alter(array &\\$definitions, array \\$extra, \\$consumer) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the filtering of plugin definitions for a specific plugin type.",
			"TYPE (e.g. \"block\", \"layout\") limits hook scope to a plugin type.",
			"For example, HOOK_plugin_filter_block_alter() would be invoked",
			"by a hook listener which specifies the 'block' plugin list,",
			"e.g., BlockLibraryController or ChooseBlockController."
		],
		"scope": "php"
	},
	"hook_plugin_filter_TYPE__CONSUMER_alter": {
		"prefix": "hook_plugin_filter_TYPE__CONSUMER_alter",
		"body": [
			"/**",
			" * Implements hook_plugin_filter_TYPE__CONSUMER_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_plugin_filter_${2:TYPE}__${3:CONSUMER}_alter(array &\\$definitions, array \\$extra) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the filtering of plugin definitions for a specific type and consumer.",
			"TYPE (e.g. \"block\", \"layout\") limits hook scope to a plugin type.",
			"CONSUMER (e.g., \"block_ui\", \"layout_builder\") limits hook scope to one or",
			"more listeners, typically provided the same module. For example,",
			"HOOK_plugin_filter_layout__layout_builder_alter() would affect",
			"Layout Builder's listeners for the 'layout' plugin type (see",
			"ChooseSectionController), while HOOK_plugin_filter_block__block_ui_alter()",
			"would affect the Block UI's listeners for the 'block' plugin type."
		],
		"scope": "php"
	},
	"hook_form_system_theme_settings_alter": {
		"prefix": "hook_form_system_theme_settings_alter",
		"body": [
			"/**",
			" * Implements hook_form_system_theme_settings_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_form_system_theme_settings_alter(&\\$form, \\Drupal\\Core\\Form\\FormStateInterface \\$form_state) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Allow themes to alter the theme-specific settings form.",
			"With this hook, themes can alter the theme-specific settings form in any way",
			"allowable by Drupal's Form API, such as adding form elements, changing",
			"default values and removing form elements. See the Form API documentation on",
			"api.drupal.org for detailed information.",
			"Note that the base theme's form alterations will be run before any sub-theme",
			"alterations."
		],
		"scope": "php"
	},
	"hook_preprocess": {
		"prefix": "hook_preprocess",
		"body": [
			"/**",
			" * Implements hook_preprocess.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_preprocess(&\\$variables, \\$hook) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Preprocess theme variables for templates.",
			"This hook allows modules to preprocess theme variables for theme templates.",
			"It is called for all theme hooks implemented as templates, but not for theme",
			"hooks implemented as functions. hook_preprocess_HOOK() can be used to",
			"preprocess variables for a specific theme hook, whether implemented as a",
			"template or function.",
			"For more detailed information, see the"
		],
		"scope": "php"
	},
	"hook_preprocess_HOOK": {
		"prefix": "hook_preprocess_HOOK",
		"body": [
			"/**",
			" * Implements hook_preprocess_HOOK.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_preprocess_${2:HOOK}(&\\$variables) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Preprocess theme variables for a specific theme hook.",
			"This hook allows modules to preprocess theme variables for a specific theme",
			"hook. It should only be used if a module needs to override or add to the",
			"theme preprocessing for a theme hook it didn't define.",
			"For more detailed information, see the"
		],
		"scope": "php"
	},
	"hook_theme_suggestions_HOOK": {
		"prefix": "hook_theme_suggestions_HOOK",
		"body": [
			"/**",
			" * Implements hook_theme_suggestions_HOOK.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_theme_suggestions_${2:HOOK}(array \\$variables) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Provides alternate named suggestions for a specific theme hook.",
			"This hook allows modules to provide alternative theme function or template",
			"name suggestions.",
			"HOOK is the least-specific version of the hook being called. For example, if",
			"'#theme' => 'node__article' is called, then hook_theme_suggestions_node()",
			"will be invoked, not hook_theme_suggestions_node__article(). The specific",
			"hook called (in this case 'node__article') is available in",
			"$variables['theme_hook_original'].",
			"Implementations of this hook must be placed in *.module or *.theme files, or",
			"must otherwise make sure that the hook implementation is available at",
			"any given time."
		],
		"scope": "php"
	},
	"hook_theme_suggestions_alter": {
		"prefix": "hook_theme_suggestions_alter",
		"body": [
			"/**",
			" * Implements hook_theme_suggestions_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_theme_suggestions_alter(array &\\$suggestions, array \\$variables, \\$hook) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alters named suggestions for all theme hooks.",
			"This hook is invoked for all theme hooks, if you are targeting a specific",
			"theme hook it's best to use hook_theme_suggestions_HOOK_alter().",
			"The call order is as follows: all existing suggestion alter functions are",
			"called for module A, then all for module B, etc., followed by all for any",
			"base theme(s), and finally for the active theme. The order is",
			"determined by system weight, then by extension (module or theme) name.",
			"Within each module or theme, suggestion alter hooks are called in the",
			"following order: first, hook_theme_suggestions_alter(); second,",
			"hook_theme_suggestions_HOOK_alter(). So, for each module or theme, the more",
			"general hooks are called first followed by the more specific.",
			"In the following example, we provide an alternative template suggestion to",
			"node and taxonomy term templates based on the user being logged in."
		],
		"scope": "php"
	},
	"hook_theme_suggestions_HOOK_alter": {
		"prefix": "hook_theme_suggestions_HOOK_alter",
		"body": [
			"/**",
			" * Implements hook_theme_suggestions_HOOK_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_theme_suggestions_${2:HOOK}_alter(array &\\$suggestions, array \\$variables) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alters named suggestions for a specific theme hook.",
			"This hook allows any module or theme to provide alternative theme function or",
			"template name suggestions and reorder or remove suggestions provided by",
			"hook_theme_suggestions_HOOK() or by earlier invocations of this hook.",
			"HOOK is the least-specific version of the hook being called. For example, if",
			"'#theme' => 'node__article' is called, then node_theme_suggestions_node()",
			"will be invoked, not node_theme_suggestions_node__article(). The specific",
			"hook called (in this case 'node__article') is available in",
			"$variables['theme_hook_original'].",
			"Implementations of this hook must be placed in *.module or *.theme files, or",
			"must otherwise make sure that the hook implementation is available at",
			"any given time."
		],
		"scope": "php"
	},
	"hook_themes_installed": {
		"prefix": "hook_themes_installed",
		"body": [
			"/**",
			" * Implements hook_themes_installed.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_themes_installed(\\$theme_list) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to themes being installed."
		],
		"scope": "php"
	},
	"hook_themes_uninstalled": {
		"prefix": "hook_themes_uninstalled",
		"body": [
			"/**",
			" * Implements hook_themes_uninstalled.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_themes_uninstalled(array \\$themes) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to themes being uninstalled."
		],
		"scope": "php"
	},
	"hook_extension": {
		"prefix": "hook_extension",
		"body": [
			"/**",
			" * Implements hook_extension.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_extension() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Declare a template file extension to be used with a theme engine.",
			"This hook is used in a theme engine implementation in the format of",
			"ENGINE_extension()."
		],
		"scope": "php"
	},
	"hook_render_template": {
		"prefix": "hook_render_template",
		"body": [
			"/**",
			" * Implements hook_render_template.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_render_template(\\$template_file, \\$variables) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Render a template using the theme engine.",
			"It is the theme engine's responsibility to escape variables. The only",
			"exception is if a variable implements",
			"\\Drupal\\Component\\Render\\MarkupInterface. Drupal is inherently unsafe if",
			"other variables are not escaped. The helper function",
			"theme_render_and_autoescape() may be used for this."
		],
		"scope": "php"
	},
	"hook_element_info_alter": {
		"prefix": "hook_element_info_alter",
		"body": [
			"/**",
			" * Implements hook_element_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_element_info_alter(array &\\$info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the element type information returned from modules.",
			"A module may implement this hook in order to alter the element type defaults",
			"defined by a module."
		],
		"scope": "php"
	},
	"hook_element_plugin_alter": {
		"prefix": "hook_element_plugin_alter",
		"body": [
			"/**",
			" * Implements hook_element_plugin_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_element_plugin_alter(array &\\$definitions) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter Element plugin definitions.",
			"Whenever possible, hook_element_info_alter() should be used to alter the",
			"default properties of an element type. Use this hook only when the plugin",
			"definition itself needs to be altered."
		],
		"scope": "php"
	},
	"hook_js_alter": {
		"prefix": "hook_js_alter",
		"body": [
			"/**",
			" * Implements hook_js_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_js_alter(&\\$javascript, \\Drupal\\Core\\Asset\\AttachedAssetsInterface \\$assets) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform necessary alterations to the JavaScript before it is presented on",
			"the page."
		],
		"scope": "php"
	},
	"hook_library_info_build": {
		"prefix": "hook_library_info_build",
		"body": [
			"/**",
			" * Implements hook_library_info_build.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_library_info_build() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Add dynamic library definitions.",
			"Modules may implement this hook to add dynamic library definitions. Static",
			"libraries, which do not depend on any runtime information, should be declared",
			"in a modulename.libraries.yml file instead."
		],
		"scope": "php"
	},
	"hook_js_settings_build": {
		"prefix": "hook_js_settings_build",
		"body": [
			"/**",
			" * Implements hook_js_settings_build.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_js_settings_build(array &\\$settings, \\Drupal\\Core\\Asset\\AttachedAssetsInterface \\$assets) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the JavaScript settings (drupalSettings)."
		],
		"scope": "php"
	},
	"hook_js_settings_alter": {
		"prefix": "hook_js_settings_alter",
		"body": [
			"/**",
			" * Implements hook_js_settings_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_js_settings_alter(array &\\$settings, \\Drupal\\Core\\Asset\\AttachedAssetsInterface \\$assets) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform necessary alterations to the JavaScript settings (drupalSettings)."
		],
		"scope": "php"
	},
	"hook_library_info_alter": {
		"prefix": "hook_library_info_alter",
		"body": [
			"/**",
			" * Implements hook_library_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_library_info_alter(&\\$libraries, \\$extension) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter libraries provided by an extension.",
			"Allows modules and themes to change libraries' definitions; mostly used to",
			"update a library to a newer version, while ensuring backward compatibility.",
			"In general, such manipulations should only be done to extend the library's",
			"functionality in a backward-compatible way, to avoid breaking other modules",
			"and themes that may be using the library."
		],
		"scope": "php"
	},
	"hook_css_alter": {
		"prefix": "hook_css_alter",
		"body": [
			"/**",
			" * Implements hook_css_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_css_alter(&\\$css, \\Drupal\\Core\\Asset\\AttachedAssetsInterface \\$assets) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter CSS files before they are output on the page."
		],
		"scope": "php"
	},
	"hook_page_attachments": {
		"prefix": "hook_page_attachments",
		"body": [
			"/**",
			" * Implements hook_page_attachments.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_page_attachments(array &\\$attachments) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Add attachments (typically assets) to a page before it is rendered.",
			"Use this hook when you want to conditionally add attachments to a page.",
			"If you want to alter the attachments added by other modules or if your module",
			"depends on the elements of other modules, use hook_page_attachments_alter()",
			"instead, which runs after this hook.",
			"If you try to add anything but #attached and #cache to the array, an",
			"exception is thrown."
		],
		"scope": "php"
	},
	"hook_page_attachments_alter": {
		"prefix": "hook_page_attachments_alter",
		"body": [
			"/**",
			" * Implements hook_page_attachments_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_page_attachments_alter(array &\\$attachments) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter attachments (typically assets) to a page before it is rendered.",
			"Use this hook when you want to remove or alter attachments on the page, or",
			"add attachments to the page that depend on another module's attachments (this",
			"hook runs after hook_page_attachments().",
			"If you try to add anything but #attached and #cache to the array, an",
			"exception is thrown."
		],
		"scope": "php"
	},
	"hook_page_top": {
		"prefix": "hook_page_top",
		"body": [
			"/**",
			" * Implements hook_page_top.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_page_top(array &\\$page_top) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Add a renderable array to the top of the page."
		],
		"scope": "php"
	},
	"hook_page_bottom": {
		"prefix": "hook_page_bottom",
		"body": [
			"/**",
			" * Implements hook_page_bottom.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_page_bottom(array &\\$page_bottom) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Add a renderable array to the bottom of the page."
		],
		"scope": "php"
	},
	"hook_theme": {
		"prefix": "hook_theme",
		"body": [
			"/**",
			" * Implements hook_theme.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_theme(\\$existing, \\$type, \\$theme, \\$path) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Register a module or theme's theme implementations.",
			"The implementations declared by this hook specify how a particular render",
			"array is to be rendered as HTML."
		],
		"scope": "php"
	},
	"hook_theme_registry_alter": {
		"prefix": "hook_theme_registry_alter",
		"body": [
			"/**",
			" * Implements hook_theme_registry_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_theme_registry_alter(&\\$theme_registry) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the theme registry information returned from hook_theme().",
			"The theme registry stores information about all available theme hooks,",
			"including which callback functions those hooks will call when triggered,",
			"what template files are exposed by these hooks, and so on.",
			"Note that this hook is only executed as the theme cache is re-built.",
			"Changes here will not be visible until the next cache clear.",
			"The $theme_registry array is keyed by theme hook name, and contains the",
			"information returned from hook_theme(), as well as additional properties",
			"added by \\Drupal\\Core\\Theme\\Registry::processExtension().",
			"For example:"
		],
		"scope": "php"
	},
	"hook_template_preprocess_default_variables_alter": {
		"prefix": "hook_template_preprocess_default_variables_alter",
		"body": [
			"/**",
			" * Implements hook_template_preprocess_default_variables_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_template_preprocess_default_variables_alter(&\\$variables) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the default, hook-independent variables for all templates.",
			"Allows modules to provide additional default template variables or manipulate",
			"existing. This hook is invoked from template_preprocess() after basic default",
			"template variables have been set up and before the next template preprocess",
			"function is invoked.",
			"Note that the default template variables are statically cached within a",
			"request. When adding a template variable that depends on other context, it is",
			"your responsibility to appropriately reset the static cache in",
			"template_preprocess() when needed:"
		],
		"scope": "php"
	},
	"hook_tokens": {
		"prefix": "hook_tokens",
		"body": [
			"/**",
			" * Implements hook_tokens.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_tokens(\\$type, \\$tokens, array \\$data, array \\$options, \\Drupal\\Core\\Render\\BubbleableMetadata \\$bubbleable_metadata) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Provide replacement values for placeholder tokens.",
			"This hook is invoked when someone calls",
			"\\Drupal\\Core\\Utility\\Token::replace(). That function first scans the text for",
			"[type:token] patterns, and splits the needed tokens into groups by type.",
			"Then hook_tokens() is invoked on each token-type group, allowing your module",
			"to respond by providing replacement text for any of the tokens in the group",
			"that your module knows how to process.",
			"A module implementing this hook should also implement hook_token_info() in",
			"order to list its available tokens on editing screens."
		],
		"scope": "php"
	},
	"hook_tokens_alter": {
		"prefix": "hook_tokens_alter",
		"body": [
			"/**",
			" * Implements hook_tokens_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_tokens_alter(array &\\$replacements, array \\$context, \\Drupal\\Core\\Render\\BubbleableMetadata \\$bubbleable_metadata) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter replacement values for placeholder tokens."
		],
		"scope": "php"
	},
	"hook_token_info": {
		"prefix": "hook_token_info",
		"body": [
			"/**",
			" * Implements hook_token_info.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_token_info() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Provide information about available placeholder tokens and token types.",
			"Tokens are placeholders that can be put into text by using the syntax",
			"[type:token], where type is the machine-readable name of a token type, and",
			"token is the machine-readable name of a token within this group. This hook",
			"provides a list of types and tokens to be displayed on text editing screens,",
			"so that people editing text can see what their token options are.",
			"The actual token replacement is done by",
			"\\Drupal\\Core\\Utility\\Token::replace(), which invokes hook_tokens(). Your",
			"module will need to implement that hook in order to generate token",
			"replacements from the tokens defined here."
		],
		"scope": "php"
	},
	"hook_token_info_alter": {
		"prefix": "hook_token_info_alter",
		"body": [
			"/**",
			" * Implements hook_token_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_token_info_alter(&\\$data) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the metadata about available placeholder tokens and token types."
		],
		"scope": "php"
	},
	"hook_aggregator_fetcher_info_alter": {
		"prefix": "hook_aggregator_fetcher_info_alter",
		"body": [
			"/**",
			" * Implements hook_aggregator_fetcher_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_aggregator_fetcher_info_alter(array &\\$info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform alterations on the available fetchers."
		],
		"scope": "php"
	},
	"hook_aggregator_parser_info_alter": {
		"prefix": "hook_aggregator_parser_info_alter",
		"body": [
			"/**",
			" * Implements hook_aggregator_parser_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_aggregator_parser_info_alter(array &\\$info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform alterations on the available parsers."
		],
		"scope": "php"
	},
	"hook_aggregator_processor_info_alter": {
		"prefix": "hook_aggregator_processor_info_alter",
		"body": [
			"/**",
			" * Implements hook_aggregator_processor_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_aggregator_processor_info_alter(array &\\$info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform alterations on the available processors."
		],
		"scope": "php"
	},
	"hook_block_view_alter": {
		"prefix": "hook_block_view_alter",
		"body": [
			"/**",
			" * Implements hook_block_view_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_block_view_alter(array &\\$build, \\Drupal\\Core\\Block\\BlockPluginInterface \\$block) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the result of \\Drupal\\Core\\Block\\BlockBase::build().",
			"This hook is called after the content has been assembled in a structured",
			"array and may be used for doing processing which requires that the complete",
			"block content structure has been built.",
			"If the module wishes to act on the rendered HTML of the block rather than",
			"the structured content array, it may use this hook to add a #post_render",
			"callback. Alternatively, it could also implement hook_preprocess_HOOK() for",
			"block.html.twig. See drupal_render() documentation or the"
		],
		"scope": "php"
	},
	"hook_block_view_BASE_BLOCK_ID_alter": {
		"prefix": "hook_block_view_BASE_BLOCK_ID_alter",
		"body": [
			"/**",
			" * Implements hook_block_view_BASE_BLOCK_ID_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_block_view_${2:BASE_BLOCK_ID}_alter(array &\\$build, \\Drupal\\Core\\Block\\BlockPluginInterface \\$block) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Provide a block plugin specific block_view alteration.",
			"In this hook name, BASE_BLOCK_ID refers to the block implementation's plugin",
			"id, regardless of whether the plugin supports derivatives. For example, for",
			"the \\Drupal\\system\\Plugin\\Block\\SystemPoweredByBlock block, this would be",
			"'system_powered_by_block' as per that class's annotation. And for the",
			"\\Drupal\\system\\Plugin\\Block\\SystemMenuBlock block, it would be",
			"'system_menu_block' as per that class's annotation, regardless of which menu",
			"the derived block is for."
		],
		"scope": "php"
	},
	"hook_block_build_alter": {
		"prefix": "hook_block_build_alter",
		"body": [
			"/**",
			" * Implements hook_block_build_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_block_build_alter(array &\\$build, \\Drupal\\Core\\Block\\BlockPluginInterface \\$block) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the result of \\Drupal\\Core\\Block\\BlockBase::build().",
			"Unlike hook_block_view_alter(), this hook is called very early, before the",
			"block is being assembled. Therefore, it is early enough to alter the",
			"cacheability metadata (change #cache), or to explicitly placeholder the block",
			"(set #create_placeholder).",
			"In addition to hook_block_build_alter(), which is called for all blocks,",
			"there is hook_block_build_BASE_BLOCK_ID_alter(), which can be used to target",
			"a specific block or set of similar blocks."
		],
		"scope": "php"
	},
	"hook_block_build_BASE_BLOCK_ID_alter": {
		"prefix": "hook_block_build_BASE_BLOCK_ID_alter",
		"body": [
			"/**",
			" * Implements hook_block_build_BASE_BLOCK_ID_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_block_build_${2:BASE_BLOCK_ID}_alter(array &\\$build, \\Drupal\\Core\\Block\\BlockPluginInterface \\$block) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Provide a block plugin specific block_build alteration.",
			"In this hook name, BASE_BLOCK_ID refers to the block implementation's plugin",
			"id, regardless of whether the plugin supports derivatives. For example, for",
			"the \\Drupal\\system\\Plugin\\Block\\SystemPoweredByBlock block, this would be",
			"'system_powered_by_block' as per that class's annotation. And for the",
			"\\Drupal\\system\\Plugin\\Block\\SystemMenuBlock block, it would be",
			"'system_menu_block' as per that class's annotation, regardless of which menu",
			"the derived block is for."
		],
		"scope": "php"
	},
	"hook_block_access": {
		"prefix": "hook_block_access",
		"body": [
			"/**",
			" * Implements hook_block_access.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_block_access(\\Drupal\\block\\Entity\\Block \\$block, \\$operation, \\Drupal\\Core\\Session\\AccountInterface \\$account) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Control access to a block instance.",
			"Modules may implement this hook if they want to have a say in whether or not",
			"a given user has access to perform a given operation on a block instance."
		],
		"scope": "php"
	},
	"hook_ckeditor_plugin_info_alter": {
		"prefix": "hook_ckeditor_plugin_info_alter",
		"body": [
			"/**",
			" * Implements hook_ckeditor_plugin_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_ckeditor_plugin_info_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available CKEditor plugins.",
			"This hook may be used to modify plugin properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_ckeditor_css_alter": {
		"prefix": "hook_ckeditor_css_alter",
		"body": [
			"/**",
			" * Implements hook_ckeditor_css_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_ckeditor_css_alter(array &\\$css, Editor \\$editor) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of CSS files that will be added to a CKEditor instance.",
			"Modules may use this hook to provide their own custom CSS file without",
			"providing a CKEditor plugin. This list of CSS files is only used in the",
			"iframe versions of CKEditor.",
			"Front-end themes (and base themes) can easily specify CSS files to be used in",
			"iframe instances of CKEditor through an entry in their .info.yml file:"
		],
		"scope": "php"
	},
	"hook_comment_links_alter": {
		"prefix": "hook_comment_links_alter",
		"body": [
			"/**",
			" * Implements hook_comment_links_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_comment_links_alter(array &\\$links, CommentInterface \\$entity, array &\\$context) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the links of a comment."
		],
		"scope": "php"
	},
	"hook_config_translation_info": {
		"prefix": "hook_config_translation_info",
		"body": [
			"/**",
			" * Implements hook_config_translation_info.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_config_translation_info(&\\$info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Introduce dynamic translation tabs for translation of configuration.",
			"This hook augments MODULE.config_translation.yml as well as",
			"THEME.config_translation.yml files to collect dynamic translation mapper",
			"information. If your information is static, just provide such a YAML file",
			"with your module containing the mapping.",
			"Note that while themes can provide THEME.config_translation.yml files this",
			"hook is not invoked for themes."
		],
		"scope": "php"
	},
	"hook_config_translation_info_alter": {
		"prefix": "hook_config_translation_info_alter",
		"body": [
			"/**",
			" * Implements hook_config_translation_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_config_translation_info_alter(&\\$info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter existing translation tabs for translation of configuration.",
			"This hook is useful to extend existing configuration mappers with new",
			"configuration names, for example when altering existing forms with new",
			"settings stored elsewhere. This allows the translation experience to also",
			"reflect the compound form element in one screen."
		],
		"scope": "php"
	},
	"hook_contextual_links_view_alter": {
		"prefix": "hook_contextual_links_view_alter",
		"body": [
			"/**",
			" * Implements hook_contextual_links_view_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_contextual_links_view_alter(&\\$element, \\$items) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter a contextual links element before it is rendered.",
			"This hook is invoked by contextual_pre_render_links(). The renderable array",
			"of #type 'contextual_links', containing the entire contextual links data that",
			"is passed in by reference. Further links may be added or existing links can",
			"be altered."
		],
		"scope": "php"
	},
	"hook_editor_info_alter": {
		"prefix": "hook_editor_info_alter",
		"body": [
			"/**",
			" * Implements hook_editor_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_editor_info_alter(array &\\$editors) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Performs alterations on text editor definitions."
		],
		"scope": "php"
	},
	"hook_editor_js_settings_alter": {
		"prefix": "hook_editor_js_settings_alter",
		"body": [
			"/**",
			" * Implements hook_editor_js_settings_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_editor_js_settings_alter(array &\\$settings) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modifies JavaScript settings that are added for text editors."
		],
		"scope": "php"
	},
	"hook_editor_xss_filter_alter": {
		"prefix": "hook_editor_xss_filter_alter",
		"body": [
			"/**",
			" * Implements hook_editor_xss_filter_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_editor_xss_filter_alter(&\\$editor_xss_filter_class, FilterFormatInterface \\$format, FilterFormatInterface \\$original_format = NULL) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modifies the text editor XSS filter that will used for the given text format.",
			"Is only called when an EditorXssFilter will effectively be used; this hook",
			"does not allow one to alter that decision."
		],
		"scope": "php"
	},
	"hook_field_info_alter": {
		"prefix": "hook_field_info_alter",
		"body": [
			"/**",
			" * Implements hook_field_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_info_alter(&\\$info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform alterations on Field API field types."
		],
		"scope": "php"
	},
	"hook_field_ui_preconfigured_options_alter": {
		"prefix": "hook_field_ui_preconfigured_options_alter",
		"body": [
			"/**",
			" * Implements hook_field_ui_preconfigured_options_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_ui_preconfigured_options_alter(array &\\$options, \\$field_type) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform alterations on preconfigured field options."
		],
		"scope": "php"
	},
	"hook_field_storage_config_update_forbid": {
		"prefix": "hook_field_storage_config_update_forbid",
		"body": [
			"/**",
			" * Implements hook_field_storage_config_update_forbid.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_storage_config_update_forbid(\\Drupal\\field\\FieldStorageConfigInterface \\$field_storage, \\Drupal\\field\\FieldStorageConfigInterface \\$prior_field_storage) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Forbid a field storage update from occurring.",
			"Any module may forbid any update for any reason. For example, the",
			"field's storage module might forbid an update if it would change",
			"the storage schema while data for the field exists. A field type",
			"module might forbid an update if it would change existing data's",
			"semantics, or if there are external dependencies on field settings",
			"that cannot be updated.",
			"To forbid the update from occurring, throw a",
			"\\Drupal\\Core\\Entity\\Exception\\FieldStorageDefinitionUpdateForbiddenException."
		],
		"scope": "php"
	},
	"hook_field_widget_info_alter": {
		"prefix": "hook_field_widget_info_alter",
		"body": [
			"/**",
			" * Implements hook_field_widget_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_widget_info_alter(array &\\$info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform alterations on Field API widget types."
		],
		"scope": "php"
	},
	"hook_field_widget_form_alter": {
		"prefix": "hook_field_widget_form_alter",
		"body": [
			"/**",
			" * Implements hook_field_widget_form_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_widget_form_alter(&\\$element, \\Drupal\\Core\\Form\\FormStateInterface \\$form_state, \\$context) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter forms for field widgets provided by other modules.",
			"This hook can only modify individual elements within a field widget and",
			"cannot alter the top level (parent element) for multi-value fields. In most",
			"cases, you should use hook_field_widget_multivalue_form_alter() instead and",
			"loop over the elements."
		],
		"scope": "php"
	},
	"hook_field_widget_WIDGET_TYPE_form_alter": {
		"prefix": "hook_field_widget_WIDGET_TYPE_form_alter",
		"body": [
			"/**",
			" * Implements hook_field_widget_WIDGET_TYPE_form_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_widget_${2:WIDGET_TYPE}_form_alter(&\\$element, \\Drupal\\Core\\Form\\FormStateInterface \\$form_state, \\$context) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter widget forms for a specific widget provided by another module.",
			"Modules can implement hook_field_widget_WIDGET_TYPE_form_alter() to modify a",
			"specific widget form, rather than using hook_field_widget_form_alter() and",
			"checking the widget type.",
			"This hook can only modify individual elements within a field widget and",
			"cannot alter the top level (parent element) for multi-value fields. In most",
			"cases, you should use hook_field_widget_multivalue_WIDGET_TYPE_form_alter()",
			"instead and loop over the elements."
		],
		"scope": "php"
	},
	"hook_field_widget_multivalue_form_alter": {
		"prefix": "hook_field_widget_multivalue_form_alter",
		"body": [
			"/**",
			" * Implements hook_field_widget_multivalue_form_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_widget_multivalue_form_alter(array &\\$elements, \\Drupal\\Core\\Form\\FormStateInterface \\$form_state, array \\$context) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter forms for multi-value field widgets provided by other modules.",
			"To alter the individual elements within the widget, loop over",
			"\\Drupal\\Core\\Render\\Element::children($elements)."
		],
		"scope": "php"
	},
	"hook_field_widget_multivalue_WIDGET_TYPE_form_alter": {
		"prefix": "hook_field_widget_multivalue_WIDGET_TYPE_form_alter",
		"body": [
			"/**",
			" * Implements hook_field_widget_multivalue_WIDGET_TYPE_form_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_widget_multivalue_${2:WIDGET_TYPE}_form_alter(array &\\$elements, \\Drupal\\Core\\Form\\FormStateInterface \\$form_state, array \\$context) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter multi-value widget forms for a widget provided by another module.",
			"Modules can implement hook_field_widget_multivalue_WIDGET_TYPE_form_alter() to",
			"modify a specific widget form, rather than using",
			"hook_field_widget_form_alter() and checking the widget type.",
			"To alter the individual elements within the widget, loop over",
			"\\Drupal\\Core\\Render\\Element::children($elements)."
		],
		"scope": "php"
	},
	"hook_field_formatter_info_alter": {
		"prefix": "hook_field_formatter_info_alter",
		"body": [
			"/**",
			" * Implements hook_field_formatter_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_formatter_info_alter(array &\\$info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform alterations on Field API formatter types."
		],
		"scope": "php"
	},
	"hook_field_info_max_weight": {
		"prefix": "hook_field_info_max_weight",
		"body": [
			"/**",
			" * Implements hook_field_info_max_weight.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_info_max_weight(\\$entity_type, \\$bundle, \\$context, \\$context_mode) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Returns the maximum weight for the entity components handled by the module.",
			"Field API takes care of fields and 'extra_fields'. This hook is intended for",
			"third-party modules adding other entity components (e.g. field_group)."
		],
		"scope": "php"
	},
	"hook_field_purge_field_storage": {
		"prefix": "hook_field_purge_field_storage",
		"body": [
			"/**",
			" * Implements hook_field_purge_field_storage.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_purge_field_storage(\\Drupal\\field\\Entity\\FieldStorageConfig \\$field_storage) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Acts when a field storage definition is being purged.",
			"In field_purge_field_storage(), after the storage definition has been removed",
			"from the system, the entity storage has purged stored field data, and the",
			"field definitions cache has been cleared, this hook is invoked on all modules",
			"to allow them to respond to the field storage being purged."
		],
		"scope": "php"
	},
	"hook_field_purge_field": {
		"prefix": "hook_field_purge_field",
		"body": [
			"/**",
			" * Implements hook_field_purge_field.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_purge_field(\\Drupal\\field\\Entity\\FieldConfig \\$field) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Acts when a field is being purged.",
			"In field_purge_field(), after the field definition has been removed",
			"from the system, the entity storage has purged stored field data, and the",
			"field info cache has been cleared, this hook is invoked on all modules to",
			"allow them to respond to the field being purged."
		],
		"scope": "php"
	},
	"hook_field_formatter_third_party_settings_form": {
		"prefix": "hook_field_formatter_third_party_settings_form",
		"body": [
			"/**",
			" * Implements hook_field_formatter_third_party_settings_form.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_formatter_third_party_settings_form(\\Drupal\\Core\\Field\\FormatterInterface \\$plugin, \\Drupal\\Core\\Field\\FieldDefinitionInterface \\$field_definition, \\$view_mode, array \\$form, \\Drupal\\Core\\Form\\FormStateInterface \\$form_state) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Allow modules to add settings to field formatters provided by other modules."
		],
		"scope": "php"
	},
	"hook_field_widget_third_party_settings_form": {
		"prefix": "hook_field_widget_third_party_settings_form",
		"body": [
			"/**",
			" * Implements hook_field_widget_third_party_settings_form.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_widget_third_party_settings_form(\\Drupal\\Core\\Field\\WidgetInterface \\$plugin, \\Drupal\\Core\\Field\\FieldDefinitionInterface \\$field_definition, \\$form_mode, array \\$form, \\Drupal\\Core\\Form\\FormStateInterface \\$form_state) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Allow modules to add settings to field widgets provided by other modules."
		],
		"scope": "php"
	},
	"hook_field_formatter_settings_summary_alter": {
		"prefix": "hook_field_formatter_settings_summary_alter",
		"body": [
			"/**",
			" * Implements hook_field_formatter_settings_summary_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_formatter_settings_summary_alter(array &\\$summary, array \\$context) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alters the field formatter settings summary."
		],
		"scope": "php"
	},
	"hook_field_widget_settings_summary_alter": {
		"prefix": "hook_field_widget_settings_summary_alter",
		"body": [
			"/**",
			" * Implements hook_field_widget_settings_summary_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_widget_settings_summary_alter(array &\\$summary, array \\$context) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alters the field widget settings summary."
		],
		"scope": "php"
	},
	"hook_file_validate": {
		"prefix": "hook_file_validate",
		"body": [
			"/**",
			" * Implements hook_file_validate.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_file_validate(Drupal\\file\\FileInterface \\$file) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Check that files meet a given criteria.",
			"This hook lets modules perform additional validation on files. They're able",
			"to report a failure by returning one or more error messages."
		],
		"scope": "php"
	},
	"hook_file_copy": {
		"prefix": "hook_file_copy",
		"body": [
			"/**",
			" * Implements hook_file_copy.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_file_copy(Drupal\\file\\FileInterface \\$file, Drupal\\file\\FileInterface \\$source) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to a file that has been copied."
		],
		"scope": "php"
	},
	"hook_file_move": {
		"prefix": "hook_file_move",
		"body": [
			"/**",
			" * Implements hook_file_move.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_file_move(Drupal\\file\\FileInterface \\$file, Drupal\\file\\FileInterface \\$source) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to a file that has been moved."
		],
		"scope": "php"
	},
	"hook_filter_info_alter": {
		"prefix": "hook_filter_info_alter",
		"body": [
			"/**",
			" * Implements hook_filter_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_filter_info_alter(&\\$info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform alterations on filter definitions."
		],
		"scope": "php"
	},
	"hook_filter_secure_image_alter": {
		"prefix": "hook_filter_secure_image_alter",
		"body": [
			"/**",
			" * Implements hook_filter_secure_image_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_filter_secure_image_alter(&\\$image) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alters images with an invalid source.",
			"When the 'Restrict images to this site' filter is enabled, any images that",
			"are not hosted on the site will be passed through this hook, most commonly to",
			"replace the invalid image with an error indicator."
		],
		"scope": "php"
	},
	"hook_filter_format_disable": {
		"prefix": "hook_filter_format_disable",
		"body": [
			"/**",
			" * Implements hook_filter_format_disable.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_filter_format_disable(\\$format) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform actions when a text format has been disabled."
		],
		"scope": "php"
	},
	"hook_hal_type_uri_alter": {
		"prefix": "hook_hal_type_uri_alter",
		"body": [
			"/**",
			" * Implements hook_hal_type_uri_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_hal_type_uri_alter(&\\$uri, \\$context = []) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the HAL type URI.",
			"Modules may wish to alter the type URI generated for a resource based on the",
			"context of the serializer/normalizer operation."
		],
		"scope": "php"
	},
	"hook_hal_relation_uri_alter": {
		"prefix": "hook_hal_relation_uri_alter",
		"body": [
			"/**",
			" * Implements hook_hal_relation_uri_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_hal_relation_uri_alter(&\\$uri, \\$context = []) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the HAL relation URI.",
			"Modules may wish to alter the relation URI generated for a resource based on",
			"the context of the serializer/normalizer operation."
		],
		"scope": "php"
	},
	"hook_help": {
		"prefix": "hook_help",
		"body": [
			"/**",
			" * Implements hook_help.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_help(\\$route_name, \\Drupal\\Core\\Routing\\RouteMatchInterface \\$route_match) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Provide online user help.",
			"By implementing hook_help(), a module can make documentation available to",
			"the user for the module as a whole, or for specific pages. Help for",
			"developers should usually be provided via function header comments in the",
			"code, or in special API example files.",
			"The page-specific help information provided by this hook appears in the",
			"Help block (provided by the core Help module), if the block is displayed on",
			"that page. The module overview help information is displayed by the Help",
			"module. It can be accessed from the page at /admin/help or from the Extend",
			"page. If a module implements hook_help() the help system expects module",
			"overview help to be provided.",
			"For detailed usage examples of:",
			"- Module overview help, see content_translation_help(). Module overview",
			"help should follow"
		],
		"scope": "php"
	},
	"hook_help_section_info_alter": {
		"prefix": "hook_help_section_info_alter",
		"body": [
			"/**",
			" * Implements hook_help_section_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_help_section_info_alter(array &\\$info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform alterations on help page section plugin definitions.",
			"Sections for the page at /admin/help are provided by plugins. This hook",
			"allows modules to alter the plugin definitions."
		],
		"scope": "php"
	},
	"hook_help_topics_info_alter": {
		"prefix": "hook_help_topics_info_alter",
		"body": [
			"/**",
			" * Implements hook_help_topics_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_help_topics_info_alter(array &\\$info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform alterations on help topic definitions."
		],
		"scope": "php"
	},
	"hook_image_effect_info_alter": {
		"prefix": "hook_image_effect_info_alter",
		"body": [
			"/**",
			" * Implements hook_image_effect_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_image_effect_info_alter(&\\$effects) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the information provided in \\Drupal\\image\\Annotation\\ImageEffect."
		],
		"scope": "php"
	},
	"hook_image_style_flush": {
		"prefix": "hook_image_style_flush",
		"body": [
			"/**",
			" * Implements hook_image_style_flush.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_image_style_flush(\\$style) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to image style flushing.",
			"This hook enables modules to take effect when a style is being flushed (all",
			"images are being deleted from the server and regenerated). Any",
			"module-specific caches that contain information related to the style should",
			"be cleared using this hook. This hook is called whenever a style is updated,",
			"deleted, or any effect associated with the style is update or deleted."
		],
		"scope": "php"
	},
	"hook_jsonapi_entity_filter_access": {
		"prefix": "hook_jsonapi_entity_filter_access",
		"body": [
			"/**",
			" * Implements hook_jsonapi_entity_filter_access.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_jsonapi_entity_filter_access(\\Drupal\\Core\\Entity\\EntityTypeInterface \\$entity_type, \\Drupal\\Core\\Session\\AccountInterface \\$account) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Controls access when filtering by entity data via JSON:API.",
			"This module supports filtering by resource object attributes referenced by",
			"relationship fields. For example, a site may add a \"Favorite Animal\" field",
			"to user entities, which would permit the following filtered query:"
		],
		"scope": "php"
	},
	"hook_jsonapi_ENTITY_TYPE_filter_access": {
		"prefix": "hook_jsonapi_ENTITY_TYPE_filter_access",
		"body": [
			"/**",
			" * Implements hook_jsonapi_ENTITY_TYPE_filter_access.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_jsonapi_${2:ENTITY_TYPE}_filter_access(\\Drupal\\Core\\Entity\\EntityTypeInterface \\$entity_type, \\Drupal\\Core\\Session\\AccountInterface \\$account) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Controls access to filtering by entity data via JSON:API.",
			"This is the entity-type-specific variant of",
			"hook_jsonapi_entity_filter_access(). For implementations with logic that is",
			"specific to a single entity type, it is recommended to implement this hook",
			"rather than the generic hook_jsonapi_entity_filter_access() hook, which is",
			"called for every entity type."
		],
		"scope": "php"
	},
	"hook_jsonapi_entity_field_filter_access": {
		"prefix": "hook_jsonapi_entity_field_filter_access",
		"body": [
			"/**",
			" * Implements hook_jsonapi_entity_field_filter_access.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_jsonapi_entity_field_filter_access(\\Drupal\\Core\\Field\\FieldDefinitionInterface \\$field_definition, \\Drupal\\Core\\Session\\AccountInterface \\$account) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Restricts filtering access to the given field.",
			"Some fields may contain sensitive information. In these cases, modules are",
			"supposed to implement hook_entity_field_access(). However, this hook receives",
			"an optional `$items` argument and often must return AccessResult::neutral()",
			"when `$items === NULL`. This is because access may or may not be allowed",
			"based on the field items or based on the entity on which the field is",
			"attached (if the user is the entity owner, for example).",
			"Since JSON:API must check field access prior to having a field item list",
			"instance available (access must be checked before a database query is made),",
			"it is not sufficiently secure to check field 'view' access alone.",
			"This hook exists so that modules which cannot return",
			"AccessResult::forbidden() from hook_entity_field_access() can still secure",
			"JSON:API requests where necessary.",
			"If a corresponding implementation of hook_entity_field_access() *can* be",
			"forbidden for one or more values of the `$items` argument, this hook *MUST*",
			"return AccessResult::forbidden()."
		],
		"scope": "php"
	},
	"hook_language_types_info": {
		"prefix": "hook_language_types_info",
		"body": [
			"/**",
			" * Implements hook_language_types_info.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_language_types_info() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Define language types."
		],
		"scope": "php"
	},
	"hook_language_types_info_alter": {
		"prefix": "hook_language_types_info_alter",
		"body": [
			"/**",
			" * Implements hook_language_types_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_language_types_info_alter(array &\\$language_types) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform alterations on language types."
		],
		"scope": "php"
	},
	"hook_language_negotiation_info_alter": {
		"prefix": "hook_language_negotiation_info_alter",
		"body": [
			"/**",
			" * Implements hook_language_negotiation_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_language_negotiation_info_alter(array &\\$negotiation_info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Perform alterations on language negotiation methods."
		],
		"scope": "php"
	},
	"hook_language_fallback_candidates_alter": {
		"prefix": "hook_language_fallback_candidates_alter",
		"body": [
			"/**",
			" * Implements hook_language_fallback_candidates_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_language_fallback_candidates_alter(array &\\$candidates, array \\$context) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Allow modules to alter the language fallback candidates."
		],
		"scope": "php"
	},
	"hook_language_fallback_candidates_OPERATION_alter": {
		"prefix": "hook_language_fallback_candidates_OPERATION_alter",
		"body": [
			"/**",
			" * Implements hook_language_fallback_candidates_OPERATION_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_language_fallback_candidates_${2:OPERATION}_alter(array &\\$candidates, array \\$context) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Allow modules to alter the fallback candidates for specific operations."
		],
		"scope": "php"
	},
	"hook_locale_translation_projects_alter": {
		"prefix": "hook_locale_translation_projects_alter",
		"body": [
			"/**",
			" * Implements hook_locale_translation_projects_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_locale_translation_projects_alter(&\\$projects) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the list of projects to be updated by locale's interface translation.",
			"Locale module attempts to update the translation of those modules returned",
			"by \\Drupal\\update\\UpdateManager::getProjects(). Using this hook, the data",
			"returned by \\Drupal\\update\\UpdateManager::getProjects() can be altered or",
			"extended.",
			"Modules or distributions that use a dedicated translation server should use",
			"this hook to specify the interface translation server pattern, or to add",
			"additional custom/non-Drupal.org modules to the list of modules known to",
			"locale.",
			"- \"interface translation server pattern\": URL of the .po translation files",
			"used to download the files from. The URL contains tokens which will be",
			"replaced by appropriate values.",
			"The following tokens are available for the server pattern:",
			"- \"%core\": Core version. Value example: \"8.x\".",
			"- \"%project\": Project name. Value examples: \"drupal\", \"media_gallery\".",
			"- \"%version\": Project version release. Value examples: \"8.1\", \"8.x-1.0\".",
			"- \"%language\": Language code. Value examples: \"fr\", \"pt-pt\"."
		],
		"scope": "php"
	},
	"hook_media_source_info_alter": {
		"prefix": "hook_media_source_info_alter",
		"body": [
			"/**",
			" * Implements hook_media_source_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_media_source_info_alter(array &\\$sources) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alters the information provided in \\Drupal\\media\\Annotation\\MediaSource."
		],
		"scope": "php"
	},
	"hook_oembed_resource_url_alter": {
		"prefix": "hook_oembed_resource_url_alter",
		"body": [
			"/**",
			" * Implements hook_oembed_resource_url_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_oembed_resource_url_alter(array &\\$parsed_url, \\Drupal\\media\\OEmbed\\Provider \\$provider) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alters an oEmbed resource URL before it is fetched."
		],
		"scope": "php"
	},
	"hook_migrate_prepare_row": {
		"prefix": "hook_migrate_prepare_row",
		"body": [
			"/**",
			" * Implements hook_migrate_prepare_row.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_migrate_prepare_row(Row \\$row, MigrateSourceInterface \\$source, MigrationInterface \\$migration) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Allows adding data to a row before processing it.",
			"For example, filter module used to store filter format settings in the",
			"variables table which now needs to be inside the filter format config",
			"file. So, it needs to be added here.",
			"hook_migrate_MIGRATION_ID_prepare_row() is also available."
		],
		"scope": "php"
	},
	"hook_migrate_MIGRATION_ID_prepare_row": {
		"prefix": "hook_migrate_MIGRATION_ID_prepare_row",
		"body": [
			"/**",
			" * Implements hook_migrate_MIGRATION_ID_prepare_row.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_migrate_${2:MIGRATION_ID}_prepare_row(Row \\$row, MigrateSourceInterface \\$source, MigrationInterface \\$migration) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Allows adding data to a row for a migration with the specified ID.",
			"This provides the same functionality as hook_migrate_prepare_row() but",
			"removes the need to check the value of $migration->id()."
		],
		"scope": "php"
	},
	"hook_migration_plugins_alter": {
		"prefix": "hook_migration_plugins_alter",
		"body": [
			"/**",
			" * Implements hook_migration_plugins_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_migration_plugins_alter(array &\\$migrations) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Allows altering the list of discovered migration plugins.",
			"Modules are able to alter specific migrations structures or even remove or",
			"append additional migrations to the discovery. For example, this",
			"implementation filters out Drupal 6 migrations from the discovered migration",
			"list. This is done by checking the migration tags."
		],
		"scope": "php"
	},
	"hook_node_grants": {
		"prefix": "hook_node_grants",
		"body": [
			"/**",
			" * Implements hook_node_grants.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_node_grants(\\Drupal\\Core\\Session\\AccountInterface \\$account, \\$op) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Inform the node access system what permissions the user has.",
			"This hook is for implementation by node access modules. In this hook,",
			"the module grants a user different \"grant IDs\" within one or more",
			"\"realms\". In hook_node_access_records(), the realms and grant IDs are",
			"associated with permission to view, edit, and delete individual nodes.",
			"The realms and grant IDs can be arbitrarily defined by your node access",
			"module; it is common to use role IDs as grant IDs, but that is not required.",
			"Your module could instead maintain its own list of users, where each list has",
			"an ID. In that case, the return value of this hook would be an array of the",
			"list IDs that this user is a member of.",
			"A node access module may implement as many realms as necessary to properly",
			"define the access privileges for the nodes. Note that the system makes no",
			"distinction between published and unpublished nodes. It is the module's",
			"responsibility to provide appropriate realms to limit access to unpublished",
			"content.",
			"Node access records are stored in the {node_access} table and define which",
			"grants are required to access a node. There is a special case for the view",
			"operation -- a record with node ID 0 corresponds to a \"view all\" grant for",
			"the realm and grant ID of that record. If there are no node access modules",
			"enabled, the core node module adds a node ID 0 record for realm 'all'. Node",
			"access modules can also grant \"view all\" permission on their custom realms;",
			"for example, a module could create a record in {node_access} with:"
		],
		"scope": "php"
	},
	"hook_node_access_records": {
		"prefix": "hook_node_access_records",
		"body": [
			"/**",
			" * Implements hook_node_access_records.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_node_access_records(\\Drupal\\node\\NodeInterface \\$node) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Set permissions for a node to be written to the database.",
			"When a node is saved, a module implementing hook_node_access_records() will",
			"be asked if it is interested in the access permissions for a node. If it is",
			"interested, it must respond with an array of permissions arrays for that",
			"node.",
			"Node access grants apply regardless of the published or unpublished status",
			"of the node. Implementations must make sure not to grant access to",
			"unpublished nodes if they don't want to change the standard access control",
			"behavior. Your module may need to create a separate access realm to handle",
			"access to unpublished nodes.",
			"Note that the grant values in the return value from your hook must be",
			"integers and not boolean TRUE and FALSE.",
			"Each permissions item in the array is an array with the following elements:",
			"- 'realm': The name of a realm that the module has defined in",
			"hook_node_grants().",
			"- 'gid': A 'grant ID' from hook_node_grants().",
			"- 'grant_view': If set to 1 a user that has been identified as a member",
			"of this gid within this realm can view this node. This should usually be",
			"set to $node->isPublished(). Failure to do so may expose unpublished content",
			"to some users.",
			"- 'grant_update': If set to 1 a user that has been identified as a member",
			"of this gid within this realm can edit this node.",
			"- 'grant_delete': If set to 1 a user that has been identified as a member",
			"of this gid within this realm can delete this node.",
			"- langcode: (optional) The language code of a specific translation of the",
			"node, if any. Modules may add this key to grant different access to",
			"different translations of a node, such that (e.g.) a particular group is",
			"granted access to edit the Catalan version of the node, but not the",
			"Hungarian version. If no value is provided, the langcode is set",
			"automatically from the $node parameter and the node's original language (if",
			"specified) is used as a fallback. Only specify multiple grant records with",
			"different languages for a node if the site has those languages configured.",
			"A \"deny all\" grant may be used to deny all access to a particular node or",
			"node translation:"
		],
		"scope": "php"
	},
	"hook_node_access_records_alter": {
		"prefix": "hook_node_access_records_alter",
		"body": [
			"/**",
			" * Implements hook_node_access_records_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_node_access_records_alter(&\\$grants, Drupal\\node\\NodeInterface \\$node) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter permissions for a node before it is written to the database.",
			"Node access modules establish rules for user access to content. Node access",
			"records are stored in the {node_access} table and define which permissions",
			"are required to access a node. This hook is invoked after node access modules",
			"returned their requirements via hook_node_access_records(); doing so allows",
			"modules to modify the $grants array by reference before it is stored, so",
			"custom or advanced business logic can be applied.",
			"Upon viewing, editing or deleting a node, hook_node_grants() builds a",
			"permissions array that is compared against the stored access records. The",
			"user must have one or more matching permissions in order to complete the",
			"requested operation.",
			"A module may deny all access to a node by setting $grants to an empty array.",
			"The preferred use of this hook is in a module that bridges multiple node",
			"access modules with a configurable behavior, as shown in the example with the",
			"'is_preview' field."
		],
		"scope": "php"
	},
	"hook_node_grants_alter": {
		"prefix": "hook_node_grants_alter",
		"body": [
			"/**",
			" * Implements hook_node_grants_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_node_grants_alter(&\\$grants, \\Drupal\\Core\\Session\\AccountInterface \\$account, \\$op) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter user access rules when trying to view, edit or delete a node.",
			"Node access modules establish rules for user access to content.",
			"hook_node_grants() defines permissions for a user to view, edit or delete",
			"nodes by building a $grants array that indicates the permissions assigned to",
			"the user by each node access module. This hook is called to allow modules to",
			"modify the $grants array by reference, so the interaction of multiple node",
			"access modules can be altered or advanced business logic can be applied.",
			"The resulting grants are then checked against the records stored in the",
			"{node_access} table to determine if the operation may be completed.",
			"A module may deny all access to a user by setting $grants to an empty array.",
			"Developers may use this hook to either add additional grants to a user or to",
			"remove existing grants. These rules are typically based on either the",
			"permissions assigned to a user role, or specific attributes of a user",
			"account."
		],
		"scope": "php"
	},
	"hook_node_search_result": {
		"prefix": "hook_node_search_result",
		"body": [
			"/**",
			" * Implements hook_node_search_result.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_node_search_result(\\Drupal\\node\\NodeInterface \\$node) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on a node being displayed as a search result.",
			"This hook is invoked from the node search plugin during search execution,",
			"after loading and rendering the node."
		],
		"scope": "php"
	},
	"hook_node_update_index": {
		"prefix": "hook_node_update_index",
		"body": [
			"/**",
			" * Implements hook_node_update_index.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_node_update_index(\\Drupal\\node\\NodeInterface \\$node) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on a node being indexed for searching.",
			"This hook is invoked during search indexing, after loading, and after the",
			"result of rendering is added as $node->rendered to the node object."
		],
		"scope": "php"
	},
	"hook_ranking": {
		"prefix": "hook_ranking",
		"body": [
			"/**",
			" * Implements hook_ranking.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_ranking() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Provide additional methods of scoring for core search results for nodes.",
			"A node's search score is used to rank it among other nodes matched by the",
			"search, with the highest-ranked nodes appearing first in the search listing.",
			"For example, a module allowing users to vote on content could expose an",
			"option to allow search results' rankings to be influenced by the average",
			"voting score of a node.",
			"All scoring mechanisms are provided as options to site administrators, and",
			"may be tweaked based on individual sites or disabled altogether if they do",
			"not make sense. Individual scoring mechanisms, if enabled, are assigned a",
			"weight from 1 to 10. The weight represents the factor of magnification of",
			"the ranking mechanism, with higher-weighted ranking mechanisms having more",
			"influence. In order for the weight system to work, each scoring mechanism",
			"must return a value between 0 and 1 for every node. That value is then",
			"multiplied by the administrator-assigned weight for the ranking mechanism,",
			"and then the weighted scores from all ranking mechanisms are added, which",
			"brings about the same result as a weighted average."
		],
		"scope": "php"
	},
	"hook_node_links_alter": {
		"prefix": "hook_node_links_alter",
		"body": [
			"/**",
			" * Implements hook_node_links_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_node_links_alter(array &\\$links, NodeInterface \\$entity, array &\\$context) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the links of a node."
		],
		"scope": "php"
	},
	"hook_options_list_alter": {
		"prefix": "hook_options_list_alter",
		"body": [
			"/**",
			" * Implements hook_options_list_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_options_list_alter(array &\\$options, array \\$context) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alters the list of options to be displayed for a field.",
			"This hook can notably be used to change the label of the empty option."
		],
		"scope": "php"
	},
	"hook_quickedit_editor_alter": {
		"prefix": "hook_quickedit_editor_alter",
		"body": [
			"/**",
			" * Implements hook_quickedit_editor_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_quickedit_editor_alter(&\\$editors) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Allow modules to alter in-place editor plugin metadata.",
			"This hook is called after the in-place editor plugins have been discovered,",
			"but before they are cached. Hence any alterations will be cached."
		],
		"scope": "php"
	},
	"hook_quickedit_render_field": {
		"prefix": "hook_quickedit_render_field",
		"body": [
			"/**",
			" * Implements hook_quickedit_render_field.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_quickedit_render_field(Drupal\\Core\\Entity\\EntityInterface \\$entity, \\$field_name, \\$view_mode_id, \\$langcode) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Returns a renderable array for the value of a single field in an entity.",
			"To integrate with in-place field editing when a non-standard render pipeline",
			"is used (FieldItemListInterface::view() is not sufficient to render back the",
			"field following in-place editing in the exact way it was displayed",
			"originally), implement this hook.",
			"Edit module integrates with HTML elements with data-edit-field-id attributes.",
			"For example:",
			"data-edit-field-id=\"node/1/<field-name>/und/<module-name>-<custom-id>\"",
			"After the editing is complete, this hook is invoked on the module with",
			"the custom render pipeline identifier (last part of data-edit-field-id) to",
			"re-render the field. Use the same logic used when rendering the field for",
			"the original display.",
			"The implementation should take care of invoking the prepare_view steps. It",
			"should also respect field access permissions."
		],
		"scope": "php"
	},
	"hook_rdf_namespaces": {
		"prefix": "hook_rdf_namespaces",
		"body": [
			"/**",
			" * Implements hook_rdf_namespaces.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_rdf_namespaces() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Allow modules to define namespaces for RDF mappings.",
			"Many common namespace prefixes are defined in rdf_rdf_namespaces(). However,",
			"if a module implements rdf mappings that use prefixes that are not",
			"defined in rdf_rdf_namespaces(), this hook should be used to define the new",
			"namespace prefixes."
		],
		"scope": "php"
	},
	"hook_rest_resource_alter": {
		"prefix": "hook_rest_resource_alter",
		"body": [
			"/**",
			" * Implements hook_rest_resource_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_rest_resource_alter(&\\$definitions) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the resource plugin definitions."
		],
		"scope": "php"
	},
	"hook_search_preprocess": {
		"prefix": "hook_search_preprocess",
		"body": [
			"/**",
			" * Implements hook_search_preprocess.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_search_preprocess(\\$text, \\$langcode = NULL) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Preprocess text for search.",
			"This hook is called to preprocess both the text added to the search index",
			"and the keywords users have submitted for searching. The same processing",
			"needs to be applied to both so that searches will find matches.",
			"Possible uses:",
			"- Adding spaces between words of Chinese or Japanese text.",
			"- Stemming words down to their root words to allow matches between, for",
			"instance, walk, walked, walking, and walks in searching.",
			"- Expanding abbreviations and acronyms that occur in text."
		],
		"scope": "php"
	},
	"hook_search_plugin_alter": {
		"prefix": "hook_search_plugin_alter",
		"body": [
			"/**",
			" * Implements hook_search_plugin_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_search_plugin_alter(array &\\$definitions) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter search plugin definitions."
		],
		"scope": "php"
	},
	"hook_shortcut_default_set": {
		"prefix": "hook_shortcut_default_set",
		"body": [
			"/**",
			" * Implements hook_shortcut_default_set.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_shortcut_default_set(\\$account) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Return the name of a default shortcut set for the provided user account.",
			"This hook allows modules to define default shortcut sets for a particular",
			"user that differ from the site-wide default (for example, a module may want",
			"to define default shortcuts on a per-role basis).",
			"The default shortcut set is used only when the user does not have any other",
			"shortcut set explicitly assigned to them.",
			"Note that only one default shortcut set can exist per user, so when multiple",
			"modules implement this hook, the last (i.e., highest weighted) module which",
			"returns a valid shortcut set name will prevail."
		],
		"scope": "php"
	},
	"hook_system_themes_page_alter": {
		"prefix": "hook_system_themes_page_alter",
		"body": [
			"/**",
			" * Implements hook_system_themes_page_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_system_themes_page_alter(&\\$theme_groups) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alters theme operation links."
		],
		"scope": "php"
	},
	"hook_toolbar": {
		"prefix": "hook_toolbar",
		"body": [
			"/**",
			" * Implements hook_toolbar.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_toolbar() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Add items to the toolbar menu.",
			"The toolbar is a container for administrative and site-global interactive",
			"components.",
			"The toolbar provides a common styling for items denoted by the",
			".toolbar-tab class.",
			"The toolbar provides a construct called a 'tray'. The tray is a container",
			"for content. The tray may be associated with a toggle in the administration",
			"bar. The toggle shows or hides the tray and is optimized for small and",
			"large screens. To create this association, hook_toolbar() returns one or",
			"more render elements of type 'toolbar_item', containing the toggle and tray",
			"elements in its 'tab' and 'tray' properties.",
			"The following properties are available:",
			"- 'tab': A renderable array.",
			"- 'tray': Optional. A renderable array.",
			"- '#weight': Optional. Integer weight used for sorting toolbar items in",
			"administration bar area.",
			"This hook is invoked in Toolbar::preRenderToolbar()."
		],
		"scope": "php"
	},
	"hook_toolbar_alter": {
		"prefix": "hook_toolbar_alter",
		"body": [
			"/**",
			" * Implements hook_toolbar_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_toolbar_alter(&\\$items) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the toolbar menu after hook_toolbar() is invoked.",
			"This hook is invoked by Toolbar::preRenderToolbar() immediately after",
			"hook_toolbar(). The toolbar definitions are passed in by reference. Each",
			"element of the $items array is one item returned by a module from",
			"hook_toolbar(). Additional items may be added, or existing items altered."
		],
		"scope": "php"
	},
	"hook_tour_tips_alter": {
		"prefix": "hook_tour_tips_alter",
		"body": [
			"/**",
			" * Implements hook_tour_tips_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_tour_tips_alter(array &\\$tour_tips, Drupal\\Core\\Entity\\EntityInterface \\$entity) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Allow modules to alter tour items before render."
		],
		"scope": "php"
	},
	"hook_tour_tips_info_alter": {
		"prefix": "hook_tour_tips_info_alter",
		"body": [
			"/**",
			" * Implements hook_tour_tips_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_tour_tips_info_alter(&\\$info) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Allow modules to alter tip plugin definitions."
		],
		"scope": "php"
	},
	"hook_update_projects_alter": {
		"prefix": "hook_update_projects_alter",
		"body": [
			"/**",
			" * Implements hook_update_projects_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_update_projects_alter(&\\$projects) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the list of projects before fetching data and comparing versions.",
			"Most modules will never need to implement this hook. It is for advanced",
			"interaction with the Update Manager module. The primary use-case for this",
			"hook is to add projects to the list; for example, to provide update status",
			"data on disabled modules and themes. A contributed module might want to hide",
			"projects from the list; for example, if there is a site-specific module that",
			"doesn't have any official releases, that module could remove itself from this",
			"list to avoid \"No available releases found\" warnings on the available updates",
			"report. In rare cases, a module might want to alter the data associated with",
			"a project already in the list."
		],
		"scope": "php"
	},
	"hook_update_status_alter": {
		"prefix": "hook_update_status_alter",
		"body": [
			"/**",
			" * Implements hook_update_status_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_update_status_alter(&\\$projects) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the information about available updates for projects."
		],
		"scope": "php"
	},
	"hook_verify_update_archive": {
		"prefix": "hook_verify_update_archive",
		"body": [
			"/**",
			" * Implements hook_verify_update_archive.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_verify_update_archive(\\$project, \\$archive_file, \\$directory) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Verify an archive after it has been downloaded and extracted."
		],
		"scope": "php"
	},
	"hook_user_cancel": {
		"prefix": "hook_user_cancel",
		"body": [
			"/**",
			" * Implements hook_user_cancel.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_user_cancel(\\$edit, UserInterface \\$account, \\$method) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on user account cancellations.",
			"This hook is invoked from user_cancel() before a user account is canceled.",
			"Depending on the account cancellation method, the module should either do",
			"nothing, unpublish content, or anonymize content. See user_cancel_methods()",
			"for the list of default account cancellation methods provided by User module.",
			"Modules may add further methods via hook_user_cancel_methods_alter().",
			"This hook is NOT invoked for the 'user_cancel_delete' account cancellation",
			"method. To react to that method, implement hook_ENTITY_TYPE_predelete() or",
			"hook_ENTITY_TYPE_delete() for user entities instead.",
			"Expensive operations should be added to the global account cancellation batch",
			"by using batch_set()."
		],
		"scope": "php"
	},
	"hook_user_cancel_methods_alter": {
		"prefix": "hook_user_cancel_methods_alter",
		"body": [
			"/**",
			" * Implements hook_user_cancel_methods_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_user_cancel_methods_alter(&\\$methods) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify account cancellation methods.",
			"By implementing this hook, modules are able to add, customize, or remove",
			"account cancellation methods. All defined methods are turned into radio",
			"button form elements by user_cancel_methods() after this hook is invoked.",
			"The following properties can be defined for each method:",
			"- title: The radio button's title.",
			"- description: (optional) A description to display on the confirmation form",
			"if the user is not allowed to select the account cancellation method. The",
			"description is NOT used for the radio button, but instead should provide",
			"additional explanation to the user seeking to cancel their account.",
			"- access: (optional) A boolean value indicating whether the user can access",
			"a method. If 'access' is defined, the method cannot be configured as",
			"default method."
		],
		"scope": "php"
	},
	"hook_user_format_name_alter": {
		"prefix": "hook_user_format_name_alter",
		"body": [
			"/**",
			" * Implements hook_user_format_name_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_user_format_name_alter(&\\$name, AccountInterface \\$account) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the username that is displayed for a user.",
			"Called by $account->getDisplayName() to allow modules to alter the username",
			"that is displayed. Can be used to ensure user privacy in situations where",
			"$account->getDisplayName() is too revealing. This hook is invoked both for",
			"user entities and the anonymous user session object."
		],
		"scope": "php"
	},
	"hook_user_login": {
		"prefix": "hook_user_login",
		"body": [
			"/**",
			" * Implements hook_user_login.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_user_login(UserInterface \\$account) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"The user just logged in."
		],
		"scope": "php"
	},
	"hook_user_logout": {
		"prefix": "hook_user_logout",
		"body": [
			"/**",
			" * Implements hook_user_logout.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_user_logout(AccountInterface \\$account) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"The user just logged out."
		],
		"scope": "php"
	},
	"hook_views_analyze": {
		"prefix": "hook_views_analyze",
		"body": [
			"/**",
			" * Implements hook_views_analyze.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_analyze(Drupal\\views\\ViewExecutable \\$view) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Analyze a view to provide warnings about its configuration."
		],
		"scope": "php"
	},
	"hook_views_data": {
		"prefix": "hook_views_data",
		"body": [
			"/**",
			" * Implements hook_views_data.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_data() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Describe data tables and fields (or the equivalent) to Views.",
			"The table and fields are processed in Views using various plugins. See",
			"the"
		],
		"scope": "php"
	},
	"hook_views_data_alter": {
		"prefix": "hook_views_data_alter",
		"body": [
			"/**",
			" * Implements hook_views_data_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_data_alter(array &\\$data) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the table and field information from hook_views_data()."
		],
		"scope": "php"
	},
	"hook_field_views_data": {
		"prefix": "hook_field_views_data",
		"body": [
			"/**",
			" * Implements hook_field_views_data.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_views_data(\\Drupal\\field\\FieldStorageConfigInterface \\$field_storage) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Override the default Views data for a Field API field.",
			"The field module's implementation of hook_views_data() invokes this for each",
			"field storage, in the module that defines the field type. It is not invoked",
			"in other modules.",
			"If no hook implementation exists, hook_views_data() falls back to",
			"views_field_default_views_data()."
		],
		"scope": "php"
	},
	"hook_field_views_data_alter": {
		"prefix": "hook_field_views_data_alter",
		"body": [
			"/**",
			" * Implements hook_field_views_data_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_views_data_alter(array &\\$data, \\Drupal\\field\\FieldStorageConfigInterface \\$field_storage) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the Views data for a single Field API field.",
			"This is called on all modules even if there is no hook_field_views_data()",
			"implementation for the field, and therefore may be used to alter the",
			"default data that views_field_default_views_data() supplies for the",
			"field storage."
		],
		"scope": "php"
	},
	"hook_field_views_data_views_data_alter": {
		"prefix": "hook_field_views_data_views_data_alter",
		"body": [
			"/**",
			" * Implements hook_field_views_data_views_data_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_field_views_data_views_data_alter(array &\\$data, \\Drupal\\field\\FieldStorageConfigInterface \\$field) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the Views data on a per field basis.",
			"The field module's implementation of hook_views_data_alter() invokes this for",
			"each field storage, in the module that defines the field type. It is not",
			"invoked in other modules.",
			"Unlike hook_field_views_data_alter(), this operates on the whole of the views",
			"data. This allows a field type to add data that concerns its fields in",
			"other tables, which would not yet be defined at the point when",
			"hook_field_views_data() and hook_field_views_data_alter() are invoked. For",
			"example, entityreference adds reverse relationships on the tables for the",
			"entities which are referenced by entityreference fields.",
			"(Note: this is weirdly named so as not to conflict with",
			"hook_field_views_data_alter().)"
		],
		"scope": "php"
	},
	"hook_views_query_substitutions": {
		"prefix": "hook_views_query_substitutions",
		"body": [
			"/**",
			" * Implements hook_views_query_substitutions.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_query_substitutions(ViewExecutable \\$view) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Replace special strings in the query before it is executed.",
			"The idea is that certain dynamic values can be placed in a query when it is",
			"built, and substituted at run-time, allowing the query to be cached and",
			"still work correctly when executed."
		],
		"scope": "php"
	},
	"hook_views_form_substitutions": {
		"prefix": "hook_views_form_substitutions",
		"body": [
			"/**",
			" * Implements hook_views_form_substitutions.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_form_substitutions() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Replace special strings when processing a view with form elements."
		],
		"scope": "php"
	},
	"hook_views_pre_view": {
		"prefix": "hook_views_pre_view",
		"body": [
			"/**",
			" * Implements hook_views_pre_view.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_pre_view(ViewExecutable \\$view, \\$display_id, array &\\$args) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter a view at the very beginning of Views processing.",
			"Output can be added to the view by setting $view->attachment_before",
			"and $view->attachment_after."
		],
		"scope": "php"
	},
	"hook_views_pre_build": {
		"prefix": "hook_views_pre_build",
		"body": [
			"/**",
			" * Implements hook_views_pre_build.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_pre_build(ViewExecutable \\$view) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on the view before the query is built, but after displays are attached.",
			"Output can be added to the view by setting $view->attachment_before",
			"and $view->attachment_after."
		],
		"scope": "php"
	},
	"hook_views_post_build": {
		"prefix": "hook_views_post_build",
		"body": [
			"/**",
			" * Implements hook_views_post_build.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_post_build(ViewExecutable \\$view) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on the view immediately after the query is built.",
			"Output can be added to the view by setting $view->attachment_before",
			"and $view->attachment_after."
		],
		"scope": "php"
	},
	"hook_views_pre_execute": {
		"prefix": "hook_views_pre_execute",
		"body": [
			"/**",
			" * Implements hook_views_pre_execute.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_pre_execute(ViewExecutable \\$view) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on the view after the query is built and just before it is executed.",
			"Output can be added to the view by setting $view->attachment_before",
			"and $view->attachment_after."
		],
		"scope": "php"
	},
	"hook_views_post_execute": {
		"prefix": "hook_views_post_execute",
		"body": [
			"/**",
			" * Implements hook_views_post_execute.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_post_execute(ViewExecutable \\$view) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on the view immediately after the query has been executed.",
			"At this point the query has been executed, but the preRender() phase has",
			"not yet happened for handlers.",
			"Output can be added to the view by setting $view->attachment_before",
			"and $view->attachment_after."
		],
		"scope": "php"
	},
	"hook_views_pre_render": {
		"prefix": "hook_views_pre_render",
		"body": [
			"/**",
			" * Implements hook_views_pre_render.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_pre_render(ViewExecutable \\$view) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Act on the view immediately before rendering it.",
			"At this point the query has been executed, and the preRender() phase has",
			"already happened for handlers, so all data should be available. This hook",
			"can be used by themes.",
			"Output can be added to the view by setting $view->attachment_before",
			"and $view->attachment_after."
		],
		"scope": "php"
	},
	"hook_views_post_render": {
		"prefix": "hook_views_post_render",
		"body": [
			"/**",
			" * Implements hook_views_post_render.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_post_render(ViewExecutable \\$view, &\\$output, CachePluginBase \\$cache) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Post-process any rendered data.",
			"This can be valuable to be able to cache a view and still have some level of",
			"dynamic output. In an ideal world, the actual output will include HTML",
			"comment-based tokens, and then the post process can replace those tokens.",
			"This hook can be used by themes.",
			"Example usage. If it is known that the view is a node view and that the",
			"primary field will be a nid, you can do something like this:"
		],
		"scope": "php"
	},
	"hook_views_query_alter": {
		"prefix": "hook_views_query_alter",
		"body": [
			"/**",
			" * Implements hook_views_query_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_query_alter(ViewExecutable \\$view, QueryPluginBase \\$query) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the query before it is executed."
		],
		"scope": "php"
	},
	"hook_views_preview_info_alter": {
		"prefix": "hook_views_preview_info_alter",
		"body": [
			"/**",
			" * Implements hook_views_preview_info_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_preview_info_alter(array &\\$rows, ViewExecutable \\$view) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the view preview information.",
			"The view preview information is optionally displayed when a view is",
			"previewed in the administrative UI. It includes query and performance",
			"statistics."
		],
		"scope": "php"
	},
	"hook_views_invalidate_cache": {
		"prefix": "hook_views_invalidate_cache",
		"body": [
			"/**",
			" * Implements hook_views_invalidate_cache.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_invalidate_cache() {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Allow modules to respond to the invalidation of the Views cache.",
			"This hook will fire whenever a view is enabled, disabled, created,",
			"updated, or deleted."
		],
		"scope": "php"
	},
	"hook_views_plugins_access_alter": {
		"prefix": "hook_views_plugins_access_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_access_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_access_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views access plugins.",
			"This hook may be used to modify plugin properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_argument_default_alter": {
		"prefix": "hook_views_plugins_argument_default_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_argument_default_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_argument_default_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views default argument plugins.",
			"This hook may be used to modify plugin properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_argument_validator_alter": {
		"prefix": "hook_views_plugins_argument_validator_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_argument_validator_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_argument_validator_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views argument validation plugins.",
			"This hook may be used to modify plugin properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_cache_alter": {
		"prefix": "hook_views_plugins_cache_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_cache_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_cache_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views cache plugins.",
			"This hook may be used to modify plugin properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_display_extenders_alter": {
		"prefix": "hook_views_plugins_display_extenders_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_display_extenders_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_display_extenders_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views display extender plugins.",
			"This hook may be used to modify plugin properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_display_alter": {
		"prefix": "hook_views_plugins_display_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_display_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_display_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views display plugins.",
			"This hook may be used to modify plugin properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_exposed_form_alter": {
		"prefix": "hook_views_plugins_exposed_form_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_exposed_form_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_exposed_form_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views exposed form plugins.",
			"This hook may be used to modify plugin properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_join_alter": {
		"prefix": "hook_views_plugins_join_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_join_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_join_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views join plugins.",
			"This hook may be used to modify plugin properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_pager_alter": {
		"prefix": "hook_views_plugins_pager_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_pager_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_pager_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views pager plugins.",
			"This hook may be used to modify plugin properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_query_alter": {
		"prefix": "hook_views_plugins_query_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_query_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_query_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views query plugins.",
			"This hook may be used to modify plugin properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_row_alter": {
		"prefix": "hook_views_plugins_row_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_row_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_row_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views row plugins.",
			"This hook may be used to modify plugin properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_style_alter": {
		"prefix": "hook_views_plugins_style_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_style_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_style_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views style plugins.",
			"This hook may be used to modify plugin properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_wizard_alter": {
		"prefix": "hook_views_plugins_wizard_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_wizard_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_wizard_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views wizard plugins.",
			"This hook may be used to modify plugin properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_area_alter": {
		"prefix": "hook_views_plugins_area_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_area_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_area_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views area handler plugins.",
			"This hook may be used to modify handler properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_argument_alter": {
		"prefix": "hook_views_plugins_argument_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_argument_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_argument_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views argument handler plugins.",
			"This hook may be used to modify handler properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_field_alter": {
		"prefix": "hook_views_plugins_field_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_field_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_field_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views field handler plugins.",
			"This hook may be used to modify handler properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_filter_alter": {
		"prefix": "hook_views_plugins_filter_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_filter_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_filter_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views filter handler plugins.",
			"This hook may be used to modify handler properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_relationship_alter": {
		"prefix": "hook_views_plugins_relationship_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_relationship_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_relationship_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views relationship handler plugins.",
			"This hook may be used to modify handler properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_plugins_sort_alter": {
		"prefix": "hook_views_plugins_sort_alter",
		"body": [
			"/**",
			" * Implements hook_views_plugins_sort_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_plugins_sort_alter(array &\\$plugins) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Modify the list of available views sort handler plugins.",
			"This hook may be used to modify handler properties after they have been",
			"specified by other modules."
		],
		"scope": "php"
	},
	"hook_views_ui_display_top_alter": {
		"prefix": "hook_views_ui_display_top_alter",
		"body": [
			"/**",
			" * Implements hook_views_ui_display_top_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_ui_display_top_alter(&\\$build, \\Drupal\\views_ui\\ViewUI \\$view, \\$display_id) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the top of the display for the Views UI.",
			"This hook can be implemented by themes."
		],
		"scope": "php"
	},
	"hook_views_ui_display_tab_alter": {
		"prefix": "hook_views_ui_display_tab_alter",
		"body": [
			"/**",
			" * Implements hook_views_ui_display_tab_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_ui_display_tab_alter(&\\$build, \\Drupal\\views_ui\\ViewUI \\$view, \\$display_id) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the renderable array representing the edit page for one display.",
			"This hook can be implemented by themes."
		],
		"scope": "php"
	},
	"hook_views_ui_display_top_links_alter": {
		"prefix": "hook_views_ui_display_top_links_alter",
		"body": [
			"/**",
			" * Implements hook_views_ui_display_top_links_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_views_ui_display_top_links_alter(array &\\$links, ViewExecutable \\$view, \\$display_id) {",
			"  $0",
			"}"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the links displayed at the top of the view edit form."
		],
		"scope": "php"
	},
	"hook_path_insert": {
		"prefix": "hook_path_insert",
		"body": [
			"/**",
			" * Implements hook_path_insert.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_path_insert(\\$path) {",
			"  $0",
			"}",
			"//deprecated"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to a path being inserted.",
			"",
			"deprecated in drupal:8.8.0 and is removed from drupal:9.0.0. Use",
			"hook_path_alias_insert() instead."
		],
		"scope": "php"
	},
	"hook_path_update": {
		"prefix": "hook_path_update",
		"body": [
			"/**",
			" * Implements hook_path_update.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_path_update(\\$path) {",
			"  $0",
			"}",
			"//deprecated"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to a path being updated.",
			"",
			"deprecated in drupal:8.8.0 and is removed from drupal:9.0.0. Use",
			"hook_path_alias_update() instead."
		],
		"scope": "php"
	},
	"hook_path_delete": {
		"prefix": "hook_path_delete",
		"body": [
			"/**",
			" * Implements hook_path_delete.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_path_delete(\\$path) {",
			"  $0",
			"}",
			"//deprecated"
		],
		"description": [
			"Drupal 8+",
			"",
			"Respond to a path being deleted.",
			"",
			"deprecated in drupal:8.8.0 and is removed from drupal:9.0.0. Use",
			"hook_path_alias_delete() instead."
		],
		"scope": "php"
	},
	"hook_rest_type_uri_alter": {
		"prefix": "hook_rest_type_uri_alter",
		"body": [
			"/**",
			" * Implements hook_rest_type_uri_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_rest_type_uri_alter(&\\$uri, \\$context = []) {",
			"  $0",
			"}",
			"//deprecated"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the REST type URI.",
			"",
			"deprecated in drupal:8.3.0 and is removed from drupal:9.0.0. Use",
			"hook_hal_type_uri_alter() instead. This exists solely for BC."
		],
		"scope": "php"
	},
	"hook_rest_relation_uri_alter": {
		"prefix": "hook_rest_relation_uri_alter",
		"body": [
			"/**",
			" * Implements hook_rest_relation_uri_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_rest_relation_uri_alter(&\\$uri, \\$context = []) {",
			"  $0",
			"}",
			"//deprecated"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the REST relation URI.",
			"",
			"deprecated in drupal:8.3.0 and is removed from drupal:9.0.0. Use",
			"hook_hal_relation_uri_alter() instead. This exists solely for BC."
		],
		"scope": "php"
	},
	"hook_simpletest_alter": {
		"prefix": "hook_simpletest_alter",
		"body": [
			"/**",
			" * Implements hook_simpletest_alter.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_simpletest_alter(&\\$groups) {",
			"  $0",
			"}",
			"//deprecated"
		],
		"description": [
			"Drupal 8+",
			"",
			"Alter the list of tests.",
			"This hook will not be invoked by the phpunit tool.",
			"",
			"deprecated in drupal:8.6.0 and is removed from drupal:9.0.0. Convert",
			"your test to a PHPUnit-based one and implement test listeners."
		],
		"scope": "php"
	},
	"hook_test_group_started": {
		"prefix": "hook_test_group_started",
		"body": [
			"/**",
			" * Implements hook_test_group_started.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_test_group_started() {",
			"  $0",
			"}",
			"//deprecated"
		],
		"description": [
			"Drupal 8+",
			"",
			"A test group has started.",
			"This hook is called just once at the beginning of a test group.",
			"This hook is only invoked by the Simpletest UI form runner. It will not be",
			"invoked by run-tests.sh or the phpunit tool.",
			"",
			"deprecated in drupal:8.8.0 and is removed from drupal:9.0.0. Convert your",
			"test to a PHPUnit-based one and implement test listeners."
		],
		"scope": "php"
	},
	"hook_test_group_finished": {
		"prefix": "hook_test_group_finished",
		"body": [
			"/**",
			" * Implements hook_test_group_finished.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_test_group_finished() {",
			"  $0",
			"}",
			"//deprecated"
		],
		"description": [
			"Drupal 8+",
			"",
			"A test group has finished.",
			"This hook is called just once at the end of a test group.",
			"This hook is only invoked by the Simpletest UI form runner. It will not be",
			"invoked by run-tests.sh or the phpunit tool.",
			"",
			"deprecated in drupal:8.8.0 and is removed from drupal:9.0.0. Convert your",
			"test to a PHPUnit-based one and implement test listeners."
		],
		"scope": "php"
	},
	"hook_test_finished": {
		"prefix": "hook_test_finished",
		"body": [
			"/**",
			" * Implements hook_test_finished.",
			" */",
			"function ${1:${TM_FILENAME_BASE:hook}}_test_finished(\\$results) {",
			"  $0",
			"}",
			"//deprecated"
		],
		"description": [
			"Drupal 8+",
			"",
			"An individual test has finished.",
			"This hook is called when an individual test has finished.",
			"This hook is only invoked by the Simpletest UI form runner. It will not be",
			"invoked by run-tests.sh or the phpunit tool.",
			"",
			"deprecated in drupal:8.8.0 and is removed from drupal:9.0.0. Convert your",
			"test to a PHPUnit-based one and implement test listeners."
		],
		"scope": "php"
	}
}