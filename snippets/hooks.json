{
  "hook_aggregator_fetcher_info_alter": {
    "prefix": "hook_aggregator_fetcher_info_alter",
    "body": [
      "/**",
      " * Implements hook_aggregator_fetcher_info_alter().",
      " */",
      "function hook_aggregator_fetcher_info_alter(array &$info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform alterations on the available fetchers.",
      "",
      "@param array[] $info",
      "  Array of fetcher plugins"
    ],
    "scope": "php"
  },
  "hook_aggregator_parser_info_alter": {
    "prefix": "hook_aggregator_parser_info_alter",
    "body": [
      "/**",
      " * Implements hook_aggregator_parser_info_alter().",
      " */",
      "function hook_aggregator_parser_info_alter(array &$info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform alterations on the available parsers.",
      "",
      "@param array[] $info",
      "  Array of parser plugins"
    ],
    "scope": "php"
  },
  "hook_aggregator_processor_info_alter": {
    "prefix": "hook_aggregator_processor_info_alter",
    "body": [
      "/**",
      " * Implements hook_aggregator_processor_info_alter().",
      " */",
      "function hook_aggregator_processor_info_alter(array &$info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform alterations on the available processors.",
      "",
      "@param array[] $info",
      "  Array of processor plugins"
    ],
    "scope": "php"
  },
  "hook_ajax_render_alter": {
    "prefix": "hook_ajax_render_alter",
    "body": [
      "/**",
      " * Implements hook_ajax_render_alter().",
      " */",
      "function hook_ajax_render_alter(array &$data) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the Ajax command data that is sent to the client.",
      "",
      "@param \\Drupal\\Core\\Ajax\\CommandInterface[] $data",
      "  An array of all the rendered commands that will be sent to the client."
    ],
    "scope": "php"
  },
  "hook_archiver_info_alter": {
    "prefix": "hook_archiver_info_alter",
    "body": [
      "/**",
      " * Implements hook_archiver_info_alter().",
      " */",
      "function hook_archiver_info_alter(&$info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter archiver information declared by other modules.",
      "",
      "See hook_archiver_info() for a description of archivers and the archiver",
      "information structure.",
      "",
      "@param $info",
      "  Archiver information to alter (return values from hook_archiver_info())."
    ],
    "scope": "php"
  },
  "hook_batch_alter": {
    "prefix": "hook_batch_alter",
    "body": [
      "/**",
      " * Implements hook_batch_alter().",
      " */",
      "function hook_batch_alter(&$batch) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter batch information before a batch is processed.",
      "",
      "Called by batch_process() to allow modules to alter a batch before it is",
      "processed.",
      "",
      "@param $batch",
      "  The associative array of batch information. See batch_set() for details on",
      "  what this could contain.",
      "",
      "@see batch_set()",
      "@see batch_process()",
      "",
      "@ingroup batch"
    ],
    "scope": "php"
  },
  "hook_block_access": {
    "prefix": "hook_block_access",
    "body": [
      "/**",
      " * Implements hook_block_access().",
      " */",
      "function hook_block_access(\\Drupal\\block\\Entity\\Block $block, $operation, \\Drupal\\Core\\Session\\AccountInterface $account) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Control access to a block instance.",
      "",
      "Modules may implement this hook if they want to have a say in whether or not",
      "a given user has access to perform a given operation on a block instance.",
      "",
      "@param \\Drupal\\block\\Entity\\Block $block",
      "  The block instance.",
      "@param string $operation",
      "  The operation to be performed; for instance, 'view', 'create', 'delete', or",
      "  'update'.",
      "@param \\Drupal\\Core\\Session\\AccountInterface $account",
      "  The user object to perform the access check operation on.",
      "",
      "@return \\Drupal\\Core\\Access\\AccessResultInterface",
      "  The access result. If all implementations of this hook return",
      "  AccessResultInterface objects whose value is !isAllowed() and",
      "  !isForbidden(), then default access rules from",
      "  \\Drupal\\block\\BlockAccessControlHandler::checkAccess() are used.",
      "",
      "@see \\Drupal\\Core\\Entity\\EntityAccessControlHandler::access()",
      "@see \\Drupal\\block\\BlockAccessControlHandler::checkAccess()",
      "@ingroup block_api"
    ],
    "scope": "php"
  },
  "hook_block_alter": {
    "prefix": "hook_block_alter",
    "body": [
      "/**",
      " * Implements hook_block_alter().",
      " */",
      "function hook_block_alter(&$definitions) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Allow modules to alter the block plugin definitions.",
      "",
      "@param array[] $definitions",
      "  The array of block definitions, keyed by plugin ID.",
      "",
      "@ingroup block_api"
    ],
    "scope": "php"
  },
  "hook_block_build_alter": {
    "prefix": "hook_block_build_alter",
    "body": [
      "/**",
      " * Implements hook_block_build_alter().",
      " */",
      "function hook_block_build_alter(array &$build, \\Drupal\\Core\\Block\\BlockPluginInterface $block) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the result of \\Drupal\\Core\\Block\\BlockBase::build().",
      "",
      "Unlike hook_block_view_alter(), this hook is called very early, before the",
      "block is being assembled. Therefore, it is early enough to alter the",
      "cacheability metadata (change #cache), or to explicitly placeholder the block",
      "(set #create_placeholder).",
      "",
      "In addition to hook_block_build_alter(), which is called for all blocks,",
      "there is hook_block_build_BASE_BLOCK_ID_alter(), which can be used to target",
      "a specific block or set of similar blocks.",
      "",
      "@param array &$build",
      "  A renderable array of data, only containing #cache.",
      "@param \\Drupal\\Core\\Block\\BlockPluginInterface $block",
      "  The block plugin instance.",
      "",
      "@see hook_block_build_BASE_BLOCK_ID_alter()",
      "@see entity_crud",
      "",
      "@ingroup block_api"
    ],
    "scope": "php"
  },
  "hook_block_build_BASE_BLOCK_ID_alter": {
    "prefix": "hook_block_build_BASE_BLOCK_ID_alter",
    "body": [
      "/**",
      " * Implements hook_block_build_BASE_BLOCK_ID_alter().",
      " */",
      "function hook_block_build_BASE_BLOCK_ID_alter(array &$build, \\Drupal\\Core\\Block\\BlockPluginInterface $block) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Provide a block plugin specific block_build alteration.",
      "",
      "In this hook name, BASE_BLOCK_ID refers to the block implementation's plugin",
      "id, regardless of whether the plugin supports derivatives. For example, for",
      "the \\Drupal\\system\\Plugin\\Block\\SystemPoweredByBlock block, this would be",
      "'system_powered_by_block' as per that class's annotation. And for the",
      "\\Drupal\\system\\Plugin\\Block\\SystemMenuBlock block, it would be",
      "'system_menu_block' as per that class's annotation, regardless of which menu",
      "the derived block is for.",
      "",
      "@param array $build",
      "  A renderable array of data, only containing #cache.",
      "@param \\Drupal\\Core\\Block\\BlockPluginInterface $block",
      "  The block plugin instance.",
      "",
      "@see hook_block_build_alter()",
      "@see entity_crud",
      "",
      "@ingroup block_api"
    ],
    "scope": "php"
  },
  "hook_block_view_alter": {
    "prefix": "hook_block_view_alter",
    "body": [
      "/**",
      " * Implements hook_block_view_alter().",
      " */",
      "function hook_block_view_alter(array &$build, \\Drupal\\Core\\Block\\BlockPluginInterface $block) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the result of \\Drupal\\Core\\Block\\BlockBase::build().",
      "",
      "This hook is called after the content has been assembled in a structured",
      "array and may be used for doing processing which requires that the complete",
      "block content structure has been built.",
      "",
      "If the module wishes to act on the rendered HTML of the block rather than",
      "the structured content array, it may use this hook to add a #post_render",
      "callback. Alternatively, it could also implement hook_preprocess_HOOK() for",
      "block.html.twig. See \\Drupal\\Core\\Render\\RendererInterface::render()",
      "documentation or the @link themeable Default theme implementations topic",
      "@endlink for details.",
      "",
      "In addition to hook_block_view_alter(), which is called for all blocks, there",
      "is hook_block_view_BASE_BLOCK_ID_alter(), which can be used to target a",
      "specific block or set of similar blocks.",
      "",
      "@param array &$build",
      "  A renderable array of data, as returned from the build() implementation of",
      "  the plugin that defined the block:",
      "  - #title: The default localized title of the block.",
      "@param \\Drupal\\Core\\Block\\BlockPluginInterface $block",
      "  The block plugin instance.",
      "",
      "@see hook_block_view_BASE_BLOCK_ID_alter()",
      "@see entity_crud",
      "",
      "@ingroup block_api"
    ],
    "scope": "php"
  },
  "hook_block_view_BASE_BLOCK_ID_alter": {
    "prefix": "hook_block_view_BASE_BLOCK_ID_alter",
    "body": [
      "/**",
      " * Implements hook_block_view_BASE_BLOCK_ID_alter().",
      " */",
      "function hook_block_view_BASE_BLOCK_ID_alter(array &$build, \\Drupal\\Core\\Block\\BlockPluginInterface $block) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Provide a block plugin specific block_view alteration.",
      "",
      "In this hook name, BASE_BLOCK_ID refers to the block implementation's plugin",
      "id, regardless of whether the plugin supports derivatives. For example, for",
      "the \\Drupal\\system\\Plugin\\Block\\SystemPoweredByBlock block, this would be",
      "'system_powered_by_block' as per that class's annotation. And for the",
      "\\Drupal\\system\\Plugin\\Block\\SystemMenuBlock block, it would be",
      "'system_menu_block' as per that class's annotation, regardless of which menu",
      "the derived block is for.",
      "",
      "@param array $build",
      "  A renderable array of data, as returned from the build() implementation of",
      "  the plugin that defined the block:",
      "  - #title: The default localized title of the block.",
      "@param \\Drupal\\Core\\Block\\BlockPluginInterface $block",
      "  The block plugin instance.",
      "",
      "@see hook_block_view_alter()",
      "@see entity_crud",
      "",
      "@ingroup block_api"
    ],
    "scope": "php"
  },
  "hook_cache_flush": {
    "prefix": "hook_cache_flush",
    "body": [
      "/**",
      " * Implements hook_cache_flush().",
      " */",
      "function hook_cache_flush() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Flush all persistent and static caches.",
      "",
      "This hook asks your module to clear all of its static caches,",
      "in order to ensure a clean environment for subsequently",
      "invoked data rebuilds.",
      "",
      "Do NOT use this hook for rebuilding information. Only use it to flush custom",
      "caches.",
      "",
      "Static caches using drupal_static() do not need to be reset manually.",
      "However, all other static variables that do not use drupal_static() must be",
      "manually reset.",
      "",
      "This hook is invoked by drupal_flush_all_caches(). It runs before module data",
      "is updated and before hook_rebuild().",
      "",
      "@see drupal_flush_all_caches()",
      "@see hook_rebuild()"
    ],
    "scope": "php"
  },
  "hook_ckeditor4to5upgrade_plugin_info_alter": {
    "prefix": "hook_ckeditor4to5upgrade_plugin_info_alter",
    "body": [
      "/**",
      " * Implements hook_ckeditor4to5upgrade_plugin_info_alter().",
      " */",
      "function hook_ckeditor4to5upgrade_plugin_info_alter(array &$plugin_definitions): void {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available CKEditor 4 to 5 Upgrade plugins.",
      "",
      "This hook may be used to modify plugin properties after they have been",
      "specified by other modules. For example, to override a default upgrade path.",
      "",
      "@param array $plugin_definitions",
      "  An array of all the existing plugin definitions, passed by reference.",
      "",
      "@see \\Drupal\\ckeditor5\\Plugin\\CKEditor4To5UpgradePluginManager"
    ],
    "scope": "php"
  },
  "hook_ckeditor5_plugin_info_alter": {
    "prefix": "hook_ckeditor5_plugin_info_alter",
    "body": [
      "/**",
      " * Implements hook_ckeditor5_plugin_info_alter().",
      " */",
      "function hook_ckeditor5_plugin_info_alter(array &$plugin_definitions): void {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available CKEditor 5 plugins.",
      "",
      "This hook may be used to modify plugin properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugin_definitions",
      "  An array of all the existing plugin definitions, passed by reference.",
      "",
      "@see \\Drupal\\ckeditor5\\Plugin\\CKEditor5PluginManager"
    ],
    "scope": "php"
  },
  "hook_ckeditor_css_alter": {
    "prefix": "hook_ckeditor_css_alter",
    "body": [
      "/**",
      " * Implements hook_ckeditor_css_alter().",
      " */",
      "function hook_ckeditor_css_alter(array &$css, Editor $editor) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of CSS files that will be added to a CKEditor instance.",
      "",
      "Modules may use this hook to provide their own custom CSS file without",
      "providing a CKEditor plugin. This list of CSS files is only used in the",
      "iframe versions of CKEditor.",
      "",
      "Front-end themes (and base themes) can easily specify CSS files to be used in",
      "iframe instances of CKEditor through an entry in their .info.yml file:",
      "",
      "@code",
      "ckeditor_stylesheets:",
      "  - css/ckeditor-iframe.css",
      "@endcode",
      "",
      "@param array &$css",
      "  An array of CSS files, passed by reference. This is a flat list of file",
      "  paths which can be either relative to the Drupal root or external URLs.",
      "@param $editor",
      "  The text editor object as returned by editor_load(), for which these files",
      "  are being loaded. Based on this information, it is possible to load the",
      "  corresponding text format object.",
      "",
      "@see _ckeditor_theme_css()"
    ],
    "scope": "php"
  },
  "hook_ckeditor_plugin_info_alter": {
    "prefix": "hook_ckeditor_plugin_info_alter",
    "body": [
      "/**",
      " * Implements hook_ckeditor_plugin_info_alter().",
      " */",
      "function hook_ckeditor_plugin_info_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available CKEditor plugins.",
      "",
      "This hook may be used to modify plugin properties after they have been",
      "specified by other modules.",
      "",
      "@param $plugins",
      "  An array of all the existing plugin definitions, passed by reference.",
      "",
      "@see \\Drupal\\ckeditor\\CKEditorPluginManager"
    ],
    "scope": "php"
  },
  "hook_comment_links_alter": {
    "prefix": "hook_comment_links_alter",
    "body": [
      "/**",
      " * Implements hook_comment_links_alter().",
      " */",
      "function hook_comment_links_alter(array &$links, CommentInterface $entity, array &$context) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the links of a comment.",
      "",
      "@param array &$links",
      "  A renderable array representing the comment links.",
      "@param \\Drupal\\comment\\CommentInterface $entity",
      "  The comment being rendered.",
      "@param array &$context",
      "  Various aspects of the context in which the comment links are going to be",
      "  displayed, with the following keys:",
      "  - 'view_mode': the view mode in which the comment is being viewed",
      "  - 'langcode': the language in which the comment is being viewed",
      "  - 'commented_entity': the entity to which the comment is attached",
      "",
      "@see \\Drupal\\comment\\CommentViewBuilder::renderLinks()",
      "@see \\Drupal\\comment\\CommentViewBuilder::buildLinks()"
    ],
    "scope": "php"
  },
  "hook_config_import_steps_alter": {
    "prefix": "hook_config_import_steps_alter",
    "body": [
      "/**",
      " * Implements hook_config_import_steps_alter().",
      " */",
      "function hook_config_import_steps_alter(&$sync_steps, \\Drupal\\Core\\Config\\ConfigImporter $config_importer) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the configuration synchronization steps.",
      "",
      "@param array $sync_steps",
      "  A one-dimensional array of \\Drupal\\Core\\Config\\ConfigImporter method names",
      "  or callables that are invoked to complete the import, in the order that",
      "  they will be processed. Each callable item defined in $sync_steps should",
      "  either be a global function or a public static method. The callable should",
      "  accept a $context array by reference. For example:",
      "  @code",
      "    function _additional_configuration_step(&$context) {",
      "      // Do stuff.",
      "      // If finished set $context['finished'] = 1.",
      "    }",
      "  @endcode",
      "  For more information on creating batches, see the",
      "  @link batch Batch operations @endlink documentation.",
      "",
      "@see callback_batch_operation()",
      "@see \\Drupal\\Core\\Config\\ConfigImporter::initialize()"
    ],
    "scope": "php"
  },
  "hook_config_schema_info_alter": {
    "prefix": "hook_config_schema_info_alter",
    "body": [
      "/**",
      " * Implements hook_config_schema_info_alter().",
      " */",
      "function hook_config_schema_info_alter(&$definitions) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter config typed data definitions.",
      "",
      "For example you can alter the typed data types representing each",
      "configuration schema type to change default labels or form element renderers",
      "used for configuration translation.",
      "",
      "If implementations of this hook add or remove configuration schema a",
      "ConfigSchemaAlterException will be thrown. Keep in mind that there are tools",
      "that may use the configuration schema for static analysis of configuration",
      "files, like the string extractor for the localization system. Such systems",
      "won't work with dynamically defined configuration schemas.",
      "",
      "For adding new data types use configuration schema YAML files instead.",
      "",
      "@param $definitions",
      "  Associative array of configuration type definitions keyed by schema type",
      "  names. The elements are themselves array with information about the type.",
      "",
      "@see \\Drupal\\Core\\Config\\TypedConfigManager",
      "@see \\Drupal\\Core\\Config\\Schema\\ConfigSchemaAlterException"
    ],
    "scope": "php"
  },
  "hook_config_translation_info": {
    "prefix": "hook_config_translation_info",
    "body": [
      "/**",
      " * Implements hook_config_translation_info().",
      " */",
      "function hook_config_translation_info(&$info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Introduce dynamic translation tabs for translation of configuration.",
      "",
      "This hook augments MODULE.config_translation.yml as well as",
      "THEME.config_translation.yml files to collect dynamic translation mapper",
      "information. If your information is static, just provide such a YAML file",
      "with your module containing the mapping.",
      "",
      "Note that while themes can provide THEME.config_translation.yml files this",
      "hook is not invoked for themes.",
      "",
      "@param array $info",
      "  An associative array of configuration mapper information. Use an entity",
      "  name for the key (for entity mapping) or a unique string for configuration",
      "  name list mapping. The values of the associative array are arrays",
      "  themselves in the same structure as the *.config_translation.yml files.",
      "",
      "@see hook_config_translation_info_alter()",
      "@see \\Drupal\\config_translation\\ConfigMapperManagerInterface",
      "@see \\Drupal\\config_translation\\Routing\\RouteSubscriber::routes()"
    ],
    "scope": "php"
  },
  "hook_config_translation_info_alter": {
    "prefix": "hook_config_translation_info_alter",
    "body": [
      "/**",
      " * Implements hook_config_translation_info_alter().",
      " */",
      "function hook_config_translation_info_alter(&$info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter existing translation tabs for translation of configuration.",
      "",
      "This hook is useful to extend existing configuration mappers with new",
      "configuration names, for example when altering existing forms with new",
      "settings stored elsewhere. This allows the translation experience to also",
      "reflect the compound form element in one screen.",
      "",
      "@param array $info",
      "  An associative array of discovered configuration mappers. Use an entity",
      "  name for the key (for entity mapping) or a unique string for configuration",
      "  name list mapping. The values of the associative array are arrays",
      "  themselves in the same structure as the *.config_translation.yml files.",
      "",
      "@see hook_translation_info()",
      "@see \\Drupal\\config_translation\\ConfigMapperManagerInterface"
    ],
    "scope": "php"
  },
  "hook_contextual_links_alter": {
    "prefix": "hook_contextual_links_alter",
    "body": [
      "/**",
      " * Implements hook_contextual_links_alter().",
      " */",
      "function hook_contextual_links_alter(array &$links, $group, array $route_parameters) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter contextual links before they are rendered.",
      "",
      "This hook is invoked by",
      "\\Drupal\\Core\\Menu\\ContextualLinkManager::getContextualLinkPluginsByGroup().",
      "The system-determined contextual links are passed in by reference. Additional",
      "links may be added and existing links can be altered.",
      "",
      "Each contextual link contains the following entries:",
      "- title: The localized title of the link.",
      "- route_name: The route name of the link.",
      "- route_parameters: The route parameters of the link.",
      "- localized_options: An array of URL options.",
      "- (optional) weight: The weight of the link, which is used to sort the links.",
      "",
      "",
      "@param array $links",
      "  An associative array containing contextual links for the given $group,",
      "  as described above. The array keys are used to build CSS class names for",
      "  contextual links and must therefore be unique for each set of contextual",
      "  links.",
      "@param string $group",
      "  The group of contextual links being rendered.",
      "@param array $route_parameters",
      "  The route parameters passed to each route_name of the contextual links.",
      "  For example:",
      "  @code",
      "  array('node' => $node->id())",
      "  @endcode",
      "",
      "@see \\Drupal\\Core\\Menu\\ContextualLinkManager",
      "",
      "@ingroup menu"
    ],
    "scope": "php"
  },
  "hook_contextual_links_plugins_alter": {
    "prefix": "hook_contextual_links_plugins_alter",
    "body": [
      "/**",
      " * Implements hook_contextual_links_plugins_alter().",
      " */",
      "function hook_contextual_links_plugins_alter(array &$contextual_links) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the plugin definition of contextual links.",
      "",
      "@param array $contextual_links",
      "  An array of contextual_links plugin definitions, keyed by contextual link",
      "  ID. Each entry contains the following keys:",
      "    - title: The displayed title of the link",
      "    - route_name: The route_name of the contextual link to be displayed",
      "    - group: The group under which the contextual links should be added to.",
      "      Possible values are e.g. 'node' or 'menu'.",
      "",
      "@see \\Drupal\\Core\\Menu\\ContextualLinkManager",
      "",
      "@ingroup menu"
    ],
    "scope": "php"
  },
  "hook_contextual_links_view_alter": {
    "prefix": "hook_contextual_links_view_alter",
    "body": [
      "/**",
      " * Implements hook_contextual_links_view_alter().",
      " */",
      "function hook_contextual_links_view_alter(&$element, $items) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter a contextual links element before it is rendered.",
      "",
      "This hook is invoked by contextual_pre_render_links(). The renderable array",
      "of #type 'contextual_links', containing the entire contextual links data that",
      "is passed in by reference. Further links may be added or existing links can",
      "be altered.",
      "",
      "@param $element",
      "  A renderable array representing the contextual links.",
      "@param $items",
      "  An associative array containing the original contextual link items, as",
      "  generated by",
      "  \\Drupal\\Core\\Menu\\ContextualLinkManagerInterface::getContextualLinksArrayByGroup(),",
      "  which were used to build $element['#links'].",
      "",
      "@see hook_contextual_links_alter()",
      "@see hook_contextual_links_plugins_alter()",
      "@see contextual_pre_render_links()"
    ],
    "scope": "php"
  },
  "hook_countries_alter": {
    "prefix": "hook_countries_alter",
    "body": [
      "/**",
      " * Implements hook_countries_alter().",
      " */",
      "function hook_countries_alter(&$countries) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the default country list.",
      "",
      "@param $countries",
      "  The associative array of countries keyed by two-letter country code.",
      "",
      "@see \\Drupal\\Core\\Locale\\CountryManager::getList()"
    ],
    "scope": "php"
  },
  "hook_cron": {
    "prefix": "hook_cron",
    "body": [
      "/**",
      " * Implements hook_cron().",
      " */",
      "function hook_cron() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform periodic actions.",
      "",
      "Modules that require some commands to be executed periodically can",
      "implement hook_cron(). The engine will then call the hook whenever a cron",
      "run happens, as defined by the administrator. Typical tasks managed by",
      "hook_cron() are database maintenance, backups, recalculation of settings",
      "or parameters, automated mailing, and retrieving remote data.",
      "",
      "Short-running or non-resource-intensive tasks can be executed directly in",
      "the hook_cron() implementation.",
      "",
      "Long-running tasks and tasks that could time out, such as retrieving remote",
      "data, sending email, and intensive file tasks, should use the queue API",
      "instead of executing the tasks directly. To do this, first define one or",
      "more queues via a \\Drupal\\Core\\Annotation\\QueueWorker plugin. Then, add items",
      "that need to be processed to the defined queues."
    ],
    "scope": "php"
  },
  "hook_css_alter": {
    "prefix": "hook_css_alter",
    "body": [
      "/**",
      " * Implements hook_css_alter().",
      " */",
      "function hook_css_alter(&$css, \\Drupal\\Core\\Asset\\AttachedAssetsInterface $assets) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter CSS files before they are output on the page.",
      "",
      "@param $css",
      "  An array of all CSS items (files and inline CSS) being requested on the page.",
      "@param \\Drupal\\Core\\Asset\\AttachedAssetsInterface $assets",
      "  The assets attached to the current response.",
      "",
      "@see Drupal\\Core\\Asset\\LibraryResolverInterface::getCssAssets()"
    ],
    "scope": "php"
  },
  "hook_data_type_info_alter": {
    "prefix": "hook_data_type_info_alter",
    "body": [
      "/**",
      " * Implements hook_data_type_info_alter().",
      " */",
      "function hook_data_type_info_alter(&$data_types) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter available data types for typed data wrappers.",
      "",
      "@param array $data_types",
      "  An array of data type information.",
      "",
      "@see hook_data_type_info()"
    ],
    "scope": "php"
  },
  "hook_display_variant_plugin_alter": {
    "prefix": "hook_display_variant_plugin_alter",
    "body": [
      "/**",
      " * Implements hook_display_variant_plugin_alter().",
      " */",
      "function hook_display_variant_plugin_alter(array &$definitions) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter display variant plugin definitions.",
      "",
      "@param array $definitions",
      "  The array of display variant definitions, keyed by plugin ID.",
      "",
      "@see \\Drupal\\Core\\Display\\VariantManager",
      "@see \\Drupal\\Core\\Display\\Annotation\\DisplayVariant"
    ],
    "scope": "php"
  },
  "hook_editor_info_alter": {
    "prefix": "hook_editor_info_alter",
    "body": [
      "/**",
      " * Implements hook_editor_info_alter().",
      " */",
      "function hook_editor_info_alter(array &$editors) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Performs alterations on text editor definitions.",
      "",
      "@param array $editors",
      "  An array of metadata of text editors, as collected by the plugin annotation",
      "  discovery mechanism.",
      "",
      "@see \\Drupal\\editor\\Plugin\\EditorBase"
    ],
    "scope": "php"
  },
  "hook_editor_js_settings_alter": {
    "prefix": "hook_editor_js_settings_alter",
    "body": [
      "/**",
      " * Implements hook_editor_js_settings_alter().",
      " */",
      "function hook_editor_js_settings_alter(array &$settings) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modifies JavaScript settings that are added for text editors.",
      "",
      "@param array $settings",
      "  All the settings that will be added to the page for the text formats to",
      "  which a user has access."
    ],
    "scope": "php"
  },
  "hook_editor_xss_filter_alter": {
    "prefix": "hook_editor_xss_filter_alter",
    "body": [
      "/**",
      " * Implements hook_editor_xss_filter_alter().",
      " */",
      "function hook_editor_xss_filter_alter(&$editor_xss_filter_class, FilterFormatInterface $format, FilterFormatInterface $original_format = NULL) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modifies the text editor XSS filter that will used for the given text format.",
      "",
      "Is only called when an EditorXssFilter will effectively be used; this hook",
      "does not allow one to alter that decision.",
      "",
      "@param string &$editor_xss_filter_class",
      "  The text editor XSS filter class that will be used.",
      "@param \\Drupal\\filter\\FilterFormatInterface $format",
      "  The text format configuration entity. Provides context based upon which",
      "  one may want to adjust the filtering.",
      "@param \\Drupal\\filter\\FilterFormatInterface|null $original_format",
      "  (optional) The original text format configuration entity (when switching",
      "  text formats/editors). Also provides context based upon which one may want",
      "  to adjust the filtering.",
      "",
      "@see \\Drupal\\editor\\EditorXssFilterInterface"
    ],
    "scope": "php"
  },
  "hook_element_info_alter": {
    "prefix": "hook_element_info_alter",
    "body": [
      "/**",
      " * Implements hook_element_info_alter().",
      " */",
      "function hook_element_info_alter(array &$info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the element type information returned from modules.",
      "",
      "A module may implement this hook in order to alter the element type defaults",
      "defined by a module.",
      "",
      "@param array $info",
      "  An associative array with structure identical to that of the return value",
      "  of \\Drupal\\Core\\Render\\ElementInfoManagerInterface::getInfo().",
      "",
      "@see \\Drupal\\Core\\Render\\ElementInfoManager",
      "@see \\Drupal\\Core\\Render\\Element\\ElementInterface"
    ],
    "scope": "php"
  },
  "hook_element_plugin_alter": {
    "prefix": "hook_element_plugin_alter",
    "body": [
      "/**",
      " * Implements hook_element_plugin_alter().",
      " */",
      "function hook_element_plugin_alter(array &$definitions) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter Element plugin definitions.",
      "",
      "Whenever possible, hook_element_info_alter() should be used to alter the",
      "default properties of an element type. Use this hook only when the plugin",
      "definition itself needs to be altered.",
      "",
      "@param array $definitions",
      "  An array of Element plugin definitions.",
      "",
      "@see \\Drupal\\Core\\Render\\ElementInfoManager",
      "@see \\Drupal\\Core\\Render\\Element\\ElementInterface"
    ],
    "scope": "php"
  },
  "hook_entity_access": {
    "prefix": "hook_entity_access",
    "body": [
      "/**",
      " * Implements hook_entity_access().",
      " */",
      "function hook_entity_access(\\Drupal\\Core\\Entity\\EntityInterface $entity, $operation, \\Drupal\\Core\\Session\\AccountInterface $account) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Control entity operation access.",
      "",
      "Note that this hook is not called for listings (e.g., from entity queries",
      "and Views). For nodes, see @link node_access Node access rights @endlink for",
      "a full explanation. For other entity types, see hook_query_TAG_alter().",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity to check access to.",
      "@param string $operation",
      "  The operation that is to be performed on $entity. Usually one of:",
      "  - \"view\"",
      "  - \"update\"",
      "  - \"delete\"",
      "@param \\Drupal\\Core\\Session\\AccountInterface $account",
      "  The account trying to access the entity.",
      "",
      "@return \\Drupal\\Core\\Access\\AccessResultInterface",
      "  The access result. The final result is calculated by using",
      "  \\Drupal\\Core\\Access\\AccessResultInterface::orIf() on the result of every",
      "  hook_entity_access() and hook_ENTITY_TYPE_access() implementation, and the",
      "  result of the entity-specific checkAccess() method in the entity access",
      "  control handler. Be careful when writing generalized access checks shared",
      "  between routing and entity checks: routing uses the andIf() operator. So",
      "  returning an isNeutral() does not determine entity access at all but it",
      "  always ends up denying access while routing.",
      "",
      "@see \\Drupal\\Core\\Entity\\EntityAccessControlHandler",
      "@see hook_entity_create_access()",
      "@see hook_ENTITY_TYPE_access()",
      "@see hook_query_TAG_alter()",
      "",
      "@ingroup entity_api"
    ],
    "scope": "php"
  },
  "hook_entity_base_field_info": {
    "prefix": "hook_entity_base_field_info",
    "body": [
      "/**",
      " * Implements hook_entity_base_field_info().",
      " */",
      "function hook_entity_base_field_info(\\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Provides custom base field definitions for a content entity type.",
      "",
      "Field (storage) definitions returned by this hook must run through the",
      "regular field storage life-cycle operations: they need to be properly",
      "installed, updated, and uninstalled. This would typically be done through the",
      "Entity Update API provided by the entity definition update manager.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type",
      "  The entity type definition.",
      "",
      "@return \\Drupal\\Core\\Field\\FieldDefinitionInterface[]",
      "  An array of field definitions, keyed by field name.",
      "",
      "@see hook_entity_base_field_info_alter()",
      "@see hook_entity_bundle_field_info()",
      "@see hook_entity_bundle_field_info_alter()",
      "@see \\Drupal\\Core\\Field\\FieldDefinitionInterface",
      "@see \\Drupal\\Core\\Entity\\EntityFieldManagerInterface::getFieldDefinitions()",
      "@see \\Drupal\\Core\\Entity\\EntityDefinitionUpdateManagerInterface",
      "@see https://www.drupal.org/node/3034742"
    ],
    "scope": "php"
  },
  "hook_entity_base_field_info_alter": {
    "prefix": "hook_entity_base_field_info_alter",
    "body": [
      "/**",
      " * Implements hook_entity_base_field_info_alter().",
      " */",
      "function hook_entity_base_field_info_alter(&$fields, \\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter base field definitions for a content entity type.",
      "",
      "@param \\Drupal\\Core\\Field\\FieldDefinitionInterface[] $fields",
      "  The array of base field definitions for the entity type.",
      "@param \\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type",
      "  The entity type definition.",
      "",
      "@see hook_entity_base_field_info()",
      "@see hook_entity_bundle_field_info()",
      "@see hook_entity_bundle_field_info_alter()",
      "",
      "@todo WARNING: This hook will be changed in",
      "https://www.drupal.org/node/2346329."
    ],
    "scope": "php"
  },
  "hook_entity_build_defaults_alter": {
    "prefix": "hook_entity_build_defaults_alter",
    "body": [
      "/**",
      " * Implements hook_entity_build_defaults_alter().",
      " */",
      "function hook_entity_build_defaults_alter(array &$build, \\Drupal\\Core\\Entity\\EntityInterface $entity, $view_mode) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter entity renderable values before cache checking during rendering.",
      "",
      "The values in the #cache key of the renderable array are used to determine if",
      "a cache entry exists for the entity's rendered output. Ideally only values",
      "that pertain to caching should be altered in this hook.",
      "",
      "@param array &$build",
      "  A renderable array containing the entity's caching and view mode values.",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity that is being viewed.",
      "@param string $view_mode",
      "  The view_mode that is to be used to display the entity.",
      "",
      "@see \\Drupal\\Core\\Render\\RendererInterface::render()",
      "@see \\Drupal\\Core\\Entity\\EntityViewBuilder",
      "@see hook_ENTITY_TYPE_build_defaults_alter()",
      "",
      "@ingroup entity_crud"
    ],
    "scope": "php"
  },
  "hook_entity_bundle_create": {
    "prefix": "hook_entity_bundle_create",
    "body": [
      "/**",
      " * Implements hook_entity_bundle_create().",
      " */",
      "function hook_entity_bundle_create($entity_type_id, $bundle) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on entity_bundle_create().",
      "",
      "This hook is invoked after the operation has been performed.",
      "",
      "@param string $entity_type_id",
      "  The type of $entity; e.g. 'node' or 'user'.",
      "@param string $bundle",
      "  The name of the bundle.",
      "",
      "@see entity_crud"
    ],
    "scope": "php"
  },
  "hook_entity_bundle_delete": {
    "prefix": "hook_entity_bundle_delete",
    "body": [
      "/**",
      " * Implements hook_entity_bundle_delete().",
      " */",
      "function hook_entity_bundle_delete($entity_type_id, $bundle) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on entity_bundle_delete().",
      "",
      "This hook is invoked after the operation has been performed.",
      "",
      "@param string $entity_type_id",
      "  The type of entity; for example, 'node' or 'user'.",
      "@param string $bundle",
      "  The bundle that was just deleted.",
      "",
      "@ingroup entity_crud"
    ],
    "scope": "php"
  },
  "hook_entity_bundle_field_info": {
    "prefix": "hook_entity_bundle_field_info",
    "body": [
      "/**",
      " * Implements hook_entity_bundle_field_info().",
      " */",
      "function hook_entity_bundle_field_info(\\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Provides field definitions for a specific bundle within an entity type.",
      "",
      "Bundle fields either have to override an existing base field, or need to",
      "provide a field storage definition via hook_entity_field_storage_info()",
      "unless they are computed.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type",
      "  The entity type definition.",
      "@param string $bundle",
      "  The bundle.",
      "@param \\Drupal\\Core\\Field\\FieldDefinitionInterface[] $base_field_definitions",
      "  The list of base field definitions for the entity type.",
      "",
      "@return \\Drupal\\Core\\Field\\FieldDefinitionInterface[]",
      "  An array of bundle field definitions, keyed by field name.",
      "",
      "@see hook_entity_base_field_info()",
      "@see hook_entity_base_field_info_alter()",
      "@see hook_entity_field_storage_info()",
      "@see hook_entity_field_storage_info_alter()",
      "@see hook_entity_bundle_field_info_alter()",
      "@see \\Drupal\\Core\\Field\\FieldDefinitionInterface",
      "@see \\Drupal\\Core\\Field\\FieldDefinition",
      "@see \\Drupal\\Core\\Entity\\EntityFieldManagerInterface::getFieldDefinitions()",
      "",
      "@todo WARNING: This hook will be changed in",
      "https://www.drupal.org/node/2346347."
    ],
    "scope": "php"
  },
  "hook_entity_bundle_field_info_alter": {
    "prefix": "hook_entity_bundle_field_info_alter",
    "body": [
      "/**",
      " * Implements hook_entity_bundle_field_info_alter().",
      " */",
      "function hook_entity_bundle_field_info_alter(&$fields, \\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type, $bundle) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter bundle field definitions.",
      "",
      "@param \\Drupal\\Core\\Field\\FieldDefinitionInterface[] $fields",
      "  The array of bundle field definitions.",
      "@param \\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type",
      "  The entity type definition.",
      "@param string $bundle",
      "  The bundle.",
      "",
      "@see hook_entity_base_field_info()",
      "@see hook_entity_base_field_info_alter()",
      "@see hook_entity_bundle_field_info()",
      "",
      "@todo WARNING: This hook will be changed in",
      "https://www.drupal.org/node/2346347."
    ],
    "scope": "php"
  },
  "hook_entity_bundle_info": {
    "prefix": "hook_entity_bundle_info",
    "body": [
      "/**",
      " * Implements hook_entity_bundle_info().",
      " */",
      "function hook_entity_bundle_info() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Describe the bundles for entity types.",
      "",
      "@return array",
      "  An associative array of all entity bundles, keyed by the entity",
      "  type name, and then the bundle name, with the following keys:",
      "  - label: The human-readable name of the bundle.",
      "  - uri_callback: (optional) The same as the 'uri_callback' key defined for",
      "    the entity type in the EntityTypeManager, but for the bundle only. When",
      "    determining the URI of an entity, if a 'uri_callback' is defined for both",
      "    the entity type and the bundle, the one for the bundle is used.",
      "  - translatable: (optional) A boolean value specifying whether this bundle",
      "    has translation support enabled. Defaults to FALSE.",
      "  - class: (optional) The fully qualified class name for this bundle. If",
      "    omitted, the class from the entity type definition will be used. Multiple",
      "    bundles must not use the same subclass. If a class is reused by multiple",
      "    bundles, an \\Drupal\\Core\\Entity\\Exception\\AmbiguousBundleClassException",
      "    will be thrown.",
      "",
      "@see \\Drupal\\Core\\Entity\\EntityTypeBundleInfo::getBundleInfo()",
      "@see hook_entity_bundle_info_alter()"
    ],
    "scope": "php"
  },
  "hook_entity_bundle_info_alter": {
    "prefix": "hook_entity_bundle_info_alter",
    "body": [
      "/**",
      " * Implements hook_entity_bundle_info_alter().",
      " */",
      "function hook_entity_bundle_info_alter(&$bundles) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the bundles for entity types.",
      "",
      "@param array $bundles",
      "  An array of bundles, keyed first by entity type, then by bundle name.",
      "",
      "@see Drupal\\Core\\Entity\\EntityTypeBundleInfo::getBundleInfo()",
      "@see hook_entity_bundle_info()"
    ],
    "scope": "php"
  },
  "hook_entity_create": {
    "prefix": "hook_entity_create",
    "body": [
      "/**",
      " * Implements hook_entity_create().",
      " */",
      "function hook_entity_create(\\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Acts when creating a new entity.",
      "",
      "This hook runs after a new entity object has just been instantiated.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object.",
      "",
      "@ingroup entity_crud",
      "@see hook_ENTITY_TYPE_create()"
    ],
    "scope": "php"
  },
  "hook_entity_create_access": {
    "prefix": "hook_entity_create_access",
    "body": [
      "/**",
      " * Implements hook_entity_create_access().",
      " */",
      "function hook_entity_create_access(\\Drupal\\Core\\Session\\AccountInterface $account, array $context, $entity_bundle) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Control entity create access.",
      "",
      "@param \\Drupal\\Core\\Session\\AccountInterface $account",
      "  The account trying to access the entity.",
      "@param array $context",
      "  An associative array of additional context values. By default it contains",
      "  language and the entity type ID:",
      "  - entity_type_id - the entity type ID.",
      "  - langcode - the current language code.",
      "@param string $entity_bundle",
      "  The entity bundle name.",
      "",
      "@return \\Drupal\\Core\\Access\\AccessResultInterface",
      "  The access result.",
      "",
      "@see \\Drupal\\Core\\Entity\\EntityAccessControlHandler",
      "@see hook_entity_access()",
      "@see hook_ENTITY_TYPE_create_access()",
      "",
      "@ingroup entity_api"
    ],
    "scope": "php"
  },
  "hook_entity_delete": {
    "prefix": "hook_entity_delete",
    "body": [
      "/**",
      " * Implements hook_entity_delete().",
      " */",
      "function hook_entity_delete(\\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to entity deletion.",
      "",
      "This hook runs once the entity has been deleted from the storage.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object for the entity that has been deleted.",
      "",
      "@ingroup entity_crud",
      "@see hook_ENTITY_TYPE_delete()"
    ],
    "scope": "php"
  },
  "hook_entity_display_build_alter": {
    "prefix": "hook_entity_display_build_alter",
    "body": [
      "/**",
      " * Implements hook_entity_display_build_alter().",
      " */",
      "function hook_entity_display_build_alter(&$build, $context) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the render array generated by an EntityDisplay for an entity.",
      "",
      "@param array $build",
      "  The renderable array generated by the EntityDisplay.",
      "@param array $context",
      "  An associative array containing:",
      "  - entity: The entity being rendered.",
      "  - view_mode: The view mode; for example, 'full' or 'teaser'.",
      "  - display: The EntityDisplay holding the display options.",
      "",
      "@ingroup entity_crud"
    ],
    "scope": "php"
  },
  "hook_entity_extra_field_info": {
    "prefix": "hook_entity_extra_field_info",
    "body": [
      "/**",
      " * Implements hook_entity_extra_field_info().",
      " */",
      "function hook_entity_extra_field_info() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Exposes \"pseudo-field\" components on content entities.",
      "",
      "Field UI's \"Manage fields\" and \"Manage display\" pages let users re-order",
      "fields, but also non-field components. For nodes, these include elements",
      "exposed by modules through hook_form_alter(), for instance.",
      "",
      "Content entities or modules that want to have their components supported",
      "should expose them using this hook. The user-defined settings (weight,",
      "visible) are automatically applied when entities or entity forms are",
      "rendered.",
      "",
      "@see hook_entity_extra_field_info_alter()",
      "",
      "@return array",
      "  The array structure is identical to that of the return value of",
      "  \\Drupal\\Core\\Entity\\EntityFieldManagerInterface::getExtraFields()."
    ],
    "scope": "php"
  },
  "hook_entity_extra_field_info_alter": {
    "prefix": "hook_entity_extra_field_info_alter",
    "body": [
      "/**",
      " * Implements hook_entity_extra_field_info_alter().",
      " */",
      "function hook_entity_extra_field_info_alter(&$info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter \"pseudo-field\" components on content entities.",
      "",
      "@param array $info",
      "  The array structure is identical to that of the return value of",
      "  \\Drupal\\Core\\Entity\\EntityFieldManagerInterface::getExtraFields().",
      "",
      "@see hook_entity_extra_field_info()"
    ],
    "scope": "php"
  },
  "hook_entity_field_access": {
    "prefix": "hook_entity_field_access",
    "body": [
      "/**",
      " * Implements hook_entity_field_access().",
      " */",
      "function hook_entity_field_access($operation, \\Drupal\\Core\\Field\\FieldDefinitionInterface $field_definition, \\Drupal\\Core\\Session\\AccountInterface $account, \\Drupal\\Core\\Field\\FieldItemListInterface $items = NULL) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Control access to fields.",
      "",
      "This hook is invoked from",
      "\\Drupal\\Core\\Entity\\EntityAccessControlHandler::fieldAccess() to let modules",
      "grant or deny operations on fields.",
      "",
      "@param string $operation",
      "  The operation to be performed. See",
      "  \\Drupal\\Core\\Entity\\EntityAccessControlHandlerInterface::fieldAccess()",
      "  for possible values.",
      "@param \\Drupal\\Core\\Field\\FieldDefinitionInterface $field_definition",
      "  The field definition.",
      "@param \\Drupal\\Core\\Session\\AccountInterface $account",
      "  The user account to check.",
      "@param \\Drupal\\Core\\Field\\FieldItemListInterface $items",
      "  (optional) The entity field object for which to check access, or NULL if",
      "  access is checked for the field definition, without any specific value",
      "  available. Defaults to NULL.",
      "",
      "@return \\Drupal\\Core\\Access\\AccessResultInterface",
      "  The access result.",
      "",
      "@see \\Drupal\\Core\\Entity\\EntityAccessControlHandlerInterface::fieldAccess()"
    ],
    "scope": "php"
  },
  "hook_entity_field_access_alter": {
    "prefix": "hook_entity_field_access_alter",
    "body": [
      "/**",
      " * Implements hook_entity_field_access_alter().",
      " */",
      "function hook_entity_field_access_alter(array &$grants, array $context) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the default access behavior for a given field.",
      "",
      "Use this hook to override access grants from another module. Note that the",
      "original default access flag is masked under the ':default' key.",
      "",
      "@param \\Drupal\\Core\\Access\\AccessResultInterface[] $grants",
      "  An array of grants gathered by hook_entity_field_access(). The array is",
      "  keyed by the module that defines the field's access control; the values are",
      "  grant responses for each module (\\Drupal\\Core\\Access\\AccessResult).",
      "@param array $context",
      "  Context array on the performed operation with the following keys:",
      "  - operation: The operation to be performed (string).",
      "  - field_definition: The field definition object",
      "    (\\Drupal\\Core\\Field\\FieldDefinitionInterface)",
      "  - account: The user account to check access for",
      "    (Drupal\\user\\Entity\\User).",
      "  - items: (optional) The entity field items",
      "    (\\Drupal\\Core\\Field\\FieldItemListInterface)."
    ],
    "scope": "php"
  },
  "hook_entity_field_storage_info": {
    "prefix": "hook_entity_field_storage_info",
    "body": [
      "/**",
      " * Implements hook_entity_field_storage_info().",
      " */",
      "function hook_entity_field_storage_info(\\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Provides field storage definitions for a content entity type.",
      "",
      "Field storage definitions returned by this hook must run through the regular",
      "field storage life-cycle operations: they need to be properly installed,",
      "updated, and uninstalled. This would typically be done through the Entity",
      "Update API provided by the entity definition update manager.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type",
      "  The entity type definition.",
      "",
      "@return \\Drupal\\Core\\Field\\FieldStorageDefinitionInterface[]",
      "  An array of field storage definitions, keyed by field name.",
      "",
      "@see hook_entity_field_storage_info_alter()",
      "@see \\Drupal\\Core\\Field\\FieldStorageDefinitionInterface",
      "@see \\Drupal\\Core\\Entity\\EntityFieldManagerInterface::getFieldStorageDefinitions()",
      "@see \\Drupal\\Core\\Entity\\EntityDefinitionUpdateManagerInterface",
      "@see https://www.drupal.org/node/3034742"
    ],
    "scope": "php"
  },
  "hook_entity_field_storage_info_alter": {
    "prefix": "hook_entity_field_storage_info_alter",
    "body": [
      "/**",
      " * Implements hook_entity_field_storage_info_alter().",
      " */",
      "function hook_entity_field_storage_info_alter(&$fields, \\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter field storage definitions for a content entity type.",
      "",
      "@param \\Drupal\\Core\\Field\\FieldStorageDefinitionInterface[] $fields",
      "  The array of field storage definitions for the entity type.",
      "@param \\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type",
      "  The entity type definition.",
      "",
      "@see hook_entity_field_storage_info()"
    ],
    "scope": "php"
  },
  "hook_entity_field_values_init": {
    "prefix": "hook_entity_field_values_init",
    "body": [
      "/**",
      " * Implements hook_entity_field_values_init().",
      " */",
      "function hook_entity_field_values_init(\\Drupal\\Core\\Entity\\FieldableEntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Acts when initializing a fieldable entity object.",
      "",
      "This hook runs after a new entity object or a new entity translation object",
      "has just been instantiated. It can be used to set initial values, e.g. to",
      "provide defaults.",
      "",
      "@param \\Drupal\\Core\\Entity\\FieldableEntityInterface $entity",
      "  The entity object.",
      "",
      "@ingroup entity_crud",
      "@see hook_ENTITY_TYPE_field_values_init()"
    ],
    "scope": "php"
  },
  "hook_entity_form_display_alter": {
    "prefix": "hook_entity_form_display_alter",
    "body": [
      "/**",
      " * Implements hook_entity_form_display_alter().",
      " */",
      "function hook_entity_form_display_alter(\\Drupal\\Core\\Entity\\Display\\EntityFormDisplayInterface $form_display, array $context) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the settings used for displaying an entity form.",
      "",
      "@param \\Drupal\\Core\\Entity\\Display\\EntityFormDisplayInterface $form_display",
      "  The entity_form_display object that will be used to display the entity form",
      "  components.",
      "@param array $context",
      "  An associative array containing:",
      "  - entity_type: The entity type, e.g., 'node' or 'user'.",
      "  - bundle: The bundle, e.g., 'page' or 'article'.",
      "  - form_mode: The form mode; e.g., 'default', 'profile', 'register', etc.",
      "",
      "@ingroup entity_crud"
    ],
    "scope": "php"
  },
  "hook_entity_form_mode_alter": {
    "prefix": "hook_entity_form_mode_alter",
    "body": [
      "/**",
      " * Implements hook_entity_form_mode_alter().",
      " */",
      "function hook_entity_form_mode_alter(&$form_mode, \\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Change the form mode used to build an entity form.",
      "",
      "@param string $form_mode",
      "  The form_mode that is to be used to build the entity form.",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity for which the form is being built.",
      "",
      "@ingroup entity_crud"
    ],
    "scope": "php"
  },
  "hook_entity_insert": {
    "prefix": "hook_entity_insert",
    "body": [
      "/**",
      " * Implements hook_entity_insert().",
      " */",
      "function hook_entity_insert(\\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to creation of a new entity.",
      "",
      "This hook runs once the entity has been stored. Note that hook",
      "implementations may not alter the stored entity data.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object.",
      "",
      "@ingroup entity_crud",
      "@see hook_ENTITY_TYPE_insert()"
    ],
    "scope": "php"
  },
  "hook_entity_load": {
    "prefix": "hook_entity_load",
    "body": [
      "/**",
      " * Implements hook_entity_load().",
      " */",
      "function hook_entity_load(array $entities, $entity_type_id) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on entities when loaded.",
      "",
      "This is a generic load hook called for all entity types loaded via the",
      "entity API.",
      "",
      "hook_entity_storage_load() should be used to load additional data for",
      "content entities.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface[] $entities",
      "  The entities keyed by entity ID.",
      "@param string $entity_type_id",
      "  The type of entities being loaded (i.e. node, user, comment).",
      "",
      "@ingroup entity_crud",
      "@see hook_ENTITY_TYPE_load()"
    ],
    "scope": "php"
  },
  "hook_entity_operation": {
    "prefix": "hook_entity_operation",
    "body": [
      "/**",
      " * Implements hook_entity_operation().",
      " */",
      "function hook_entity_operation(\\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Declares entity operations.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity on which the linked operations will be performed.",
      "",
      "@return array",
      "  An operations array as returned by",
      "  EntityListBuilderInterface::getOperations().",
      "",
      "@see \\Drupal\\Core\\Entity\\EntityListBuilderInterface::getOperations()"
    ],
    "scope": "php"
  },
  "hook_entity_operation_alter": {
    "prefix": "hook_entity_operation_alter",
    "body": [
      "/**",
      " * Implements hook_entity_operation_alter().",
      " */",
      "function hook_entity_operation_alter(array &$operations, \\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter entity operations.",
      "",
      "@param array $operations",
      "  Operations array as returned by",
      "  \\Drupal\\Core\\Entity\\EntityListBuilderInterface::getOperations().",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity on which the linked operations will be performed."
    ],
    "scope": "php"
  },
  "hook_entity_predelete": {
    "prefix": "hook_entity_predelete",
    "body": [
      "/**",
      " * Implements hook_entity_predelete().",
      " */",
      "function hook_entity_predelete(\\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act before entity deletion.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object for the entity that is about to be deleted.",
      "",
      "@ingroup entity_crud",
      "@see hook_ENTITY_TYPE_predelete()"
    ],
    "scope": "php"
  },
  "hook_entity_preload": {
    "prefix": "hook_entity_preload",
    "body": [
      "/**",
      " * Implements hook_entity_preload().",
      " */",
      "function hook_entity_preload(array $ids, $entity_type_id) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on an array of entity IDs before they are loaded.",
      "",
      "This hook can be used by modules that need, for example, to return a",
      "different revision than the default one.",
      "",
      "@param array $ids",
      "  An array of entity IDs that have to be loaded.",
      "@param string $entity_type_id",
      "  The type of entities being loaded (i.e. node, user, comment).",
      "",
      "@return \\Drupal\\Core\\Entity\\EntityInterface[]",
      "  An array of pre-loaded entity objects.",
      "",
      "@ingroup entity_crud"
    ],
    "scope": "php"
  },
  "hook_entity_prepare_form": {
    "prefix": "hook_entity_prepare_form",
    "body": [
      "/**",
      " * Implements hook_entity_prepare_form().",
      " */",
      "function hook_entity_prepare_form(\\Drupal\\Core\\Entity\\EntityInterface $entity, $operation, \\Drupal\\Core\\Form\\FormStateInterface $form_state) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Acts on an entity object about to be shown on an entity form.",
      "",
      "This can be typically used to pre-fill entity values or change the form state",
      "before the entity form is built. It is invoked just once when first building",
      "the entity form. Rebuilds will not trigger a new invocation.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity that is about to be shown on the form.",
      "@param $operation",
      "  The current operation.",
      "@param \\Drupal\\Core\\Form\\FormStateInterface $form_state",
      "  The current state of the form.",
      "",
      "@see \\Drupal\\Core\\Entity\\EntityForm::prepareEntity()",
      "@see hook_ENTITY_TYPE_prepare_form()",
      "",
      "@ingroup entity_crud"
    ],
    "scope": "php"
  },
  "hook_entity_prepare_view": {
    "prefix": "hook_entity_prepare_view",
    "body": [
      "/**",
      " * Implements hook_entity_prepare_view().",
      " */",
      "function hook_entity_prepare_view($entity_type_id, array $entities, array $displays, $view_mode) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on entities as they are being prepared for view.",
      "",
      "Allows you to operate on multiple entities as they are being prepared for",
      "view. Only use this if attaching the data during the entity loading phase",
      "is not appropriate, for example when attaching other 'entity' style objects.",
      "",
      "@param string $entity_type_id",
      "  The type of entities being viewed (i.e. node, user, comment).",
      "@param array $entities",
      "  The entities keyed by entity ID.",
      "@param \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface[] $displays",
      "  The array of entity view displays holding the display options configured",
      "  for the entity components, keyed by bundle name.",
      "@param string $view_mode",
      "  The view mode.",
      "",
      "@ingroup entity_crud"
    ],
    "scope": "php"
  },
  "hook_entity_presave": {
    "prefix": "hook_entity_presave",
    "body": [
      "/**",
      " * Implements hook_entity_presave().",
      " */",
      "function hook_entity_presave(\\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on an entity before it is created or updated.",
      "",
      "You can get the original entity object from $entity->original when it is an",
      "update of the entity.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object.",
      "",
      "@ingroup entity_crud",
      "@see hook_ENTITY_TYPE_presave()"
    ],
    "scope": "php"
  },
  "hook_entity_revision_create": {
    "prefix": "hook_entity_revision_create",
    "body": [
      "/**",
      " * Implements hook_entity_revision_create().",
      " */",
      "function hook_entity_revision_create(\\Drupal\\Core\\Entity\\EntityInterface $new_revision, \\Drupal\\Core\\Entity\\EntityInterface $entity, $keep_untranslatable_fields) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to entity revision creation.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $new_revision",
      "  The new revision that was created.",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The original entity that was used to create the revision from.",
      "@param bool|null $keep_untranslatable_fields",
      "  Whether untranslatable field values were kept (TRUE) or copied from the",
      "  default revision (FALSE) when generating a merged revision. If no value was",
      "  explicitly specified (NULL), a default value of TRUE should be assumed if",
      "  the provided entity is the default translation and untranslatable fields",
      "  should only affect the default translation, FALSE otherwise.",
      "",
      "@ingroup entity_crud",
      "@see \\Drupal\\Core\\Entity\\RevisionableStorageInterface::createRevision()",
      "@see \\Drupal\\Core\\Entity\\TranslatableRevisionableStorageInterface::createRevision()"
    ],
    "scope": "php"
  },
  "hook_entity_revision_delete": {
    "prefix": "hook_entity_revision_delete",
    "body": [
      "/**",
      " * Implements hook_entity_revision_delete().",
      " */",
      "function hook_entity_revision_delete(\\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to entity revision deletion.",
      "",
      "This hook runs once the entity revision has been deleted from the storage.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object for the entity revision that has been deleted.",
      "",
      "@ingroup entity_crud",
      "@see hook_ENTITY_TYPE_revision_delete()"
    ],
    "scope": "php"
  },
  "hook_entity_storage_load": {
    "prefix": "hook_entity_storage_load",
    "body": [
      "/**",
      " * Implements hook_entity_storage_load().",
      " */",
      "function hook_entity_storage_load(array $entities, $entity_type) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on content entities when loaded from the storage.",
      "",
      "The results of this hook will be cached.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface[] $entities",
      "  The entities keyed by entity ID.",
      "@param string $entity_type",
      "  The type of entities being loaded (i.e. node, user, comment).",
      "",
      "@see hook_entity_load()"
    ],
    "scope": "php"
  },
  "hook_entity_translation_create": {
    "prefix": "hook_entity_translation_create",
    "body": [
      "/**",
      " * Implements hook_entity_translation_create().",
      " */",
      "function hook_entity_translation_create(\\Drupal\\Core\\Entity\\EntityInterface $translation) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Acts when creating a new entity translation.",
      "",
      "This hook runs after a new entity translation object has just been",
      "instantiated.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $translation",
      "  The entity object.",
      "",
      "@ingroup entity_crud",
      "@see hook_ENTITY_TYPE_translation_create()"
    ],
    "scope": "php"
  },
  "hook_entity_translation_delete": {
    "prefix": "hook_entity_translation_delete",
    "body": [
      "/**",
      " * Implements hook_entity_translation_delete().",
      " */",
      "function hook_entity_translation_delete(\\Drupal\\Core\\Entity\\EntityInterface $translation) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to entity translation deletion.",
      "",
      "This hook runs once the entity translation has been deleted from storage.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $translation",
      "  The original entity object.",
      "",
      "@ingroup entity_crud",
      "@see hook_ENTITY_TYPE_translation_delete()"
    ],
    "scope": "php"
  },
  "hook_entity_translation_insert": {
    "prefix": "hook_entity_translation_insert",
    "body": [
      "/**",
      " * Implements hook_entity_translation_insert().",
      " */",
      "function hook_entity_translation_insert(\\Drupal\\Core\\Entity\\EntityInterface $translation) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to creation of a new entity translation.",
      "",
      "This hook runs once the entity translation has been stored. Note that hook",
      "implementations may not alter the stored entity translation data.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $translation",
      "  The entity object of the translation just stored.",
      "",
      "@ingroup entity_crud",
      "@see hook_ENTITY_TYPE_translation_insert()"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_access": {
    "prefix": "hook_ENTITY_TYPE_access",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_access().",
      " */",
      "function hook_ENTITY_TYPE_access(\\Drupal\\Core\\Entity\\EntityInterface $entity, $operation, \\Drupal\\Core\\Session\\AccountInterface $account) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Control entity operation access for a specific entity type.",
      "",
      "Note that this hook is not called for listings (e.g., from entity queries",
      "and Views). For nodes, see @link node_access Node access rights @endlink for",
      "a full explanation. For other entity types, see hook_query_TAG_alter().",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity to check access to.",
      "@param string $operation",
      "  The operation that is to be performed on $entity. Usually one of:",
      "  - \"view\"",
      "  - \"update\"",
      "  - \"delete\"",
      "@param \\Drupal\\Core\\Session\\AccountInterface $account",
      "  The account trying to access the entity.",
      "",
      "@return \\Drupal\\Core\\Access\\AccessResultInterface",
      "  The access result. hook_entity_access() has detailed documentation.",
      "",
      "@see \\Drupal\\Core\\Entity\\EntityAccessControlHandler",
      "@see hook_ENTITY_TYPE_create_access()",
      "@see hook_entity_access()",
      "@see hook_query_TAG_alter()",
      "",
      "@ingroup entity_api"
    ],
    "scope": "php"
  },
  "hook_entity_type_alter": {
    "prefix": "hook_entity_type_alter",
    "body": [
      "/**",
      " * Implements hook_entity_type_alter().",
      " */",
      "function hook_entity_type_alter(array &$entity_types) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the entity type definitions.",
      "",
      "Modules may implement this hook to alter the information that defines an",
      "entity type. All properties that are available in",
      "\\Drupal\\Core\\Entity\\Annotation\\EntityType and all the ones additionally",
      "provided by modules can be altered here.",
      "",
      "Do not use this hook to add information to entity types, unless one of the",
      "following is true:",
      "- You are filling in default values.",
      "- You need to dynamically add information only in certain circumstances.",
      "- Your hook needs to run after hook_entity_type_build() implementations.",
      "Use hook_entity_type_build() instead in all other cases.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityTypeInterface[] $entity_types",
      "  An associative array of all entity type definitions, keyed by the entity",
      "  type name. Passed by reference.",
      "",
      "@see \\Drupal\\Core\\Entity\\Entity",
      "@see \\Drupal\\Core\\Entity\\EntityTypeInterface"
    ],
    "scope": "php"
  },
  "hook_entity_type_build": {
    "prefix": "hook_entity_type_build",
    "body": [
      "/**",
      " * Implements hook_entity_type_build().",
      " */",
      "function hook_entity_type_build(array &$entity_types) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Add to entity type definitions.",
      "",
      "Modules may implement this hook to add information to defined entity types,",
      "as defined in \\Drupal\\Core\\Entity\\EntityTypeInterface.",
      "",
      "To alter existing information or to add information dynamically, use",
      "hook_entity_type_alter().",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityTypeInterface[] $entity_types",
      "  An associative array of all entity type definitions, keyed by the entity",
      "  type name. Passed by reference.",
      "",
      "@see \\Drupal\\Core\\Entity\\Entity",
      "@see \\Drupal\\Core\\Entity\\EntityTypeInterface",
      "@see hook_entity_type_alter()"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_build_defaults_alter": {
    "prefix": "hook_ENTITY_TYPE_build_defaults_alter",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_build_defaults_alter().",
      " */",
      "function hook_ENTITY_TYPE_build_defaults_alter(array &$build, \\Drupal\\Core\\Entity\\EntityInterface $entity, $view_mode) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter entity renderable values before cache checking during rendering.",
      "",
      "Invoked for a specific entity type.",
      "",
      "The values in the #cache key of the renderable array are used to determine if",
      "a cache entry exists for the entity's rendered output. Ideally only values",
      "that pertain to caching should be altered in this hook.",
      "",
      "@param array &$build",
      "  A renderable array containing the entity's caching and view mode values.",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity that is being viewed.",
      "@param string $view_mode",
      "  The view_mode that is to be used to display the entity.",
      "",
      "@see \\Drupal\\Core\\Render\\RendererInterface::render()",
      "@see \\Drupal\\Core\\Entity\\EntityViewBuilder",
      "@see hook_entity_build_defaults_alter()",
      "",
      "@ingroup entity_crud"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_create": {
    "prefix": "hook_ENTITY_TYPE_create",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_create().",
      " */",
      "function hook_ENTITY_TYPE_create(\\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Acts when creating a new entity of a specific type.",
      "",
      "This hook runs after a new entity object has just been instantiated.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object.",
      "",
      "@ingroup entity_crud",
      "@see hook_entity_create()"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_create_access": {
    "prefix": "hook_ENTITY_TYPE_create_access",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_create_access().",
      " */",
      "function hook_ENTITY_TYPE_create_access(\\Drupal\\Core\\Session\\AccountInterface $account, array $context, $entity_bundle) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Control entity create access for a specific entity type.",
      "",
      "@param \\Drupal\\Core\\Session\\AccountInterface $account",
      "  The account trying to access the entity.",
      "@param array $context",
      "  An associative array of additional context values. By default it contains",
      "  language:",
      "  - langcode - the current language code.",
      "@param string $entity_bundle",
      "  The entity bundle name.",
      "",
      "@return \\Drupal\\Core\\Access\\AccessResultInterface",
      "  The access result.",
      "",
      "@see \\Drupal\\Core\\Entity\\EntityAccessControlHandler",
      "@see hook_ENTITY_TYPE_access()",
      "@see hook_entity_create_access()",
      "",
      "@ingroup entity_api"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_delete": {
    "prefix": "hook_ENTITY_TYPE_delete",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_delete().",
      " */",
      "function hook_ENTITY_TYPE_delete(\\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to entity deletion of a particular type.",
      "",
      "This hook runs once the entity has been deleted from the storage.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object for the entity that has been deleted.",
      "",
      "@ingroup entity_crud",
      "@see hook_entity_delete()"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_field_values_init": {
    "prefix": "hook_ENTITY_TYPE_field_values_init",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_field_values_init().",
      " */",
      "function hook_ENTITY_TYPE_field_values_init(\\Drupal\\Core\\Entity\\FieldableEntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Acts when initializing a fieldable entity object.",
      "",
      "This hook runs after a new entity object or a new entity translation object",
      "has just been instantiated. It can be used to set initial values, e.g. to",
      "provide defaults.",
      "",
      "@param \\Drupal\\Core\\Entity\\FieldableEntityInterface $entity",
      "  The entity object.",
      "",
      "@ingroup entity_crud",
      "@see hook_entity_field_values_init()"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_insert": {
    "prefix": "hook_ENTITY_TYPE_insert",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_insert().",
      " */",
      "function hook_ENTITY_TYPE_insert(\\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to creation of a new entity of a particular type.",
      "",
      "This hook runs once the entity has been stored. Note that hook",
      "implementations may not alter the stored entity data.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object.",
      "",
      "@ingroup entity_crud",
      "@see hook_entity_insert()"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_load": {
    "prefix": "hook_ENTITY_TYPE_load",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_load().",
      " */",
      "function hook_ENTITY_TYPE_load($entities) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on entities of a specific type when loaded.",
      "",
      "@param array $entities",
      "  The entities keyed by entity ID.",
      "",
      "@ingroup entity_crud",
      "@see hook_entity_load()"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_predelete": {
    "prefix": "hook_ENTITY_TYPE_predelete",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_predelete().",
      " */",
      "function hook_ENTITY_TYPE_predelete(\\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act before entity deletion of a particular entity type.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object for the entity that is about to be deleted.",
      "",
      "@ingroup entity_crud",
      "@see hook_entity_predelete()"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_prepare_form": {
    "prefix": "hook_ENTITY_TYPE_prepare_form",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_prepare_form().",
      " */",
      "function hook_ENTITY_TYPE_prepare_form(\\Drupal\\Core\\Entity\\EntityInterface $entity, $operation, \\Drupal\\Core\\Form\\FormStateInterface $form_state) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Acts on a particular type of entity object about to be in an entity form.",
      "",
      "This can be typically used to pre-fill entity values or change the form state",
      "before the entity form is built. It is invoked just once when first building",
      "the entity form. Rebuilds will not trigger a new invocation.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity that is about to be shown on the form.",
      "@param $operation",
      "  The current operation.",
      "@param \\Drupal\\Core\\Form\\FormStateInterface $form_state",
      "  The current state of the form.",
      "",
      "@see \\Drupal\\Core\\Entity\\EntityForm::prepareEntity()",
      "@see hook_entity_prepare_form()",
      "",
      "@ingroup entity_crud"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_presave": {
    "prefix": "hook_ENTITY_TYPE_presave",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_presave().",
      " */",
      "function hook_ENTITY_TYPE_presave(\\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on a specific type of entity before it is created or updated.",
      "",
      "You can get the original entity object from $entity->original when it is an",
      "update of the entity.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object.",
      "",
      "@ingroup entity_crud",
      "@see hook_entity_presave()"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_revision_create": {
    "prefix": "hook_ENTITY_TYPE_revision_create",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_revision_create().",
      " */",
      "function hook_ENTITY_TYPE_revision_create(\\Drupal\\Core\\Entity\\EntityInterface $new_revision, \\Drupal\\Core\\Entity\\EntityInterface $entity, $keep_untranslatable_fields) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to entity revision creation.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $new_revision",
      "  The new revision that was created.",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The original entity that was used to create the revision from.",
      "@param bool|null $keep_untranslatable_fields",
      "  Whether untranslatable field values were kept (TRUE) or copied from the",
      "  default revision (FALSE) when generating a merged revision. If no value was",
      "  explicitly specified (NULL), a default value of TRUE should be assumed if",
      "  the provided entity is the default translation and untranslatable fields",
      "  should only affect the default translation, FALSE otherwise.",
      "",
      "@ingroup entity_crud",
      "@see \\Drupal\\Core\\Entity\\RevisionableStorageInterface::createRevision()",
      "@see \\Drupal\\Core\\Entity\\TranslatableRevisionableStorageInterface::createRevision()"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_revision_delete": {
    "prefix": "hook_ENTITY_TYPE_revision_delete",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_revision_delete().",
      " */",
      "function hook_ENTITY_TYPE_revision_delete(\\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to entity revision deletion of a particular type.",
      "",
      "This hook runs once the entity revision has been deleted from the storage.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object for the entity revision that has been deleted.",
      "",
      "@ingroup entity_crud",
      "@see hook_entity_revision_delete()"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_storage_load": {
    "prefix": "hook_ENTITY_TYPE_storage_load",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_storage_load().",
      " */",
      "function hook_ENTITY_TYPE_storage_load(array $entities) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on content entities of a given type when loaded from the storage.",
      "",
      "The results of this hook will be cached if the entity type supports it.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface[] $entities",
      "  The entities keyed by entity ID.",
      "",
      "@see hook_entity_storage_load()"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_translation_create": {
    "prefix": "hook_ENTITY_TYPE_translation_create",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_translation_create().",
      " */",
      "function hook_ENTITY_TYPE_translation_create(\\Drupal\\Core\\Entity\\EntityInterface $translation) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Acts when creating a new entity translation of a specific type.",
      "",
      "This hook runs after a new entity translation object has just been",
      "instantiated.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $translation",
      "  The entity object.",
      "",
      "@ingroup entity_crud",
      "@see hook_entity_translation_create()"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_translation_delete": {
    "prefix": "hook_ENTITY_TYPE_translation_delete",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_translation_delete().",
      " */",
      "function hook_ENTITY_TYPE_translation_delete(\\Drupal\\Core\\Entity\\EntityInterface $translation) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to entity translation deletion of a particular type.",
      "",
      "This hook runs once the entity translation has been deleted from storage.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $translation",
      "  The original entity object.",
      "",
      "@ingroup entity_crud",
      "@see hook_entity_translation_delete()"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_translation_insert": {
    "prefix": "hook_ENTITY_TYPE_translation_insert",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_translation_insert().",
      " */",
      "function hook_ENTITY_TYPE_translation_insert(\\Drupal\\Core\\Entity\\EntityInterface $translation) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to creation of a new entity translation of a particular type.",
      "",
      "This hook runs once the entity translation has been stored. Note that hook",
      "implementations may not alter the stored entity translation data.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $translation",
      "  The entity object of the translation just stored.",
      "",
      "@ingroup entity_crud",
      "@see hook_entity_translation_insert()"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_update": {
    "prefix": "hook_ENTITY_TYPE_update",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_update().",
      " */",
      "function hook_ENTITY_TYPE_update(\\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to updates to an entity of a particular type.",
      "",
      "This hook runs once the entity storage has been updated. Note that hook",
      "implementations may not alter the stored entity data. Get the original entity",
      "object from $entity->original.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object.",
      "",
      "@ingroup entity_crud",
      "@see hook_entity_update()"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_view": {
    "prefix": "hook_ENTITY_TYPE_view",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_view().",
      " */",
      "function hook_ENTITY_TYPE_view(array &$build, \\Drupal\\Core\\Entity\\EntityInterface $entity, \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface $display, $view_mode) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on entities of a particular type being assembled before rendering.",
      "",
      "@param &$build",
      "  A renderable array representing the entity content. The module may add",
      "  elements to $build prior to rendering. The structure of $build is a",
      "  renderable array as expected by",
      "  \\Drupal\\Core\\Render\\RendererInterface::render().",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object.",
      "@param \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface $display",
      "  The entity view display holding the display options configured for the",
      "  entity components.",
      "@param $view_mode",
      "  The view mode the entity is rendered in.",
      "",
      "@see hook_ENTITY_TYPE_view_alter()",
      "@see hook_entity_view()",
      "",
      "@ingroup entity_crud"
    ],
    "scope": "php"
  },
  "hook_ENTITY_TYPE_view_alter": {
    "prefix": "hook_ENTITY_TYPE_view_alter",
    "body": [
      "/**",
      " * Implements hook_ENTITY_TYPE_view_alter().",
      " */",
      "function hook_ENTITY_TYPE_view_alter(array &$build, \\Drupal\\Core\\Entity\\EntityInterface $entity, \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface $display) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the results of the entity build array for a particular entity type.",
      "",
      "This hook is called after the content has been assembled in a structured",
      "array and may be used for doing processing which requires that the complete",
      "entity content structure has been built.",
      "",
      "If a module wishes to act on the rendered HTML of the entity rather than the",
      "structured content array, it may use this hook to add a #post_render",
      "callback. Alternatively, it could also implement hook_preprocess_HOOK() for",
      "the particular entity type template, if there is one (e.g., node.html.twig).",
      "",
      "See the @link themeable Default theme implementations topic @endlink and",
      "\\Drupal\\Core\\Render\\RendererInterface::render() for details.",
      "",
      "@param array &$build",
      "  A renderable array representing the entity content.",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object being rendered.",
      "@param \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface $display",
      "  The entity view display holding the display options configured for the",
      "  entity components.",
      "",
      "@ingroup entity_crud",
      "",
      "@see hook_ENTITY_TYPE_view()",
      "@see hook_entity_view_alter()"
    ],
    "scope": "php"
  },
  "hook_entity_update": {
    "prefix": "hook_entity_update",
    "body": [
      "/**",
      " * Implements hook_entity_update().",
      " */",
      "function hook_entity_update(\\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to updates to an entity.",
      "",
      "This hook runs once the entity storage has been updated. Note that hook",
      "implementations may not alter the stored entity data. Get the original entity",
      "object from $entity->original.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object.",
      "",
      "@ingroup entity_crud",
      "@see hook_ENTITY_TYPE_update()"
    ],
    "scope": "php"
  },
  "hook_entity_view": {
    "prefix": "hook_entity_view",
    "body": [
      "/**",
      " * Implements hook_entity_view().",
      " */",
      "function hook_entity_view(array &$build, \\Drupal\\Core\\Entity\\EntityInterface $entity, \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface $display, $view_mode) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on entities being assembled before rendering.",
      "",
      "@param &$build",
      "  A renderable array representing the entity content. The module may add",
      "  elements to $build prior to rendering. The structure of $build is a",
      "  renderable array as expected by",
      "  \\Drupal\\Core\\Render\\RendererInterface::render().",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object.",
      "@param \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface $display",
      "  The entity view display holding the display options configured for the",
      "  entity components.",
      "@param $view_mode",
      "  The view mode the entity is rendered in.",
      "",
      "@see hook_entity_view_alter()",
      "@see hook_ENTITY_TYPE_view()",
      "",
      "@ingroup entity_crud"
    ],
    "scope": "php"
  },
  "hook_entity_view_alter": {
    "prefix": "hook_entity_view_alter",
    "body": [
      "/**",
      " * Implements hook_entity_view_alter().",
      " */",
      "function hook_entity_view_alter(array &$build, \\Drupal\\Core\\Entity\\EntityInterface $entity, \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface $display) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the results of the entity build array.",
      "",
      "This hook is called after the content has been assembled in a structured",
      "array and may be used for doing processing which requires that the complete",
      "entity content structure has been built.",
      "",
      "If a module wishes to act on the rendered HTML of the entity rather than the",
      "structured content array, it may use this hook to add a #post_render",
      "callback. Alternatively, it could also implement hook_preprocess_HOOK() for",
      "the particular entity type template, if there is one (e.g., node.html.twig).",
      "",
      "See the @link themeable Default theme implementations topic @endlink and",
      "\\Drupal\\Core\\Render\\RendererInterface::render() for details.",
      "",
      "@param array &$build",
      "  A renderable array representing the entity content.",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity object being rendered.",
      "@param \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface $display",
      "  The entity view display holding the display options configured for the",
      "  entity components.",
      "",
      "@ingroup entity_crud",
      "",
      "@see hook_entity_view()",
      "@see hook_ENTITY_TYPE_view_alter()"
    ],
    "scope": "php"
  },
  "hook_entity_view_display_alter": {
    "prefix": "hook_entity_view_display_alter",
    "body": [
      "/**",
      " * Implements hook_entity_view_display_alter().",
      " */",
      "function hook_entity_view_display_alter(\\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface $display, array $context) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the settings used for displaying an entity.",
      "",
      "@param \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface $display",
      "  The entity view display that will be used to display the entity",
      "  components.",
      "@param array $context",
      "  An associative array containing:",
      "  - entity_type: The entity type, e.g., 'node' or 'user'.",
      "  - bundle: The bundle, e.g., 'page' or 'article'.",
      "  - view_mode: The view mode, e.g., 'full', 'teaser', etc.",
      "",
      "@ingroup entity_crud"
    ],
    "scope": "php"
  },
  "hook_entity_view_mode_alter": {
    "prefix": "hook_entity_view_mode_alter",
    "body": [
      "/**",
      " * Implements hook_entity_view_mode_alter().",
      " */",
      "function hook_entity_view_mode_alter(&$view_mode, \\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Change the view mode of an entity that is being displayed.",
      "",
      "@param string $view_mode",
      "  The view_mode that is to be used to display the entity.",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity that is being viewed.",
      "",
      "@ingroup entity_crud"
    ],
    "scope": "php"
  },
  "hook_entity_view_mode_info_alter": {
    "prefix": "hook_entity_view_mode_info_alter",
    "body": [
      "/**",
      " * Implements hook_entity_view_mode_info_alter().",
      " */",
      "function hook_entity_view_mode_info_alter(&$view_modes) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the view modes for entity types.",
      "",
      "@param array $view_modes",
      "  An array of view modes, keyed first by entity type, then by view mode name.",
      "",
      "@see \\Drupal\\Core\\Entity\\EntityDisplayRepositoryInterface::getAllViewModes()",
      "@see \\Drupal\\Core\\Entity\\EntityDisplayRepositoryInterface::getViewModes()"
    ],
    "scope": "php"
  },
  "hook_extension": {
    "prefix": "hook_extension",
    "body": [
      "/**",
      " * Implements hook_extension().",
      " */",
      "function hook_extension() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Declare a template file extension to be used with a theme engine.",
      "",
      "This hook is used in a theme engine implementation in the format of",
      "ENGINE_extension().",
      "",
      "@return string",
      "  The file extension the theme engine will recognize."
    ],
    "scope": "php"
  },
  "hook_field_formatter_info_alter": {
    "prefix": "hook_field_formatter_info_alter",
    "body": [
      "/**",
      " * Implements hook_field_formatter_info_alter().",
      " */",
      "function hook_field_formatter_info_alter(array &$info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform alterations on Field API formatter types.",
      "",
      "@param array $info",
      "  An array of information on existing formatter types, as collected by the",
      "  annotation discovery mechanism."
    ],
    "scope": "php"
  },
  "hook_field_formatter_settings_summary_alter": {
    "prefix": "hook_field_formatter_settings_summary_alter",
    "body": [
      "/**",
      " * Implements hook_field_formatter_settings_summary_alter().",
      " */",
      "function hook_field_formatter_settings_summary_alter(array &$summary, array $context) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alters the field formatter settings summary.",
      "",
      "@param array $summary",
      "  An array of summary messages.",
      "@param array $context",
      "  An associative array with the following elements:",
      "  - formatter: The formatter plugin.",
      "  - field_definition: The field definition.",
      "  - view_mode: The view mode being configured.",
      "",
      "@see \\Drupal\\field_ui\\Form\\EntityViewDisplayEditForm::alterSettingsSummary()"
    ],
    "scope": "php"
  },
  "hook_field_formatter_third_party_settings_form": {
    "prefix": "hook_field_formatter_third_party_settings_form",
    "body": [
      "/**",
      " * Implements hook_field_formatter_third_party_settings_form().",
      " */",
      "function hook_field_formatter_third_party_settings_form(\\Drupal\\Core\\Field\\FormatterInterface $plugin, \\Drupal\\Core\\Field\\FieldDefinitionInterface $field_definition, $view_mode, array $form, \\Drupal\\Core\\Form\\FormStateInterface $form_state) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Allow modules to add settings to field formatters provided by other modules.",
      "",
      "@param \\Drupal\\Core\\Field\\FormatterInterface $plugin",
      "  The instantiated field formatter plugin.",
      "@param \\Drupal\\Core\\Field\\FieldDefinitionInterface $field_definition",
      "  The field definition.",
      "@param string $view_mode",
      "  The entity view mode.",
      "@param array $form",
      "  The (entire) configuration form array.",
      "@param \\Drupal\\Core\\Form\\FormStateInterface $form_state",
      "  The form state.",
      "",
      "@return array",
      "  Returns the form array to be built.",
      "",
      "@see \\Drupal\\field_ui\\Form\\EntityViewDisplayEditForm::thirdPartySettingsForm()"
    ],
    "scope": "php"
  },
  "hook_field_info_alter": {
    "prefix": "hook_field_info_alter",
    "body": [
      "/**",
      " * Implements hook_field_info_alter().",
      " */",
      "function hook_field_info_alter(&$info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform alterations on Field API field types.",
      "",
      "@param $info",
      "  Array of information on field types as collected by the \"field type\" plugin",
      "  manager."
    ],
    "scope": "php"
  },
  "hook_field_info_max_weight": {
    "prefix": "hook_field_info_max_weight",
    "body": [
      "/**",
      " * Implements hook_field_info_max_weight().",
      " */",
      "function hook_field_info_max_weight($entity_type, $bundle, $context, $context_mode) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Returns the maximum weight for the entity components handled by the module.",
      "",
      "Field API takes care of fields and 'extra_fields'. This hook is intended for",
      "third-party modules adding other entity components (e.g. field_group).",
      "",
      "@param string $entity_type",
      "  The type of entity; e.g. 'node' or 'user'.",
      "@param string $bundle",
      "  The bundle name.",
      "@param string $context",
      "  The context for which the maximum weight is requested. Either 'form' or",
      "  'display'.",
      "@param string $context_mode",
      "  The view or form mode name.",
      "",
      "@return int",
      "  The maximum weight of the entity's components, or NULL if no components",
      "  were found.",
      "",
      "@ingroup field_info"
    ],
    "scope": "php"
  },
  "hook_field_purge_field": {
    "prefix": "hook_field_purge_field",
    "body": [
      "/**",
      " * Implements hook_field_purge_field().",
      " */",
      "function hook_field_purge_field(\\Drupal\\field\\Entity\\FieldConfig $field) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Acts when a field is being purged.",
      "",
      "In field_purge_field(), after the field definition has been removed",
      "from the system, the entity storage has purged stored field data, and the",
      "field info cache has been cleared, this hook is invoked on all modules to",
      "allow them to respond to the field being purged.",
      "",
      "@param $field",
      "  The field being purged."
    ],
    "scope": "php"
  },
  "hook_field_purge_field_storage": {
    "prefix": "hook_field_purge_field_storage",
    "body": [
      "/**",
      " * Implements hook_field_purge_field_storage().",
      " */",
      "function hook_field_purge_field_storage(\\Drupal\\field\\Entity\\FieldStorageConfig $field_storage) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Acts when a field storage definition is being purged.",
      "",
      "In field_purge_field_storage(), after the storage definition has been removed",
      "from the system, the entity storage has purged stored field data, and the",
      "field definitions cache has been cleared, this hook is invoked on all modules",
      "to allow them to respond to the field storage being purged.",
      "",
      "@param $field_storage \\Drupal\\field\\Entity\\FieldStorageConfig",
      "  The field storage being purged."
    ],
    "scope": "php"
  },
  "hook_field_storage_config_update_forbid": {
    "prefix": "hook_field_storage_config_update_forbid",
    "body": [
      "/**",
      " * Implements hook_field_storage_config_update_forbid().",
      " */",
      "function hook_field_storage_config_update_forbid(\\Drupal\\field\\FieldStorageConfigInterface $field_storage, \\Drupal\\field\\FieldStorageConfigInterface $prior_field_storage) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Forbid a field storage update from occurring.",
      "",
      "Any module may forbid any update for any reason. For example, the",
      "field's storage module might forbid an update if it would change",
      "the storage schema while data for the field exists. A field type",
      "module might forbid an update if it would change existing data's",
      "semantics, or if there are external dependencies on field settings",
      "that cannot be updated.",
      "",
      "To forbid the update from occurring, throw a",
      "\\Drupal\\Core\\Entity\\Exception\\FieldStorageDefinitionUpdateForbiddenException.",
      "",
      "@param \\Drupal\\field\\FieldStorageConfigInterface $field_storage",
      "  The field storage as it will be post-update.",
      "@param \\Drupal\\field\\FieldStorageConfigInterface $prior_field_storage",
      "  The field storage as it is pre-update.",
      "",
      "@see entity_crud"
    ],
    "scope": "php"
  },
  "hook_field_ui_preconfigured_options_alter": {
    "prefix": "hook_field_ui_preconfigured_options_alter",
    "body": [
      "/**",
      " * Implements hook_field_ui_preconfigured_options_alter().",
      " */",
      "function hook_field_ui_preconfigured_options_alter(array &$options, $field_type) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform alterations on preconfigured field options.",
      "",
      "@param array $options",
      "  Array of options as returned from",
      "  \\Drupal\\Core\\Field\\PreconfiguredFieldUiOptionsInterface::getPreconfiguredOptions().",
      "@param string $field_type",
      "  The field type plugin ID.",
      "",
      "@see \\Drupal\\Core\\Field\\PreconfiguredFieldUiOptionsInterface::getPreconfiguredOptions()"
    ],
    "scope": "php"
  },
  "hook_field_views_data": {
    "prefix": "hook_field_views_data",
    "body": [
      "/**",
      " * Implements hook_field_views_data().",
      " */",
      "function hook_field_views_data(\\Drupal\\field\\FieldStorageConfigInterface $field_storage) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Override the default Views data for a Field API field.",
      "",
      "When collecting the views data, views_views_data() invokes this hook for each",
      "field storage definition, on the module that provides the field storage",
      "definition. If the return value is empty, the result of",
      "views_field_default_views_data() is used instead. Then the result is altered",
      "by invoking hook_field_views_data_alter() on all modules.",
      "",
      "If no hook implementation exists, hook_views_data() falls back to",
      "views_field_default_views_data().",
      "",
      "@param \\Drupal\\field\\FieldStorageConfigInterface $field_storage",
      "  The field storage config entity.",
      "",
      "@return array",
      "  An array of views data, in the same format as the return value of",
      "  hook_views_data().",
      "",
      "@see views_views_data()",
      "@see hook_field_views_data_alter()",
      "@see hook_field_views_data_views_data_alter()"
    ],
    "scope": "php"
  },
  "hook_field_views_data_alter": {
    "prefix": "hook_field_views_data_alter",
    "body": [
      "/**",
      " * Implements hook_field_views_data_alter().",
      " */",
      "function hook_field_views_data_alter(array &$data, \\Drupal\\field\\FieldStorageConfigInterface $field_storage) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the Views data for a single Field API field.",
      "",
      "This is called on all modules even if there is no hook_field_views_data()",
      "implementation for the field, and therefore may be used to alter the",
      "default data that views_field_default_views_data() supplies for the",
      "field storage.",
      "",
      "@param array $data",
      "  The views data for the field storage. This has the same format as the",
      "  return value of hook_views_data().",
      "@param \\Drupal\\field\\FieldStorageConfigInterface $field_storage",
      "  The field storage config entity.",
      "",
      "@see views_views_data()",
      "@see hook_field_views_data()",
      "@see hook_field_views_data_views_data_alter()"
    ],
    "scope": "php"
  },
  "hook_field_views_data_views_data_alter": {
    "prefix": "hook_field_views_data_views_data_alter",
    "body": [
      "/**",
      " * Implements hook_field_views_data_views_data_alter().",
      " */",
      "function hook_field_views_data_views_data_alter(array &$data, \\Drupal\\field\\FieldStorageConfigInterface $field) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the Views data on a per field basis.",
      "",
      "The Views module's implementation of hook_views_data_alter() invokes this for",
      "each field storage, in the module that defines the field type. It is not",
      "invoked in other modules.",
      "",
      "Unlike hook_field_views_data_alter(), this operates on the whole of the views",
      "data. This allows a field type to add data that concerns its fields in",
      "other tables, which would not yet be defined at the point when",
      "hook_field_views_data() and hook_field_views_data_alter() are invoked. For",
      "example, entity_reference adds reverse relationships on the tables for the",
      "entities which are referenced by entity_reference fields.",
      "",
      "(Note: this is weirdly named so as not to conflict with",
      "hook_field_views_data_alter().)",
      "",
      "@param array $data",
      "  The views data.",
      "@param \\Drupal\\field\\FieldStorageConfigInterface $field",
      "  The field storage config entity.",
      "",
      "@see hook_field_views_data()",
      "@see hook_field_views_data_alter()",
      "@see views_views_data_alter()"
    ],
    "scope": "php"
  },
  "hook_field_widget_complete_form_alter": {
    "prefix": "hook_field_widget_complete_form_alter",
    "body": [
      "/**",
      " * Implements hook_field_widget_complete_form_alter().",
      " */",
      "function hook_field_widget_complete_form_alter(&$field_widget_complete_form, \\Drupal\\Core\\Form\\FormStateInterface $form_state, $context) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the complete form for field widgets provided by other modules.",
      "",
      "@param $field_widget_complete_form",
      "  The field widget form element as constructed by",
      "  \\Drupal\\Core\\Field\\WidgetBaseInterface::form().",
      "@param $form_state",
      "  The current state of the form.",
      "@param $context",
      "  An associative array containing the following key-value pairs:",
      "  - form: The form structure to which widgets are being attached. This may be",
      "    a full form structure, or a sub-element of a larger form.",
      "  - widget: The widget plugin instance.",
      "  - items: The field values, as a",
      "    \\Drupal\\Core\\Field\\FieldItemListInterface object.",
      "  - delta: The order of this item in the array of subelements (0, 1, 2, etc).",
      "  - default: A boolean indicating whether the form is being shown as a dummy",
      "    form to set default values.",
      "",
      "@see \\Drupal\\Core\\Field\\WidgetBaseInterface::form()",
      "@see \\Drupal\\Core\\Field\\WidgetBase::form()",
      "@see hook_field_widget_complete_WIDGET_TYPE_form_alter()",
      "@see https://www.drupal.org/node/3180429"
    ],
    "scope": "php"
  },
  "hook_field_widget_complete_WIDGET_TYPE_form_alter": {
    "prefix": "hook_field_widget_complete_WIDGET_TYPE_form_alter",
    "body": [
      "/**",
      " * Implements hook_field_widget_complete_WIDGET_TYPE_form_alter().",
      " */",
      "function hook_field_widget_complete_WIDGET_TYPE_form_alter(&$field_widget_complete_form, \\Drupal\\Core\\Form\\FormStateInterface $form_state, $context) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the complete form for a specific widget provided by other modules.",
      "",
      "Modules can implement hook_field_widget_complete_WIDGET_TYPE_form_alter()",
      "to modify a specific widget form, rather than using",
      "hook_field_widget_complete_form_alter() and checking the widget type.",
      "",
      "@param $field_widget_complete_form",
      "  The field widget form element as constructed by",
      "  \\Drupal\\Core\\Field\\WidgetBaseInterface::form().",
      "@param $form_state",
      "  The current state of the form.",
      "@param $context",
      "  An associative array containing the following key-value pairs:",
      "  - form: The form structure to which widgets are being attached. This may be",
      "    a full form structure, or a sub-element of a larger form.",
      "  - widget: The widget plugin instance.",
      "  - items: The field values, as a",
      "    \\Drupal\\Core\\Field\\FieldItemListInterface object.",
      "  - delta: The order of this item in the array of subelements (0, 1, 2, etc).",
      "  - default: A boolean indicating whether the form is being shown as a dummy",
      "    form to set default values.",
      "",
      "@see \\Drupal\\Core\\Field\\WidgetBaseInterface::form()",
      "@see \\Drupal\\Core\\Field\\WidgetBase::form()",
      "@see hook_field_widget_complete_form_alter()",
      "@see https://www.drupal.org/node/3180429"
    ],
    "scope": "php"
  },
  "hook_field_widget_form_alter": {
    "prefix": "hook_field_widget_form_alter",
    "body": [
      "/**",
      " * Implements hook_field_widget_form_alter().",
      " */",
      "function hook_field_widget_form_alter(&$element, \\Drupal\\Core\\Form\\FormStateInterface $form_state, $context) {",
      "  $0",
      "}",
      "// deprecated"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter forms for field widgets provided by other modules.",
      "",
      "This hook can only modify individual elements within a field widget and",
      "cannot alter the top level (parent element) for multi-value fields. In most",
      "cases, you should use hook_field_widget_multivalue_form_alter() instead and",
      "loop over the elements.",
      "",
      "@param $element",
      "  The field widget form element as constructed by",
      "  \\Drupal\\Core\\Field\\WidgetBaseInterface::form().",
      "@param $form_state",
      "  The current state of the form.",
      "@param $context",
      "  An associative array containing the following key-value pairs:",
      "  - form: The form structure to which widgets are being attached. This may be",
      "    a full form structure, or a sub-element of a larger form.",
      "  - widget: The widget plugin instance.",
      "  - items: The field values, as a",
      "    \\Drupal\\Core\\Field\\FieldItemListInterface object.",
      "  - delta: The order of this item in the array of subelements (0, 1, 2, etc).",
      "  - default: A boolean indicating whether the form is being shown as a dummy",
      "    form to set default values.",
      "",
      "@deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Use",
      "  hook_field_widget_single_element_form_alter instead.",
      "",
      "@see https://www.drupal.org/node/3180429",
      "@see \\Drupal\\Core\\Field\\WidgetBaseInterface::form()",
      "@see \\Drupal\\Core\\Field\\WidgetBase::formSingleElement()",
      "@see hook_field_widget_WIDGET_TYPE_form_alter()",
      "@see hook_field_widget_multivalue_form_alter()"
    ],
    "scope": "php"
  },
  "hook_field_widget_info_alter": {
    "prefix": "hook_field_widget_info_alter",
    "body": [
      "/**",
      " * Implements hook_field_widget_info_alter().",
      " */",
      "function hook_field_widget_info_alter(array &$info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform alterations on Field API widget types.",
      "",
      "@param array $info",
      "  An array of information on existing widget types, as collected by the",
      "  annotation discovery mechanism."
    ],
    "scope": "php"
  },
  "hook_field_widget_multivalue_form_alter": {
    "prefix": "hook_field_widget_multivalue_form_alter",
    "body": [
      "/**",
      " * Implements hook_field_widget_multivalue_form_alter().",
      " */",
      "function hook_field_widget_multivalue_form_alter(array &$elements, \\Drupal\\Core\\Form\\FormStateInterface $form_state, array $context) {",
      "  $0",
      "}",
      "// deprecated"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter forms for multi-value field widgets provided by other modules.",
      "",
      "To alter the individual elements within the widget, loop over",
      "\\Drupal\\Core\\Render\\Element::children($elements).",
      "",
      "@param array $elements",
      "  The field widget form elements as constructed by",
      "  \\Drupal\\Core\\Field\\WidgetBase::formMultipleElements().",
      "@param \\Drupal\\Core\\Form\\FormStateInterface $form_state",
      "  The current state of the form.",
      "@param array $context",
      "  An associative array containing the following key-value pairs:",
      "  - form: The form structure to which widgets are being attached. This may be",
      "    a full form structure, or a sub-element of a larger form.",
      "  - widget: The widget plugin instance.",
      "  - items: The field values, as a",
      "    \\Drupal\\Core\\Field\\FieldItemListInterface object.",
      "  - default: A boolean indicating whether the form is being shown as a dummy",
      "    form to set default values.",
      "",
      "@deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Use",
      "  hook_field_widget_complete_form_alter instead.",
      "",
      "@see https://www.drupal.org/node/3180429",
      "@see \\Drupal\\Core\\Field\\WidgetBaseInterface::form()",
      "@see \\Drupal\\Core\\Field\\WidgetBase::formMultipleElements()",
      "@see hook_field_widget_multivalue_WIDGET_TYPE_form_alter()"
    ],
    "scope": "php"
  },
  "hook_field_widget_multivalue_WIDGET_TYPE_form_alter": {
    "prefix": "hook_field_widget_multivalue_WIDGET_TYPE_form_alter",
    "body": [
      "/**",
      " * Implements hook_field_widget_multivalue_WIDGET_TYPE_form_alter().",
      " */",
      "function hook_field_widget_multivalue_WIDGET_TYPE_form_alter(array &$elements, \\Drupal\\Core\\Form\\FormStateInterface $form_state, array $context) {",
      "  $0",
      "}",
      "// deprecated"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter multi-value widget forms for a widget provided by another module.",
      "",
      "Modules can implement hook_field_widget_multivalue_WIDGET_TYPE_form_alter() to",
      "modify a specific widget form, rather than using",
      "hook_field_widget_form_alter() and checking the widget type.",
      "",
      "To alter the individual elements within the widget, loop over",
      "\\Drupal\\Core\\Render\\Element::children($elements).",
      "",
      "@param array $elements",
      "  The field widget form elements as constructed by",
      "  \\Drupal\\Core\\Field\\WidgetBase::formMultipleElements().",
      "@param \\Drupal\\Core\\Form\\FormStateInterface $form_state",
      "  The current state of the form.",
      "@param array $context",
      "  An associative array. See hook_field_widget_multivalue_form_alter() for",
      "  the structure and content of the array.",
      "",
      "@deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Use",
      "  hook_field_widget_complete_WIDGET_TYPE_form_alter instead.",
      "",
      "@see https://www.drupal.org/node/3180429",
      "@see \\Drupal\\Core\\Field\\WidgetBaseInterface::form()",
      "@see \\Drupal\\Core\\Field\\WidgetBase::formMultipleElements()",
      "@see hook_field_widget_multivalue_form_alter()"
    ],
    "scope": "php"
  },
  "hook_field_widget_settings_summary_alter": {
    "prefix": "hook_field_widget_settings_summary_alter",
    "body": [
      "/**",
      " * Implements hook_field_widget_settings_summary_alter().",
      " */",
      "function hook_field_widget_settings_summary_alter(array &$summary, array $context) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alters the field widget settings summary.",
      "",
      "@param array $summary",
      "  An array of summary messages.",
      "@param array $context",
      "  An associative array with the following elements:",
      "  - widget: The widget object.",
      "  - field_definition: The field definition.",
      "  - form_mode: The form mode being configured.",
      "",
      "@see \\Drupal\\field_ui\\Form\\EntityFormDisplayEditForm::alterSettingsSummary()"
    ],
    "scope": "php"
  },
  "hook_field_widget_single_element_form_alter": {
    "prefix": "hook_field_widget_single_element_form_alter",
    "body": [
      "/**",
      " * Implements hook_field_widget_single_element_form_alter().",
      " */",
      "function hook_field_widget_single_element_form_alter(array &$element, \\Drupal\\Core\\Form\\FormStateInterface $form_state, array $context) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter forms for field widgets provided by other modules.",
      "",
      "This hook can only modify individual elements within a field widget and",
      "cannot alter the top level (parent element) for multi-value fields. In most",
      "cases, you should use hook_field_widget_complete_form_alter() instead and",
      "loop over the elements.",
      "",
      "@param array $element",
      "  The field widget form element as constructed by",
      "  \\Drupal\\Core\\Field\\WidgetBaseInterface::form().",
      "@param \\Drupal\\Core\\Form\\FormStateInterface $form_state",
      "  The current state of the form.",
      "@param array $context",
      "  An associative array containing the following key-value pairs:",
      "  - form: The form structure to which widgets are being attached. This may be",
      "    a full form structure, or a sub-element of a larger form.",
      "  - widget: The widget plugin instance.",
      "  - items: The field values, as a",
      "    \\Drupal\\Core\\Field\\FieldItemListInterface object.",
      "  - delta: The order of this item in the array of subelements (0, 1, 2, etc).",
      "  - default: A boolean indicating whether the form is being shown as a dummy",
      "    form to set default values.",
      "",
      "@see \\Drupal\\Core\\Field\\WidgetBaseInterface::form()",
      "@see \\Drupal\\Core\\Field\\WidgetBase::formSingleElement()",
      "@see hook_field_widget_single_element_WIDGET_TYPE_form_alter()",
      "@see hook_field_widget_complete_form_alter()",
      "@see https://www.drupal.org/node/3180429"
    ],
    "scope": "php"
  },
  "hook_field_widget_single_element_WIDGET_TYPE_form_alter": {
    "prefix": "hook_field_widget_single_element_WIDGET_TYPE_form_alter",
    "body": [
      "/**",
      " * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter().",
      " */",
      "function hook_field_widget_single_element_WIDGET_TYPE_form_alter(array &$element, \\Drupal\\Core\\Form\\FormStateInterface $form_state, array $context) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter widget forms for a specific widget provided by another module.",
      "",
      "Modules can implement",
      "hook_field_widget_single_element_WIDGET_TYPE_form_alter() to modify a",
      "specific widget form, rather than using",
      "hook_field_widget_single_element_form_alter() and checking the widget type.",
      "",
      "This hook can only modify individual elements within a field widget and",
      "cannot alter the top level (parent element) for multi-value fields. In most",
      "cases, you should use hook_field_widget_complete_WIDGET_TYPE_form_alter()",
      "instead and loop over the elements.",
      "",
      "@param array $element",
      "  The field widget form element as constructed by",
      "  \\Drupal\\Core\\Field\\WidgetBaseInterface::form().",
      "@param \\Drupal\\Core\\Form\\FormStateInterface $form_state",
      "  The current state of the form.",
      "@param array $context",
      "  An associative array. See hook_field_widget_single_element_form_alter()",
      "  for the structure and content of the array.",
      "",
      "@see https://www.drupal.org/node/3180429",
      "@see \\Drupal\\Core\\Field\\WidgetBaseInterface::form()",
      "@see \\Drupal\\Core\\Field\\WidgetBase::formSingleElement()",
      "@see hook_field_widget_single_element_form_alter()",
      "@see hook_field_widget_complete_WIDGET_TYPE_form_alter()"
    ],
    "scope": "php"
  },
  "hook_field_widget_third_party_settings_form": {
    "prefix": "hook_field_widget_third_party_settings_form",
    "body": [
      "/**",
      " * Implements hook_field_widget_third_party_settings_form().",
      " */",
      "function hook_field_widget_third_party_settings_form(\\Drupal\\Core\\Field\\WidgetInterface $plugin, \\Drupal\\Core\\Field\\FieldDefinitionInterface $field_definition, $form_mode, array $form, \\Drupal\\Core\\Form\\FormStateInterface $form_state) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Allow modules to add settings to field widgets provided by other modules.",
      "",
      "@param \\Drupal\\Core\\Field\\WidgetInterface $plugin",
      "  The instantiated field widget plugin.",
      "@param \\Drupal\\Core\\Field\\FieldDefinitionInterface $field_definition",
      "  The field definition.",
      "@param string $form_mode",
      "  The entity form mode.",
      "@param array $form",
      "  The (entire) configuration form array.",
      "@param \\Drupal\\Core\\Form\\FormStateInterface $form_state",
      "  The form state.",
      "",
      "@return array",
      "  Returns the form array to be built.",
      "",
      "@see \\Drupal\\field_ui\\Form\\EntityFormDisplayEditForm::thirdPartySettingsForm()"
    ],
    "scope": "php"
  },
  "hook_field_widget_WIDGET_TYPE_form_alter": {
    "prefix": "hook_field_widget_WIDGET_TYPE_form_alter",
    "body": [
      "/**",
      " * Implements hook_field_widget_WIDGET_TYPE_form_alter().",
      " */",
      "function hook_field_widget_WIDGET_TYPE_form_alter(&$element, \\Drupal\\Core\\Form\\FormStateInterface $form_state, $context) {",
      "  $0",
      "}",
      "// deprecated"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter widget forms for a specific widget provided by another module.",
      "",
      "Modules can implement hook_field_widget_WIDGET_TYPE_form_alter() to modify a",
      "specific widget form, rather than using hook_field_widget_form_alter() and",
      "checking the widget type.",
      "",
      "This hook can only modify individual elements within a field widget and",
      "cannot alter the top level (parent element) for multi-value fields. In most",
      "cases, you should use hook_field_widget_multivalue_WIDGET_TYPE_form_alter()",
      "instead and loop over the elements.",
      "",
      "@param $element",
      "  The field widget form element as constructed by",
      "  \\Drupal\\Core\\Field\\WidgetBaseInterface::form().",
      "@param $form_state",
      "  The current state of the form.",
      "@param $context",
      "  An associative array. See hook_field_widget_form_alter() for the structure",
      "  and content of the array.",
      "",
      "@deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Use",
      "  hook_field_widget_single_element_WIDGET_TYPE_form_alter instead.",
      "",
      "@see https://www.drupal.org/node/3180429",
      "@see \\Drupal\\Core\\Field\\WidgetBaseInterface::form()",
      "@see \\Drupal\\Core\\Field\\WidgetBase::formSingleElement()",
      "@see hook_field_widget_form_alter()",
      "@see hook_field_widget_multivalue_WIDGET_TYPE_form_alter()"
    ],
    "scope": "php"
  },
  "hook_file_copy": {
    "prefix": "hook_file_copy",
    "body": [
      "/**",
      " * Implements hook_file_copy().",
      " */",
      "function hook_file_copy(\\Drupal\\file\\FileInterface $file, \\Drupal\\file\\FileInterface $source) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to a file that has been copied.",
      "",
      "@param \\Drupal\\file\\FileInterface $file",
      "  The newly copied file entity.",
      "@param \\Drupal\\file\\FileInterface $source",
      "  The original file before the copy.",
      "",
      "@see \\Drupal\\file\\FileRepositoryInterface::copy()"
    ],
    "scope": "php"
  },
  "hook_file_download": {
    "prefix": "hook_file_download",
    "body": [
      "/**",
      " * Implements hook_file_download().",
      " */",
      "function hook_file_download($uri) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Control access to private file downloads and specify HTTP headers.",
      "",
      "This hook allows modules to enforce permissions on file downloads whenever",
      "Drupal is handling file download, as opposed to the web server bypassing",
      "Drupal and returning the file from a public directory. Modules can also",
      "provide headers to specify information like the file's name or MIME type.",
      "",
      "@param $uri",
      "  The URI of the file.",
      "",
      "@return string[]|int",
      "  If the user does not have permission to access the file, return -1. If the",
      "  user has permission, return an array with the appropriate headers. If the",
      "  file is not controlled by the current module, the return value should be",
      "  NULL.",
      "",
      "@see \\Drupal\\system\\FileDownloadController::download()"
    ],
    "scope": "php"
  },
  "hook_file_mimetype_mapping_alter": {
    "prefix": "hook_file_mimetype_mapping_alter",
    "body": [
      "/**",
      " * Implements hook_file_mimetype_mapping_alter().",
      " */",
      "function hook_file_mimetype_mapping_alter(&$mapping) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter MIME type mappings used to determine MIME type from a file extension.",
      "",
      "Invoked by",
      "\\Drupal\\Core\\File\\MimeType\\ExtensionMimeTypeGuesser::guessMimeType(). It is",
      "used to allow modules to add to or modify the default mapping from",
      "\\Drupal\\Core\\File\\MimeType\\ExtensionMimeTypeGuesser::$defaultMapping.",
      "",
      "@param $mapping",
      "  An array of mimetypes correlated to the extensions that relate to them.",
      "  The array has 'mimetypes' and 'extensions' elements, each of which is an",
      "  array.",
      "",
      "@see \\Drupal\\Core\\File\\MimeType\\ExtensionMimeTypeGuesser::guessMimeType()",
      "@see \\Drupal\\Core\\File\\MimeType\\ExtensionMimeTypeGuesser::$defaultMapping"
    ],
    "scope": "php"
  },
  "hook_file_move": {
    "prefix": "hook_file_move",
    "body": [
      "/**",
      " * Implements hook_file_move().",
      " */",
      "function hook_file_move(\\Drupal\\file\\FileInterface $file, \\Drupal\\file\\FileInterface $source) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to a file that has been moved.",
      "",
      "@param \\Drupal\\file\\FileInterface $file",
      "  The updated file entity after the move.",
      "@param \\Drupal\\file\\FileInterface $source",
      "  The original file entity before the move.",
      "",
      "@see \\Drupal\\file\\FileRepositoryInterface::move()"
    ],
    "scope": "php"
  },
  "hook_file_url_alter": {
    "prefix": "hook_file_url_alter",
    "body": [
      "/**",
      " * Implements hook_file_url_alter().",
      " */",
      "function hook_file_url_alter(&$uri) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the URL to a file.",
      "",
      "This hook is called from \\Drupal\\Core\\File\\FileUrlGenerator::generate(),",
      "and is called fairly frequently (10+ times per page), depending on how many",
      "files there are in a given page.",
      "If CSS and JS aggregation are disabled, this can become very frequently",
      "(50+ times per page) so performance is critical.",
      "",
      "This function should alter the URI, if it wants to rewrite the file URL.",
      "",
      "@param $uri",
      "  The URI to a file for which we need an external URL, or the path to a",
      "  shipped file."
    ],
    "scope": "php"
  },
  "hook_file_validate": {
    "prefix": "hook_file_validate",
    "body": [
      "/**",
      " * Implements hook_file_validate().",
      " */",
      "function hook_file_validate(\\Drupal\\file\\FileInterface $file) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Check that files meet a given criteria.",
      "",
      "This hook lets modules perform additional validation on files. They're able",
      "to report a failure by returning one or more error messages.",
      "",
      "@param \\Drupal\\file\\FileInterface $file",
      "  The file entity being validated.",
      "",
      "@return array",
      "  An array of error messages. If there are no problems with the file return",
      "  an empty array.",
      "",
      "@see file_validate()"
    ],
    "scope": "php"
  },
  "hook_filetransfer_info": {
    "prefix": "hook_filetransfer_info",
    "body": [
      "/**",
      " * Implements hook_filetransfer_info().",
      " */",
      "function hook_filetransfer_info() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Register information about FileTransfer classes provided by a module.",
      "",
      "The FileTransfer class allows transferring files over a specific type of",
      "connection. Core provides classes for FTP and SSH. Contributed modules are",
      "free to extend the FileTransfer base class to add other connection types,",
      "and if these classes are registered via hook_filetransfer_info(), those",
      "connection types will be available to site administrators using the Update",
      "manager when they are redirected to the authorize.php script to authorize",
      "the file operations.",
      "",
      "@return array",
      "  Nested array of information about FileTransfer classes. Each key is a",
      "  FileTransfer type (not human readable, used for form elements and",
      "  variable names, etc), and the values are subarrays that define properties",
      "  of that type. The keys in each subarray are:",
      "  - 'title': Required. The human-readable name of the connection type.",
      "  - 'class': Required. The name of the FileTransfer class. The constructor",
      "    will always be passed the full path to the root of the site that should",
      "    be used to restrict where file transfer operations can occur (the $jail)",
      "    and an array of settings values returned by the settings form.",
      "  - 'weight': Optional. Integer weight used for sorting connection types on",
      "    the authorize.php form.",
      "",
      "@see \\Drupal\\Core\\FileTransfer\\FileTransfer",
      "@see authorize.php",
      "@see hook_filetransfer_info_alter()",
      "@see drupal_get_filetransfer_info()"
    ],
    "scope": "php"
  },
  "hook_filetransfer_info_alter": {
    "prefix": "hook_filetransfer_info_alter",
    "body": [
      "/**",
      " * Implements hook_filetransfer_info_alter().",
      " */",
      "function hook_filetransfer_info_alter(&$filetransfer_info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the FileTransfer class registry.",
      "",
      "@param array $filetransfer_info",
      "  Reference to a nested array containing information about the FileTransfer",
      "  class registry.",
      "",
      "@see hook_filetransfer_info()"
    ],
    "scope": "php"
  },
  "hook_filter_format_disable": {
    "prefix": "hook_filter_format_disable",
    "body": [
      "/**",
      " * Implements hook_filter_format_disable().",
      " */",
      "function hook_filter_format_disable($format) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform actions when a text format has been disabled.",
      "",
      "@param \\Drupal\\filter\\FilterFormatInterface $format",
      "  The format object of the format being disabled."
    ],
    "scope": "php"
  },
  "hook_filter_info_alter": {
    "prefix": "hook_filter_info_alter",
    "body": [
      "/**",
      " * Implements hook_filter_info_alter().",
      " */",
      "function hook_filter_info_alter(&$info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform alterations on filter definitions.",
      "",
      "@param array $info",
      "  Array of information on filters exposed by filter plugins."
    ],
    "scope": "php"
  },
  "hook_filter_secure_image_alter": {
    "prefix": "hook_filter_secure_image_alter",
    "body": [
      "/**",
      " * Implements hook_filter_secure_image_alter().",
      " */",
      "function hook_filter_secure_image_alter(&$image) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alters images with an invalid source.",
      "",
      "When the 'Restrict images to this site' filter is enabled, any images that",
      "are not hosted on the site will be passed through this hook, most commonly to",
      "replace the invalid image with an error indicator.",
      "",
      "@param DOMElement $image",
      "  An IMG node to format, parsed from the filtered text."
    ],
    "scope": "php"
  },
  "hook_form_alter": {
    "prefix": "hook_form_alter",
    "body": [
      "/**",
      " * Implements hook_form_alter().",
      " */",
      "function hook_form_alter(&$form, \\Drupal\\Core\\Form\\FormStateInterface $form_state, $form_id) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform alterations before a form is rendered.",
      "",
      "One popular use of this hook is to add form elements to the node form. When",
      "altering a node form, the node entity can be retrieved by invoking",
      "$form_state->getFormObject()->getEntity().",
      "",
      "Implementations are responsible for adding cache contexts/tags/max-age as",
      "needed. See https://www.drupal.org/docs/8/api/cache-api/cache-api.",
      "",
      "In addition to hook_form_alter(), which is called for all forms, there are",
      "two more specific form hooks available. The first,",
      "hook_form_BASE_FORM_ID_alter(), allows targeting of a form/forms via a base",
      "form (if one exists). The second, hook_form_FORM_ID_alter(), can be used to",
      "target a specific form directly.",
      "",
      "The call order is as follows: all existing form alter functions are called",
      "for module A, then all for module B, etc., followed by all for any base",
      "theme(s), and finally for the theme itself. The module order is determined",
      "by system weight, then by module name.",
      "",
      "Within each module, form alter hooks are called in the following order:",
      "first, hook_form_alter(); second, hook_form_BASE_FORM_ID_alter(); third,",
      "hook_form_FORM_ID_alter(). So, for each module, the more general hooks are",
      "called first followed by the more specific.",
      "",
      "@param $form",
      "  Nested array of form elements that comprise the form.",
      "@param $form_state",
      "  The current state of the form. The arguments that",
      "  \\Drupal::formBuilder()->getForm() was originally called with are available",
      "  in the array $form_state->getBuildInfo()['args'].",
      "@param $form_id",
      "  A string that is the unique ID of the form, set by",
      "  Drupal\\Core\\Form\\FormInterface::getFormId().",
      "",
      "@see hook_form_BASE_FORM_ID_alter()",
      "@see hook_form_FORM_ID_alter()",
      "",
      "@ingroup form_api"
    ],
    "scope": "php"
  },
  "hook_form_BASE_FORM_ID_alter": {
    "prefix": "hook_form_BASE_FORM_ID_alter",
    "body": [
      "/**",
      " * Implements hook_form_BASE_FORM_ID_alter().",
      " */",
      "function hook_form_BASE_FORM_ID_alter(&$form, \\Drupal\\Core\\Form\\FormStateInterface $form_state, $form_id) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Provide a form-specific alteration for shared ('base') forms.",
      "",
      "Implementations are responsible for adding cache contexts/tags/max-age as",
      "needed. See https://www.drupal.org/docs/8/api/cache-api/cache-api.",
      "",
      "By default, when \\Drupal::formBuilder()->getForm() is called, Drupal looks",
      "for a function with the same name as the form ID, and uses that function to",
      "build the form. In contrast, base forms allow multiple form IDs to be mapped",
      "to a single base (also called 'factory') form function.",
      "",
      "Modules can implement hook_form_BASE_FORM_ID_alter() to modify a specific",
      "base form, rather than implementing hook_form_alter() and checking for",
      "conditions that would identify the shared form constructor.",
      "",
      "To identify the base form ID for a particular form (or to determine whether",
      "one exists) check the $form_state. The base form ID is stored under",
      "$form_state->getBuildInfo()['base_form_id'].",
      "",
      "The call order is as follows: all existing form alter functions are called",
      "for module A, then all for module B, etc., followed by all for any base",
      "theme(s), and finally for the theme itself. The module order is determined",
      "by system weight, then by module name.",
      "",
      "Within each module, form alter hooks are called in the following order:",
      "first, hook_form_alter(); second, hook_form_BASE_FORM_ID_alter(); third,",
      "hook_form_FORM_ID_alter(). So, for each module, the more general hooks are",
      "called first followed by the more specific.",
      "",
      "@param $form",
      "  Nested array of form elements that comprise the form.",
      "@param $form_state",
      "  The current state of the form.",
      "@param $form_id",
      "  String representing the name of the form itself. Typically this is the",
      "  name of the function that generated the form.",
      "",
      "@see hook_form_alter()",
      "@see hook_form_FORM_ID_alter()",
      "@see \\Drupal\\Core\\Form\\FormBuilderInterface::prepareForm()",
      "",
      "@ingroup form_api"
    ],
    "scope": "php"
  },
  "hook_form_FORM_ID_alter": {
    "prefix": "hook_form_FORM_ID_alter",
    "body": [
      "/**",
      " * Implements hook_form_FORM_ID_alter().",
      " */",
      "function hook_form_FORM_ID_alter(&$form, \\Drupal\\Core\\Form\\FormStateInterface $form_state, $form_id) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Provide a form-specific alteration instead of the global hook_form_alter().",
      "",
      "Implementations are responsible for adding cache contexts/tags/max-age as",
      "needed. See https://www.drupal.org/docs/8/api/cache-api/cache-api.",
      "",
      "Modules can implement hook_form_FORM_ID_alter() to modify a specific form,",
      "rather than implementing hook_form_alter() and checking the form ID, or",
      "using long switch statements to alter multiple forms.",
      "",
      "The call order is as follows: all existing form alter functions are called",
      "for module A, then all for module B, etc., followed by all for any base",
      "theme(s), and finally for the theme itself. The module order is determined",
      "by system weight, then by module name.",
      "",
      "Within each module, form alter hooks are called in the following order:",
      "first, hook_form_alter(); second, hook_form_BASE_FORM_ID_alter(); third,",
      "hook_form_FORM_ID_alter(). So, for each module, the more general hooks are",
      "called first followed by the more specific.",
      "",
      "@param $form",
      "  Nested array of form elements that comprise the form.",
      "@param $form_state",
      "  The current state of the form. The arguments that",
      "  \\Drupal::formBuilder()->getForm() was originally called with are available",
      "  in the array $form_state->getBuildInfo()['args'].",
      "@param $form_id",
      "  String representing the name of the form itself. Typically this is the",
      "  name of the function that generated the form.",
      "",
      "@see hook_form_alter()",
      "@see hook_form_BASE_FORM_ID_alter()",
      "@see \\Drupal\\Core\\Form\\FormBuilderInterface::prepareForm()",
      "",
      "@ingroup form_api"
    ],
    "scope": "php"
  },
  "hook_form_system_theme_settings_alter": {
    "prefix": "hook_form_system_theme_settings_alter",
    "body": [
      "/**",
      " * Implements hook_form_system_theme_settings_alter().",
      " */",
      "function hook_form_system_theme_settings_alter(&$form, \\Drupal\\Core\\Form\\FormStateInterface $form_state) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Allow themes to alter the theme-specific settings form.",
      "",
      "With this hook, themes can alter the theme-specific settings form in any way",
      "allowable by Drupal's Form API, such as adding form elements, changing",
      "default values and removing form elements. See the Form API documentation on",
      "api.drupal.org for detailed information.",
      "",
      "Note that the base theme's form alterations will be run before any sub-theme",
      "alterations.",
      "",
      "@param $form",
      "  Nested array of form elements that comprise the form.",
      "@param $form_state",
      "  The current state of the form."
    ],
    "scope": "php"
  },
  "hook_hal_relation_uri_alter": {
    "prefix": "hook_hal_relation_uri_alter",
    "body": [
      "/**",
      " * Implements hook_hal_relation_uri_alter().",
      " */",
      "function hook_hal_relation_uri_alter(&$uri, $context = []) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the HAL relation URI.",
      "",
      "Modules may wish to alter the relation URI generated for a resource based on",
      "the context of the serializer/normalizer operation.",
      "",
      "@param string $uri",
      "  The URI to alter.",
      "@param array $context",
      "  The context from the serializer/normalizer operation.",
      "",
      "@see \\Symfony\\Component\\Serializer\\SerializerInterface::serialize()",
      "@see \\Symfony\\Component\\Serializer\\SerializerInterface::deserialize()",
      "@see \\Symfony\\Component\\Serializer\\NormalizerInterface::normalize()",
      "@see \\Symfony\\Component\\Serializer\\DenormalizerInterface::denormalize()"
    ],
    "scope": "php"
  },
  "hook_hal_type_uri_alter": {
    "prefix": "hook_hal_type_uri_alter",
    "body": [
      "/**",
      " * Implements hook_hal_type_uri_alter().",
      " */",
      "function hook_hal_type_uri_alter(&$uri, $context = []) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the HAL type URI.",
      "",
      "Modules may wish to alter the type URI generated for a resource based on the",
      "context of the serializer/normalizer operation.",
      "",
      "@param string $uri",
      "  The URI to alter.",
      "@param array $context",
      "  The context from the serializer/normalizer operation.",
      "",
      "@see \\Symfony\\Component\\Serializer\\SerializerInterface::serialize()",
      "@see \\Symfony\\Component\\Serializer\\SerializerInterface::deserialize()",
      "@see \\Symfony\\Component\\Serializer\\NormalizerInterface::normalize()",
      "@see \\Symfony\\Component\\Serializer\\DenormalizerInterface::denormalize()"
    ],
    "scope": "php"
  },
  "hook_help": {
    "prefix": "hook_help",
    "body": [
      "/**",
      " * Implements hook_help().",
      " */",
      "function hook_help($route_name, \\Drupal\\Core\\Routing\\RouteMatchInterface $route_match) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Provide online user help.",
      "",
      "By implementing hook_help(), a module can make documentation available to",
      "the user for the module as a whole, or for specific pages. Help for",
      "developers should usually be provided via function header comments in the",
      "code, or in special API example files.",
      "",
      "The page-specific help information provided by this hook appears in the",
      "Help block (provided by the core Help module), if the block is displayed on",
      "that page. The module overview help information is displayed by the Help",
      "module. It can be accessed from the page at /admin/help or from the Extend",
      "page. If a module implements hook_help() the help system expects module",
      "overview help to be provided.",
      "",
      "For detailed usage examples of:",
      "- Module overview help, see content_translation_help(). Module overview",
      "  help should follow",
      "  @link https://www.drupal.org/node/632280 the standard help template. @endlink",
      "- Page-specific help using only routes, see book_help().",
      "- Page-specific help using routes and $request, see block_help().",
      "",
      "@param string $route_name",
      "  For page-specific help, use the route name as identified in the",
      "  module's routing.yml file. For module overview help, the route name",
      "  will be in the form of \"help.page.$modulename\".",
      "@param \\Drupal\\Core\\Routing\\RouteMatchInterface $route_match",
      "  The current route match. This can be used to generate different help",
      "  output for different pages that share the same route.",
      "",
      "@return string|array",
      "  A render array, localized string, or object that can be rendered into",
      "  a string, containing the help text."
    ],
    "scope": "php"
  },
  "hook_help_section_info_alter": {
    "prefix": "hook_help_section_info_alter",
    "body": [
      "/**",
      " * Implements hook_help_section_info_alter().",
      " */",
      "function hook_help_section_info_alter(array &$info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform alterations on help page section plugin definitions.",
      "",
      "Sections for the page at /admin/help are provided by plugins. This hook",
      "allows modules to alter the plugin definitions.",
      "",
      "@param array $info",
      "  Array of plugin information exposed by hook page section plugins, altered",
      "  by reference.",
      "",
      "@see \\Drupal\\help\\HelpSectionPluginInterface",
      "@see \\Drupal\\help\\Annotation\\HelpSection",
      "@see \\Drupal\\help\\HelpSectionManager"
    ],
    "scope": "php"
  },
  "hook_help_topics_info_alter": {
    "prefix": "hook_help_topics_info_alter",
    "body": [
      "/**",
      " * Implements hook_help_topics_info_alter().",
      " */",
      "function hook_help_topics_info_alter(array &$info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform alterations on help topic definitions.",
      "",
      "@param array $info",
      "  Array of help topic plugin definitions keyed by their plugin ID.",
      "",
      "@internal",
      "  Help Topics is currently experimental and should only be leveraged by",
      "  experimental modules and development releases of contributed modules.",
      "  See https://www.drupal.org/core/experimental for more information."
    ],
    "scope": "php"
  },
  "hook_hook_info": {
    "prefix": "hook_hook_info",
    "body": [
      "/**",
      " * Implements hook_hook_info().",
      " */",
      "function hook_hook_info() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Defines one or more hooks that are exposed by a module.",
      "",
      "Normally hooks do not need to be explicitly defined. However, by declaring a",
      "hook explicitly, a module may define a \"group\" for it. Modules that implement",
      "a hook may then place their implementation in either $module.module or in",
      "$module.$group.inc. If the hook is located in $module.$group.inc, then that",
      "file will be automatically loaded when needed.",
      "In general, hooks that are rarely invoked and/or are very large should be",
      "placed in a separate include file, while hooks that are very short or very",
      "frequently called should be left in the main module file so that they are",
      "always available.",
      "",
      "See system_hook_info() for all hook groups defined by Drupal core.",
      "",
      "@return array",
      "  An associative array whose keys are hook names and whose values are an",
      "  associative array containing:",
      "  - group: A string defining the group to which the hook belongs. The module",
      "    system will determine whether a file with the name $module.$group.inc",
      "    exists, and automatically load it when required."
    ],
    "scope": "php"
  },
  "hook_image_effect_info_alter": {
    "prefix": "hook_image_effect_info_alter",
    "body": [
      "/**",
      " * Implements hook_image_effect_info_alter().",
      " */",
      "function hook_image_effect_info_alter(&$effects) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the information provided in \\Drupal\\image\\Annotation\\ImageEffect.",
      "",
      "@param $effects",
      "  The array of image effects, keyed on the machine-readable effect name."
    ],
    "scope": "php"
  },
  "hook_image_style_flush": {
    "prefix": "hook_image_style_flush",
    "body": [
      "/**",
      " * Implements hook_image_style_flush().",
      " */",
      "function hook_image_style_flush($style) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to image style flushing.",
      "",
      "This hook enables modules to take effect when a style is being flushed (all",
      "images are being deleted from the server and regenerated). Any",
      "module-specific caches that contain information related to the style should",
      "be cleared using this hook. This hook is called whenever a style is updated,",
      "deleted, or any effect associated with the style is update or deleted.",
      "",
      "@param \\Drupal\\image\\ImageStyleInterface $style",
      "  The image style object that is being flushed."
    ],
    "scope": "php"
  },
  "hook_install": {
    "prefix": "hook_install",
    "body": [
      "/**",
      " * Implements hook_install().",
      " */",
      "function hook_install($is_syncing) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform setup tasks when the module is installed.",
      "",
      "If the module implements hook_schema(), the database tables will",
      "be created before this hook is fired.",
      "",
      "If the module provides a MODULE.routing.yml or alters routing information",
      "these changes will not be available when this hook is fired. If up-to-date",
      "router information is required, for example to use \\Drupal\\Core\\Url, then",
      "(preferably) use hook_modules_installed() or rebuild the router in the",
      "hook_install() implementation.",
      "",
      "Implementations of this hook are by convention declared in the module's",
      ".install file. The implementation can rely on the .module file being loaded.",
      "The hook will only be called when a module is installed. The module's schema",
      "version will be set to the module's greatest numbered update hook. Because of",
      "this, any time a hook_update_N() is added to the module, this function needs",
      "to be updated to reflect the current version of the database schema.",
      "",
      "See the @link https://www.drupal.org/node/146843 Schema API documentation",
      "@endlink for details on hook_schema and how database tables are defined.",
      "",
      "Note that since this function is called from a full bootstrap, all functions",
      "(including those in modules enabled by the current page request) are",
      "available when this hook is called. Use cases could be displaying a user",
      "message, or calling a module function necessary for initial setup, etc.",
      "",
      "Please be sure that anything added or modified in this function that can",
      "be removed during uninstall should be removed with hook_uninstall().",
      "",
      "@param bool $is_syncing",
      "  TRUE if the module is being installed as part of a configuration import. In",
      "  these cases, your hook implementation needs to carefully consider what",
      "  changes, if any, it should make. For example, it should not make any",
      "  changes to configuration objects or entities.",
      "",
      "@see \\Drupal\\Core\\Config\\ConfigInstallerInterface::isSyncing",
      "@see hook_schema()",
      "@see \\Drupal\\Core\\Extension\\ModuleInstaller::install()",
      "@see hook_uninstall()",
      "@see hook_modules_installed()"
    ],
    "scope": "php"
  },
  "hook_install_tasks": {
    "prefix": "hook_install_tasks",
    "body": [
      "/**",
      " * Implements hook_install_tasks().",
      " */",
      "function hook_install_tasks(&$install_state) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Return an array of tasks to be performed by an installation profile.",
      "",
      "Any tasks you define here will be run, in order, after the installer has",
      "finished the site configuration step but before it has moved on to the",
      "final import of languages and the end of the installation. This is invoked",
      "by install_tasks(). You can have any number of custom tasks to perform",
      "during this phase.",
      "",
      "Each task you define here corresponds to a callback function which you must",
      "separately define and which is called when your task is run. This function",
      "will receive the global installation state variable, $install_state, as",
      "input, and has the opportunity to access or modify any of its settings. See",
      "the install_state_defaults() function in the installer for the list of",
      "$install_state settings used by Drupal core.",
      "",
      "At the end of your task function, you can indicate that you want the",
      "installer to pause and display a page to the user by returning any themed",
      "output that should be displayed on that page (but see below for tasks that",
      "use the form API or batch API; the return values of these task functions are",
      "handled differently). You should also use #title within the task",
      "callback function to set a custom page title. For some tasks, however, you",
      "may want to simply do some processing and pass control to the next task",
      "without ending the page request; to indicate this, simply do not send back",
      "a return value from your task function at all. This can be used, for",
      "example, by installation profiles that need to configure certain site",
      "settings in the database without obtaining any input from the user.",
      "",
      "The task function is treated specially if it defines a form or requires",
      "batch processing; in that case, you should return either the form API",
      "definition or batch API array, as appropriate. See below for more",
      "information on the 'type' key that you must define in the task definition",
      "to inform the installer that your task falls into one of those two",
      "categories. It is important to use these APIs directly, since the installer",
      "may be run non-interactively (for example, via a command line script), all",
      "in one page request; in that case, the installer will automatically take",
      "care of submitting forms and processing batches correctly for both types of",
      "installations. You can inspect the $install_state['interactive'] boolean to",
      "see whether or not the current installation is interactive, if you need",
      "access to this information.",
      "",
      "Remember that a user installing Drupal interactively will be able to reload",
      "an installation page multiple times, so you should use \\Drupal::state() to",
      "store any data that you may need later in the installation process. Any",
      "temporary state must be removed using \\Drupal::state()->delete() before",
      "your last task has completed and control is handed back to the installer.",
      "",
      "@param array $install_state",
      "  An array of information about the current installation state.",
      "",
      "@return array",
      "  A keyed array of tasks the profile will perform during the final stage of",
      "  the installation. Each key represents the name of a function (usually a",
      "  function defined by this profile, although that is not strictly required)",
      "  that is called when that task is run. The values are associative arrays",
      "  containing the following key-value pairs (all of which are optional):",
      "  - display_name: The human-readable name of the task. This will be",
      "    displayed to the user while the installer is running, along with a list",
      "    of other tasks that are being run. Leave this unset to prevent the task",
      "    from appearing in the list.",
      "  - display: This is a boolean which can be used to provide finer-grained",
      "    control over whether or not the task will display. This is mostly useful",
      "    for tasks that are intended to display only under certain conditions;",
      "    for these tasks, you can set 'display_name' to the name that you want to",
      "    display, but then use this boolean to hide the task only when certain",
      "    conditions apply.",
      "  - type: A string representing the type of task. This parameter has three",
      "    possible values:",
      "    - normal: (default) This indicates that the task will be treated as a",
      "      regular callback function, which does its processing and optionally",
      "      returns HTML output.",
      "    - batch: This indicates that the task function will return a batch API",
      "      definition suitable for batch_set() or an array of batch definitions",
      "      suitable for consecutive batch_set() calls. The installer will then",
      "      take care of automatically running the task via batch processing.",
      "    - form: This indicates that the task function will return a standard",
      "      form API definition (and separately define validation and submit",
      "      handlers, as appropriate). The installer will then take care of",
      "      automatically directing the user through the form submission process.",
      "  - run: A constant representing the manner in which the task will be run.",
      "    This parameter has three possible values:",
      "    - INSTALL_TASK_RUN_IF_NOT_COMPLETED: (default) This indicates that the",
      "      task will run once during the installation of the profile.",
      "    - INSTALL_TASK_SKIP: This indicates that the task will not run during",
      "      the current installation page request. It can be used to skip running",
      "      an installation task when certain conditions are met, even though the",
      "      task may still show on the list of installation tasks presented to the",
      "      user.",
      "    - INSTALL_TASK_RUN_IF_REACHED: This indicates that the task will run on",
      "      each installation page request that reaches it. This is rarely",
      "      necessary for an installation profile to use; it is primarily used by",
      "      the Drupal installer for bootstrap-related tasks.",
      "  - function: Normally this does not need to be set, but it can be used to",
      "    force the installer to call a different function when the task is run",
      "    (rather than the function whose name is given by the array key). This",
      "    could be used, for example, to allow the same function to be called by",
      "    two different tasks.",
      "",
      "@see install_state_defaults()",
      "@see batch_set()",
      "@see hook_install_tasks_alter()",
      "@see install_tasks()"
    ],
    "scope": "php"
  },
  "hook_install_tasks_alter": {
    "prefix": "hook_install_tasks_alter",
    "body": [
      "/**",
      " * Implements hook_install_tasks_alter().",
      " */",
      "function hook_install_tasks_alter(&$tasks, $install_state) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the full list of installation tasks.",
      "",
      "You can use this hook to change or replace any part of the Drupal",
      "installation process that occurs after the installation profile is selected.",
      "",
      "This hook is invoked on the install profile in install_tasks().",
      "",
      "@param $tasks",
      "  An array of all available installation tasks, including those provided by",
      "  Drupal core. You can modify this array to change or replace individual",
      "  steps within the installation process.",
      "@param $install_state",
      "  An array of information about the current installation state.",
      "",
      "@see hook_install_tasks()",
      "@see install_tasks()"
    ],
    "scope": "php"
  },
  "hook_js_alter": {
    "prefix": "hook_js_alter",
    "body": [
      "/**",
      " * Implements hook_js_alter().",
      " */",
      "function hook_js_alter(&$javascript, \\Drupal\\Core\\Asset\\AttachedAssetsInterface $assets) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform necessary alterations to the JavaScript before it is presented on",
      "the page.",
      "",
      "@param $javascript",
      "  An array of all JavaScript being presented on the page.",
      "@param \\Drupal\\Core\\Asset\\AttachedAssetsInterface $assets",
      "  The assets attached to the current response.",
      "",
      "@see \\Drupal\\Core\\Asset\\AssetResolver"
    ],
    "scope": "php"
  },
  "hook_js_settings_alter": {
    "prefix": "hook_js_settings_alter",
    "body": [
      "/**",
      " * Implements hook_js_settings_alter().",
      " */",
      "function hook_js_settings_alter(array &$settings, \\Drupal\\Core\\Asset\\AttachedAssetsInterface $assets) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform necessary alterations to the JavaScript settings (drupalSettings).",
      "",
      "@param array &$settings",
      "  An array of all JavaScript settings (drupalSettings) being presented on the",
      "  page.",
      "@param \\Drupal\\Core\\Asset\\AttachedAssetsInterface $assets",
      "  The assets attached to the current response.",
      "",
      "@see \\Drupal\\Core\\Asset\\AssetResolver"
    ],
    "scope": "php"
  },
  "hook_js_settings_build": {
    "prefix": "hook_js_settings_build",
    "body": [
      "/**",
      " * Implements hook_js_settings_build().",
      " */",
      "function hook_js_settings_build(array &$settings, \\Drupal\\Core\\Asset\\AttachedAssetsInterface $assets) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the JavaScript settings (drupalSettings).",
      "",
      "@param array &$settings",
      "  An array of all JavaScript settings (drupalSettings) being presented on the",
      "  page.",
      "@param \\Drupal\\Core\\Asset\\AttachedAssetsInterface $assets",
      "  The assets attached to the current response.",
      "",
      "@see \\Drupal\\Core\\Asset\\AssetResolver",
      "",
      "The results of this hook are cached, however modules may use",
      "hook_js_settings_alter() to dynamically alter settings."
    ],
    "scope": "php"
  },
  "hook_jsonapi_entity_field_filter_access": {
    "prefix": "hook_jsonapi_entity_field_filter_access",
    "body": [
      "/**",
      " * Implements hook_jsonapi_entity_field_filter_access().",
      " */",
      "function hook_jsonapi_entity_field_filter_access(\\Drupal\\Core\\Field\\FieldDefinitionInterface $field_definition, \\Drupal\\Core\\Session\\AccountInterface $account) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Restricts filtering access to the given field.",
      "",
      "Some fields may contain sensitive information. In these cases, modules are",
      "supposed to implement hook_entity_field_access(). However, this hook receives",
      "an optional `$items` argument and often must return AccessResult::neutral()",
      "when `$items === NULL`. This is because access may or may not be allowed",
      "based on the field items or based on the entity on which the field is",
      "attached (if the user is the entity owner, for example).",
      "",
      "Since JSON:API must check field access prior to having a field item list",
      "instance available (access must be checked before a database query is made),",
      "it is not sufficiently secure to check field 'view' access alone.",
      "",
      "This hook exists so that modules which cannot return",
      "AccessResult::forbidden() from hook_entity_field_access() can still secure",
      "JSON:API requests where necessary.",
      "",
      "If a corresponding implementation of hook_entity_field_access() *can* be",
      "forbidden for one or more values of the `$items` argument, this hook *MUST*",
      "return AccessResult::forbidden().",
      "",
      "@param \\Drupal\\Core\\Field\\FieldDefinitionInterface $field_definition",
      "  The field definition of the field to be filtered upon.",
      "@param \\Drupal\\Core\\Session\\AccountInterface $account",
      "  The account for which to check access.",
      "",
      "@return \\Drupal\\Core\\Access\\AccessResultInterface",
      "  The access result."
    ],
    "scope": "php"
  },
  "hook_jsonapi_entity_filter_access": {
    "prefix": "hook_jsonapi_entity_filter_access",
    "body": [
      "/**",
      " * Implements hook_jsonapi_entity_filter_access().",
      " */",
      "function hook_jsonapi_entity_filter_access(\\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type, \\Drupal\\Core\\Session\\AccountInterface $account) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Controls access when filtering by entity data via JSON:API.",
      "",
      "This module supports filtering by resource object attributes referenced by",
      "relationship fields. For example, a site may add a \"Favorite Animal\" field",
      "to user entities, which would permit the following filtered query:",
      "@code",
      "/jsonapi/node/article?filter[uid.field_favorite_animal]=llama",
      "@endcode",
      "This query would return articles authored by users whose favorite animal is a",
      "llama. However, the information about a user's favorite animal should not be",
      "available to users without the \"access user profiles\" permission. The same",
      "must hold true even if that user is referenced as an article's author.",
      "Therefore, access to filter by this data must be restricted so that access",
      "cannot be bypassed via a JSON:API filtered query.",
      "",
      "As a rule, clients should only be able to filter by data that they can",
      "view.",
      "",
      "Conventionally, `$entity->access('view')` is how entity access is checked.",
      "This call invokes the corresponding hooks. However, these access checks",
      "require an `$entity` object. This means that they cannot be called prior to",
      "executing a database query.",
      "",
      "In order to safely enable filtering across a relationship, modules",
      "responsible for entity access must do two things:",
      "- Implement this hook (or hook_jsonapi_ENTITY_TYPE_filter_access()) and",
      "  return an array of AccessResults keyed by the named entity subsets below.",
      "- If the AccessResult::allowed() returned by the above hook does not provide",
      "  enough granularity (for example, if access depends on a bundle field value",
      "  of the entity being queried), then hook_query_TAG_alter() must be",
      "  implemented using the 'entity_access' or 'ENTITY_TYPE_access' query tag.",
      "  See node_query_node_access_alter() for an example.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type",
      "  The entity type of the entity to be filtered upon.",
      "@param \\Drupal\\Core\\Session\\AccountInterface $account",
      "  The account for which to check access.",
      "",
      "@return \\Drupal\\Core\\Access\\AccessResultInterface[]",
      "  An array keyed by a constant which identifies a subset of entities. For",
      "  each subset, the value is one of the following access results:",
      "  - AccessResult::allowed() if all entities within the subset (potentially",
      "    narrowed by hook_query_TAG_alter() implementations) are viewable.",
      "  - AccessResult::forbidden() if any entity within the subset is not",
      "    viewable.",
      "  - AccessResult::neutral() if the implementation has no opinion.",
      "  The supported subsets for which an access result may be returned are:",
      "  - JSONAPI_FILTER_AMONG_ALL: all entities of the given type.",
      "  - JSONAPI_FILTER_AMONG_PUBLISHED: all published entities of the given type.",
      "  - JSONAPI_FILTER_AMONG_ENABLED: all enabled entities of the given type.",
      "  - JSONAPI_FILTER_AMONG_OWN: all entities of the given type owned by the",
      "    user for whom access is being checked.",
      "  See the documentation of the above constants for more information about",
      "  each subset.",
      "",
      "@see hook_jsonapi_ENTITY_TYPE_filter_access()"
    ],
    "scope": "php"
  },
  "hook_jsonapi_ENTITY_TYPE_filter_access": {
    "prefix": "hook_jsonapi_ENTITY_TYPE_filter_access",
    "body": [
      "/**",
      " * Implements hook_jsonapi_ENTITY_TYPE_filter_access().",
      " */",
      "function hook_jsonapi_ENTITY_TYPE_filter_access(\\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type, \\Drupal\\Core\\Session\\AccountInterface $account) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Controls access to filtering by entity data via JSON:API.",
      "",
      "This is the entity-type-specific variant of",
      "hook_jsonapi_entity_filter_access(). For implementations with logic that is",
      "specific to a single entity type, it is recommended to implement this hook",
      "rather than the generic hook_jsonapi_entity_filter_access() hook, which is",
      "called for every entity type.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type",
      "  The entity type of the entities to be filtered upon.",
      "@param \\Drupal\\Core\\Session\\AccountInterface $account",
      "  The account for which to check access.",
      "",
      "@return \\Drupal\\Core\\Access\\AccessResultInterface[]",
      "  The array of access results, keyed by subset. See",
      "  hook_jsonapi_entity_filter_access() for details.",
      "",
      "@see hook_jsonapi_entity_filter_access()"
    ],
    "scope": "php"
  },
  "hook_language_fallback_candidates_alter": {
    "prefix": "hook_language_fallback_candidates_alter",
    "body": [
      "/**",
      " * Implements hook_language_fallback_candidates_alter().",
      " */",
      "function hook_language_fallback_candidates_alter(array &$candidates, array $context) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Allow modules to alter the language fallback candidates.",
      "",
      "@param array $candidates",
      "  An array of language codes whose order will determine the language fallback",
      "  order.",
      "@param array $context",
      "  A language fallback context.",
      "",
      "@see \\Drupal\\Core\\Language\\LanguageManagerInterface::getFallbackCandidates()"
    ],
    "scope": "php"
  },
  "hook_language_fallback_candidates_OPERATION_alter": {
    "prefix": "hook_language_fallback_candidates_OPERATION_alter",
    "body": [
      "/**",
      " * Implements hook_language_fallback_candidates_OPERATION_alter().",
      " */",
      "function hook_language_fallback_candidates_OPERATION_alter(array &$candidates, array $context) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Allow modules to alter the fallback candidates for specific operations.",
      "",
      "@param array $candidates",
      "  An array of language codes whose order will determine the language fallback",
      "  order.",
      "@param array $context",
      "  A language fallback context.",
      "",
      "@see \\Drupal\\Core\\Language\\LanguageManagerInterface::getFallbackCandidates()"
    ],
    "scope": "php"
  },
  "hook_language_negotiation_info_alter": {
    "prefix": "hook_language_negotiation_info_alter",
    "body": [
      "/**",
      " * Implements hook_language_negotiation_info_alter().",
      " */",
      "function hook_language_negotiation_info_alter(array &$negotiation_info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform alterations on language negotiation methods.",
      "",
      "@param array $negotiation_info",
      "  Array of language negotiation method definitions.",
      "",
      "@ingroup language_negotiation"
    ],
    "scope": "php"
  },
  "hook_language_switch_links_alter": {
    "prefix": "hook_language_switch_links_alter",
    "body": [
      "/**",
      " * Implements hook_language_switch_links_alter().",
      " */",
      "function hook_language_switch_links_alter(array &$links, $type, \\Drupal\\Core\\Url $url) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform alterations on language switcher links.",
      "",
      "A language switcher link may need to point to a different path or use a",
      "translated link text before going through the link generator, which will",
      "just handle the path aliases.",
      "",
      "@param array $links",
      "  Nested array of links keyed by language code.",
      "@param string $type",
      "  The language type the links will switch.",
      "@param \\Drupal\\Core\\Url $url",
      "  The URL the switch links will be relative to."
    ],
    "scope": "php"
  },
  "hook_language_types_info": {
    "prefix": "hook_language_types_info",
    "body": [
      "/**",
      " * Implements hook_language_types_info().",
      " */",
      "function hook_language_types_info() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Define language types.",
      "",
      "@return array",
      "  An associative array of language type definitions. The keys are the",
      "  identifiers, which are also used as names for global variables representing",
      "  the types in the bootstrap phase. The values are associative arrays that",
      "  may contain the following elements:",
      "  - name: The human-readable language type identifier.",
      "  - description: A description of the language type.",
      "  - locked: A boolean indicating if the user can choose whether to configure",
      "    the language type or not using the UI.",
      "  - fixed: A fixed array of language negotiation method identifiers to use to",
      "    initialize this language. If locked is set to TRUE and fixed is set, it",
      "    will always use the specified methods in the given priority order. If not",
      "    present and locked is TRUE then language-interface will be",
      "    used.",
      "",
      " @todo Rename the 'fixed' key to something more meaningful, for instance",
      "    'negotiation settings'. See https://www.drupal.org/node/2166879.",
      "",
      "@see hook_language_types_info_alter()",
      "@ingroup language_negotiation"
    ],
    "scope": "php"
  },
  "hook_language_types_info_alter": {
    "prefix": "hook_language_types_info_alter",
    "body": [
      "/**",
      " * Implements hook_language_types_info_alter().",
      " */",
      "function hook_language_types_info_alter(array &$language_types) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform alterations on language types.",
      "",
      "@param array $language_types",
      "  Array of language type definitions.",
      "",
      "@see hook_language_types_info()",
      "@ingroup language_negotiation"
    ],
    "scope": "php"
  },
  "hook_layout_alter": {
    "prefix": "hook_layout_alter",
    "body": [
      "/**",
      " * Implements hook_layout_alter().",
      " */",
      "function hook_layout_alter(&$definitions) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Allow modules to alter layout plugin definitions.",
      "",
      "@param \\Drupal\\Core\\Layout\\LayoutDefinition[] $definitions",
      "  The array of layout definitions, keyed by plugin ID."
    ],
    "scope": "php"
  },
  "hook_library_info_alter": {
    "prefix": "hook_library_info_alter",
    "body": [
      "/**",
      " * Implements hook_library_info_alter().",
      " */",
      "function hook_library_info_alter(&$libraries, $extension) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter libraries provided by an extension.",
      "",
      "Allows modules and themes to change libraries' definitions; mostly used to",
      "update a library to a newer version, while ensuring backward compatibility.",
      "In general, such manipulations should only be done to extend the library's",
      "functionality in a backward-compatible way, to avoid breaking other modules",
      "and themes that may be using the library.",
      "",
      "@param array $libraries",
      "  An associative array of libraries registered by $extension. Keyed by",
      "  internal library name and passed by reference.",
      "@param string $extension",
      "  Can either be 'core' or the machine name of the extension that registered",
      "  the libraries.",
      "",
      "@see \\Drupal\\Core\\Asset\\LibraryDiscoveryParser::parseLibraryInfo()"
    ],
    "scope": "php"
  },
  "hook_library_info_build": {
    "prefix": "hook_library_info_build",
    "body": [
      "/**",
      " * Implements hook_library_info_build().",
      " */",
      "function hook_library_info_build() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Add dynamic library definitions.",
      "",
      "Modules may implement this hook to add dynamic library definitions. Static",
      "libraries, which do not depend on any runtime information, should be declared",
      "in a modulename.libraries.yml file instead.",
      "",
      "@return array[]",
      "  An array of library definitions to register, keyed by library ID. The",
      "  library ID will be prefixed with the module name automatically.",
      "",
      "@see core.libraries.yml",
      "@see hook_library_info_alter()"
    ],
    "scope": "php"
  },
  "hook_link_alter": {
    "prefix": "hook_link_alter",
    "body": [
      "/**",
      " * Implements hook_link_alter().",
      " */",
      "function hook_link_alter(&$variables) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the parameters for links.",
      "",
      "@param array $variables",
      "  An associative array of variables defining a link. The link may be either a",
      "  \"route link\" using \\Drupal\\Core\\Utility\\LinkGenerator::link(), which is",
      "  exposed as the 'link_generator' service or a link generated by",
      "  \\Drupal\\Core\\Utility\\LinkGeneratorInterface::generate(). If the link is a",
      "  \"route link\", 'route_name' will be set; otherwise, 'path' will be set.",
      "  The following keys can be altered:",
      "  - text: The link text for the anchor tag. If the hook implementation",
      "    changes this text it needs to preserve the safeness of the original text.",
      "    Using t() or \\Drupal\\Component\\Render\\FormattableMarkup with",
      "    @placeholder is recommended as this will escape the original text if",
      "    necessary. If the resulting text is not marked safe it will be escaped.",
      "  - url_is_active: Whether or not the link points to the currently active",
      "    URL.",
      "  - url: The \\Drupal\\Core\\Url object.",
      "  - options: An associative array of additional options that will be passed",
      "    to either \\Drupal\\Core\\Utility\\UnroutedUrlAssembler::assemble() or",
      "    \\Drupal\\Core\\Routing\\UrlGenerator::generateFromRoute() to generate the",
      "    href attribute for this link, and also used when generating the link.",
      "    Defaults to an empty array. It may contain the following elements:",
      "    - 'query': An array of query key/value-pairs (without any URL-encoding) to",
      "      append to the URL.",
      "    - absolute: Whether to force the output to be an absolute link (beginning",
      "      with http:). Useful for links that will be displayed outside the site,",
      "      such as in an RSS feed. Defaults to FALSE.",
      "    - language: An optional language object. May affect the rendering of",
      "      the anchor tag, such as by adding a language prefix to the path.",
      "    - attributes: An associative array of HTML attributes to apply to the",
      "      anchor tag. If element 'class' is included, it must be an array; 'title'",
      "      must be a string; other elements are more flexible, as they just need",
      "      to work as an argument for the constructor of the class",
      "      Drupal\\Core\\Template\\Attribute($options['attributes']).",
      "",
      "@see \\Drupal\\Core\\Utility\\UnroutedUrlAssembler::assemble()",
      "@see \\Drupal\\Core\\Routing\\UrlGenerator::generateFromRoute()"
    ],
    "scope": "php"
  },
  "hook_local_tasks_alter": {
    "prefix": "hook_local_tasks_alter",
    "body": [
      "/**",
      " * Implements hook_local_tasks_alter().",
      " */",
      "function hook_local_tasks_alter(&$local_tasks) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter local tasks plugins.",
      "",
      "@param array $local_tasks",
      "  The array of local tasks plugin definitions, keyed by plugin ID.",
      "",
      "@see \\Drupal\\Core\\Menu\\LocalTaskInterface",
      "@see \\Drupal\\Core\\Menu\\LocalTaskManager",
      "",
      "@ingroup menu"
    ],
    "scope": "php"
  },
  "hook_locale_translation_projects_alter": {
    "prefix": "hook_locale_translation_projects_alter",
    "body": [
      "/**",
      " * Implements hook_locale_translation_projects_alter().",
      " */",
      "function hook_locale_translation_projects_alter(&$projects) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the list of projects to be updated by locale's interface translation.",
      "",
      "Locale module attempts to update the translation of those modules returned",
      "by \\Drupal\\update\\UpdateManager::getProjects(). Using this hook, the data",
      "returned by \\Drupal\\update\\UpdateManager::getProjects() can be altered or",
      "extended.",
      "",
      "Modules or distributions that use a dedicated translation server should use",
      "this hook to specify the interface translation server pattern, or to add",
      "additional custom/non-Drupal.org modules to the list of modules known to",
      "locale.",
      "- \"interface translation server pattern\": URL of the .po translation files",
      "  used to download the files from. The URL contains tokens which will be",
      "  replaced by appropriate values.",
      "The following tokens are available for the server pattern:",
      "- \"%core\": Core version. Value example: \"8.x\".",
      "- \"%project\": Project name. Value examples: \"drupal\", \"media_gallery\".",
      "- \"%version\": Project version release. Value examples: \"8.1\", \"8.x-1.0\".",
      "- \"%language\": Language code. Value examples: \"fr\", \"pt-pt\".",
      "",
      "@param array $projects",
      "  Project data as returned by \\Drupal\\update\\UpdateManager::getProjects().",
      "",
      "@see locale_translation_project_list()",
      "@ingroup interface_translation_properties"
    ],
    "scope": "php"
  },
  "hook_mail": {
    "prefix": "hook_mail",
    "body": [
      "/**",
      " * Implements hook_mail().",
      " */",
      "function hook_mail($key, &$message, $params) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Prepares a message based on parameters.",
      "",
      "This hook is called from MailManagerInterface->mail(). Note that hook_mail(),",
      "unlike hook_mail_alter(), is only called on the $module argument to",
      "MailManagerInterface->mail(), not all modules.",
      "",
      "@param $key",
      "  An identifier of the mail.",
      "@param $message",
      "  An array to be filled in. Elements in this array include:",
      "  - id: An ID to identify the mail sent. Look at module source code or",
      "    MailManagerInterface->mail() for possible id values.",
      "  - to: The address or addresses the message will be sent to. The",
      "    formatting of this string must comply with RFC 2822.",
      "  - subject: Subject of the email to be sent. This must not contain any",
      "    newline characters, or the mail may not be sent properly.",
      "    MailManagerInterface->mail() sets this to an empty",
      "    string when the hook is invoked.",
      "  - body: An array of lines containing the message to be sent. Drupal will",
      "    format the correct line endings for you. MailManagerInterface->mail()",
      "    sets this to an empty array when the hook is invoked. The array may",
      "    contain either strings or objects implementing",
      "    \\Drupal\\Component\\Render\\MarkupInterface.",
      "  - from: The address the message will be marked as being from, which is",
      "    set by MailManagerInterface->mail() to either a custom address or the",
      "    site-wide default email address when the hook is invoked.",
      "  - headers: Associative array containing mail headers, such as From,",
      "    Sender, MIME-Version, Content-Type, etc.",
      "    MailManagerInterface->mail() pre-fills several headers in this array.",
      "@param $params",
      "  An array of parameters supplied by the caller of",
      "  MailManagerInterface->mail().",
      "",
      "@see \\Drupal\\Core\\Mail\\MailManagerInterface::mail()"
    ],
    "scope": "php"
  },
  "hook_mail_alter": {
    "prefix": "hook_mail_alter",
    "body": [
      "/**",
      " * Implements hook_mail_alter().",
      " */",
      "function hook_mail_alter(&$message) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter an email message created with MailManagerInterface->mail().",
      "",
      "Hook hook_mail_alter() allows modification of email messages created and sent",
      "with MailManagerInterface->mail(). Usage examples include adding and/or",
      "changing message text, message fields, and message headers.",
      "",
      "Email messages sent using functions other than MailManagerInterface->mail()",
      "will not invoke hook_mail_alter(). For example, a contributed module directly",
      "calling the MailInterface->mail() or PHP mail() function will not invoke",
      "this hook. All core modules use MailManagerInterface->mail() for messaging,",
      "it is best practice but not mandatory in contributed modules.",
      "",
      "@param $message",
      "  An array containing the message data. Keys in this array include:",
      "  - 'id':",
      "    The MailManagerInterface->mail() id of the message. Look at module source",
      "    code or MailManagerInterface->mail() for possible id values.",
      "  - 'to':",
      "    The address or addresses the message will be sent to. The",
      "    formatting of this string must comply with RFC 2822.",
      "  - 'from':",
      "    The address the message will be marked as being from, which is",
      "    either a custom address or the site-wide default email address.",
      "  - 'subject':",
      "    Subject of the email to be sent. This must not contain any newline",
      "    characters, or the email may not be sent properly.",
      "  - 'body':",
      "    An array of strings or objects that implement",
      "    \\Drupal\\Component\\Render\\MarkupInterface containing the message text. The",
      "    message body is created by concatenating the individual array strings",
      "    into a single text string using \"\\n\\n\" as a separator.",
      "  - 'headers':",
      "    Associative array containing mail headers, such as From, Sender,",
      "    MIME-Version, Content-Type, etc.",
      "  - 'params':",
      "    An array of optional parameters supplied by the caller of",
      "    MailManagerInterface->mail() that is used to build the message before",
      "    hook_mail_alter() is invoked.",
      "  - 'language':",
      "    The language object used to build the message before hook_mail_alter()",
      "    is invoked.",
      "  - 'send':",
      "    Set to FALSE to abort sending this email message.",
      "",
      "@see \\Drupal\\Core\\Mail\\MailManagerInterface::mail()"
    ],
    "scope": "php"
  },
  "hook_mail_backend_info_alter": {
    "prefix": "hook_mail_backend_info_alter",
    "body": [
      "/**",
      " * Implements hook_mail_backend_info_alter().",
      " */",
      "function hook_mail_backend_info_alter(&$info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the list of mail backend plugin definitions.",
      "",
      "@param array $info",
      "  The mail backend plugin definitions to be altered.",
      "",
      "@see \\Drupal\\Core\\Annotation\\Mail",
      "@see \\Drupal\\Core\\Mail\\MailManager"
    ],
    "scope": "php"
  },
  "hook_media_source_info_alter": {
    "prefix": "hook_media_source_info_alter",
    "body": [
      "/**",
      " * Implements hook_media_source_info_alter().",
      " */",
      "function hook_media_source_info_alter(array &$sources) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alters the information provided in \\Drupal\\media\\Annotation\\MediaSource.",
      "",
      "@param array $sources",
      "  The array of media source plugin definitions, keyed by plugin ID."
    ],
    "scope": "php"
  },
  "hook_menu_links_discovered_alter": {
    "prefix": "hook_menu_links_discovered_alter",
    "body": [
      "/**",
      " * Implements hook_menu_links_discovered_alter().",
      " */",
      "function hook_menu_links_discovered_alter(&$links) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alters all the menu links discovered by the menu link plugin manager.",
      "",
      "@param array $links",
      "  The link definitions to be altered.",
      "",
      "@return array",
      "  An array of discovered menu links. Each link has a key that is the machine",
      "  name, which must be unique. By default, use the route name as the",
      "  machine name. In cases where multiple links use the same route name, such",
      "  as two links to the same page in different menus, or two links using the",
      "  same route name but different route parameters, the suggested machine name",
      "  patten is the route name followed by a dot and a unique suffix. For",
      "  example, an additional logout link might have a machine name of",
      "  user.logout.navigation, and default links provided to edit the article and",
      "  page content types could use machine names",
      "  entity.node_type.edit_form.article and entity.node_type.edit_form.page.",
      "  Since the machine name may be arbitrary, you should never write code that",
      "  assumes it is identical to the route name.",
      "",
      "  The value corresponding to each machine name key is an associative array",
      "  that may contain the following key-value pairs:",
      "  - title: (required) The title of the menu link. If this should be",
      "    translated, create a \\Drupal\\Core\\StringTranslation\\TranslatableMarkup",
      "    object.",
      "  - description: The description of the link. If this should be",
      "    translated, create a \\Drupal\\Core\\StringTranslation\\TranslatableMarkup",
      "    object.",
      "  - route_name: (optional) The route name to be used to build the path.",
      "    Either the route_name or url element must be provided.",
      "  - route_parameters: (optional) The route parameters to build the path.",
      "  - url: (optional) If you have an external link use this element instead of",
      "    providing route_name.",
      "  - parent: (optional) The machine name of the link that is this link's menu",
      "    parent.",
      "  - weight: (optional) An integer that determines the relative position of",
      "    items in the menu; higher-weighted items sink. Defaults to 0. Menu items",
      "    with the same weight are ordered alphabetically.",
      "  - menu_name: (optional) The machine name of a menu to put the link in, if",
      "    not the default Tools menu.",
      "  - expanded: (optional) If set to TRUE, and if a menu link is provided for",
      "    this menu item (as a result of other properties), then the menu link is",
      "    always expanded, equivalent to its 'always expanded' checkbox being set",
      "    in the UI.",
      "  - options: (optional) An array of options to be passed to",
      "    \\Drupal\\Core\\Utility\\LinkGeneratorInterface::generate() when generating",
      "    a link from this menu item.",
      "",
      "@ingroup menu"
    ],
    "scope": "php"
  },
  "hook_menu_local_actions_alter": {
    "prefix": "hook_menu_local_actions_alter",
    "body": [
      "/**",
      " * Implements hook_menu_local_actions_alter().",
      " */",
      "function hook_menu_local_actions_alter(&$local_actions) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter local actions plugins.",
      "",
      "@param array $local_actions",
      "  The array of local action plugin definitions, keyed by plugin ID.",
      "",
      "@see \\Drupal\\Core\\Menu\\LocalActionInterface",
      "@see \\Drupal\\Core\\Menu\\LocalActionManager",
      "",
      "@ingroup menu"
    ],
    "scope": "php"
  },
  "hook_menu_local_tasks_alter": {
    "prefix": "hook_menu_local_tasks_alter",
    "body": [
      "/**",
      " * Implements hook_menu_local_tasks_alter().",
      " */",
      "function hook_menu_local_tasks_alter(&$data, $route_name, \\Drupal\\Core\\Cache\\RefinableCacheableDependencyInterface &$cacheability) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter local tasks displayed on the page before they are rendered.",
      "",
      "This hook is invoked by \\Drupal\\Core\\Menu\\LocalTaskManager::getLocalTasks().",
      "The system-determined tabs and actions are passed in by reference. Additional",
      "tabs may be added.",
      "",
      "The local tasks are under the 'tabs' element and keyed by plugin ID.",
      "",
      "Each local task is an associative array containing:",
      "- #theme: The theme function to use to render.",
      "- #link: An associative array containing:",
      "  - title: The localized title of the link.",
      "  - url: a Url object.",
      "  - localized_options: An array of options to pass to",
      "    \\Drupal\\Core\\Utility\\LinkGeneratorInterface::generate().",
      "- #weight: The link's weight compared to other links.",
      "- #active: Whether the link should be marked as 'active'.",
      "",
      "@param array $data",
      "  An associative array containing list of (up to 2) tab levels that contain a",
      "  list of tabs keyed by their href, each one being an associative array",
      "  as described above.",
      "@param string $route_name",
      "  The route name of the page.",
      "@param \\Drupal\\Core\\Cache\\RefinableCacheableDependencyInterface $cacheability",
      "  The cacheability metadata for the current route's local tasks.",
      "",
      "@ingroup menu"
    ],
    "scope": "php"
  },
  "hook_migrate_MIGRATION_ID_prepare_row": {
    "prefix": "hook_migrate_MIGRATION_ID_prepare_row",
    "body": [
      "/**",
      " * Implements hook_migrate_MIGRATION_ID_prepare_row().",
      " */",
      "function hook_migrate_MIGRATION_ID_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Allows adding data to a row for a migration with the specified ID.",
      "",
      "This provides the same functionality as hook_migrate_prepare_row() but",
      "removes the need to check the value of $migration->id().",
      "",
      "@param \\Drupal\\migrate\\Row $row",
      "  The row being imported.",
      "@param \\Drupal\\migrate\\Plugin\\MigrateSourceInterface $source",
      "  The source migration.",
      "@param \\Drupal\\migrate\\Plugin\\MigrationInterface $migration",
      "  The current migration.",
      "",
      "@ingroup migration"
    ],
    "scope": "php"
  },
  "hook_migrate_prepare_row": {
    "prefix": "hook_migrate_prepare_row",
    "body": [
      "/**",
      " * Implements hook_migrate_prepare_row().",
      " */",
      "function hook_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Allows adding data to a row before processing it.",
      "",
      "For example, filter module used to store filter format settings in the",
      "variables table which now needs to be inside the filter format config",
      "file. So, it needs to be added here.",
      "",
      "hook_migrate_MIGRATION_ID_prepare_row() is also available.",
      "",
      "@param \\Drupal\\migrate\\Row $row",
      "  The row being imported.",
      "@param \\Drupal\\migrate\\Plugin\\MigrateSourceInterface $source",
      "  The source migration.",
      "@param \\Drupal\\migrate\\Plugin\\MigrationInterface $migration",
      "  The current migration.",
      "",
      "@ingroup migration"
    ],
    "scope": "php"
  },
  "hook_migration_plugins_alter": {
    "prefix": "hook_migration_plugins_alter",
    "body": [
      "/**",
      " * Implements hook_migration_plugins_alter().",
      " */",
      "function hook_migration_plugins_alter(array &$migrations) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Allows altering the list of discovered migration plugins.",
      "",
      "Modules are able to alter specific migrations structures or even remove or",
      "append additional migrations to the discovery. For example, this",
      "implementation filters out Drupal 6 migrations from the discovered migration",
      "list. This is done by checking the migration tags.",
      "",
      "@param array[] $migrations",
      "  An associative array of migrations keyed by migration ID. Each value is the",
      "  migration array, obtained by decoding the migration YAML file and enriched",
      "  with some meta information added during discovery phase, like migration",
      "  'class', 'provider' or '_discovered_file_path'.",
      "",
      "@ingroup migration"
    ],
    "scope": "php"
  },
  "hook_module_implements_alter": {
    "prefix": "hook_module_implements_alter",
    "body": [
      "/**",
      " * Implements hook_module_implements_alter().",
      " */",
      "function hook_module_implements_alter(&$implementations, $hook) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the registry of modules implementing a hook.",
      "",
      "This hook is invoked in \\Drupal::moduleHandler()->getImplementationInfo().",
      "A module may implement this hook in order to reorder the implementing",
      "modules, which are otherwise ordered by the module's system weight.",
      "",
      "Note that hooks invoked using \\Drupal::moduleHandler->alter() can have",
      "multiple variations(such as hook_form_alter() and hook_form_FORM_ID_alter()).",
      "\\Drupal::moduleHandler->alter() will call all such variants defined by a",
      "single module in turn. For the purposes of hook_module_implements_alter(),",
      "these variants are treated as a single hook. Thus, to ensure that your",
      "implementation of hook_form_FORM_ID_alter() is called at the right time,",
      "you will have to change the order of hook_form_alter() implementation in",
      "hook_module_implements_alter().",
      "",
      "@param $implementations",
      "  An array keyed by the module's name. The value of each item corresponds",
      "  to a $group, which is usually FALSE, unless the implementation is in a",
      "  file named $module.$group.inc.",
      "@param $hook",
      "  The name of the module hook being implemented."
    ],
    "scope": "php"
  },
  "hook_module_preinstall": {
    "prefix": "hook_module_preinstall",
    "body": [
      "/**",
      " * Implements hook_module_preinstall().",
      " */",
      "function hook_module_preinstall($module) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform necessary actions before a module is installed.",
      "",
      "@param string $module",
      "  The name of the module about to be installed."
    ],
    "scope": "php"
  },
  "hook_module_preuninstall": {
    "prefix": "hook_module_preuninstall",
    "body": [
      "/**",
      " * Implements hook_module_preuninstall().",
      " */",
      "function hook_module_preuninstall($module) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform necessary actions before a module is uninstalled.",
      "",
      "@param string $module",
      "  The name of the module about to be uninstalled."
    ],
    "scope": "php"
  },
  "hook_modules_installed": {
    "prefix": "hook_modules_installed",
    "body": [
      "/**",
      " * Implements hook_modules_installed().",
      " */",
      "function hook_modules_installed($modules, $is_syncing) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform necessary actions after modules are installed.",
      "",
      "This function differs from hook_install() in that it gives all other modules",
      "a chance to perform actions when a module is installed, whereas",
      "hook_install() is only called on the module actually being installed. See",
      "\\Drupal\\Core\\Extension\\ModuleInstaller::install() for a detailed description of",
      "the order in which install hooks are invoked.",
      "",
      "This hook should be implemented in a .module file, not in an .install file.",
      "",
      "@param $modules",
      "  An array of the modules that were installed.",
      "@param bool $is_syncing",
      "  TRUE if the module is being installed as part of a configuration import. In",
      "  these cases, your hook implementation needs to carefully consider what",
      "  changes, if any, it should make. For example, it should not make any",
      "  changes to configuration objects or entities.",
      "",
      "@see \\Drupal\\Core\\Extension\\ModuleInstaller::install()",
      "@see hook_install()"
    ],
    "scope": "php"
  },
  "hook_modules_uninstalled": {
    "prefix": "hook_modules_uninstalled",
    "body": [
      "/**",
      " * Implements hook_modules_uninstalled().",
      " */",
      "function hook_modules_uninstalled($modules, $is_syncing) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform necessary actions after modules are uninstalled.",
      "",
      "This function differs from hook_uninstall() in that it gives all other",
      "modules a chance to perform actions when a module is uninstalled, whereas",
      "hook_uninstall() is only called on the module actually being uninstalled.",
      "",
      "It is recommended that you implement this hook if your module stores",
      "data that may have been set by other modules.",
      "",
      "@param $modules",
      "  An array of the modules that were uninstalled.",
      "@param bool $is_syncing",
      "  TRUE if the module is being uninstalled as part of a configuration import.",
      "  In these cases, your hook implementation needs to carefully consider what",
      "  changes, if any, it should make. For example, it should not make any",
      "  changes to configuration objects or entities.",
      "",
      "@see hook_uninstall()"
    ],
    "scope": "php"
  },
  "hook_node_access_records": {
    "prefix": "hook_node_access_records",
    "body": [
      "/**",
      " * Implements hook_node_access_records().",
      " */",
      "function hook_node_access_records(\\Drupal\\node\\NodeInterface $node) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Set permissions for a node to be written to the database.",
      "",
      "When a node is saved, a module implementing hook_node_access_records() will",
      "be asked if it is interested in the access permissions for a node. If it is",
      "interested, it must respond with an array of permissions arrays for that",
      "node.",
      "",
      "Node access grants apply regardless of the published or unpublished status",
      "of the node. Implementations must make sure not to grant access to",
      "unpublished nodes if they don't want to change the standard access control",
      "behavior. Your module may need to create a separate access realm to handle",
      "access to unpublished nodes.",
      "",
      "Note that the grant values in the return value from your hook must be",
      "integers and not boolean TRUE and FALSE.",
      "",
      "Each permissions item in the array is an array with the following elements:",
      "- 'realm': The name of a realm that the module has defined in",
      "  hook_node_grants().",
      "- 'gid': A 'grant ID' from hook_node_grants().",
      "- 'grant_view': If set to 1 a user that has been identified as a member",
      "  of this gid within this realm can view this node. This should usually be",
      "  set to $node->isPublished(). Failure to do so may expose unpublished content",
      "  to some users.",
      "- 'grant_update': If set to 1 a user that has been identified as a member",
      "  of this gid within this realm can edit this node.",
      "- 'grant_delete': If set to 1 a user that has been identified as a member",
      "  of this gid within this realm can delete this node.",
      "- langcode: (optional) The language code of a specific translation of the",
      "  node, if any. Modules may add this key to grant different access to",
      "  different translations of a node, such that (e.g.) a particular group is",
      "  granted access to edit the Catalan version of the node, but not the",
      "  Hungarian version. If no value is provided, the langcode is set",
      "  automatically from the $node parameter and the node's original language (if",
      "  specified) is used as a fallback. Only specify multiple grant records with",
      "  different languages for a node if the site has those languages configured.",
      "",
      "A \"deny all\" grant may be used to deny all access to a particular node or",
      "node translation:",
      "@code",
      "$grants[] = array(",
      "  'realm' => 'all',",
      "  'gid' => 0,",
      "  'grant_view' => 0,",
      "  'grant_update' => 0,",
      "  'grant_delete' => 0,",
      "  'langcode' => 'ca',",
      ");",
      "@endcode",
      "Note that another module node access module could override this by granting",
      "access to one or more nodes, since grants are additive. To enforce that",
      "access is denied in a particular case, use hook_node_access_records_alter().",
      "Also note that a deny all is not written to the database; denies are",
      "implicit.",
      "",
      "@param \\Drupal\\node\\NodeInterface $node",
      "  The node that has just been saved.",
      "",
      "@return array|null",
      "  An array of grants as defined above.",
      "",
      "@see hook_node_access_records_alter()",
      "@ingroup node_access"
    ],
    "scope": "php"
  },
  "hook_node_access_records_alter": {
    "prefix": "hook_node_access_records_alter",
    "body": [
      "/**",
      " * Implements hook_node_access_records_alter().",
      " */",
      "function hook_node_access_records_alter(&$grants, \\Drupal\\node\\NodeInterface $node) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter permissions for a node before it is written to the database.",
      "",
      "Node access modules establish rules for user access to content. Node access",
      "records are stored in the {node_access} table and define which permissions",
      "are required to access a node. This hook is invoked after node access modules",
      "returned their requirements via hook_node_access_records(); doing so allows",
      "modules to modify the $grants array by reference before it is stored, so",
      "custom or advanced business logic can be applied.",
      "",
      "Upon viewing, editing or deleting a node, hook_node_grants() builds a",
      "permissions array that is compared against the stored access records. The",
      "user must have one or more matching permissions in order to complete the",
      "requested operation.",
      "",
      "A module may deny all access to a node by setting $grants to an empty array.",
      "",
      "The preferred use of this hook is in a module that bridges multiple node",
      "access modules with a configurable behavior, as shown in the example with the",
      "'is_preview' field.",
      "",
      "@param array $grants",
      "  The $grants array returned by hook_node_access_records().",
      "@param \\Drupal\\node\\NodeInterface $node",
      "  The node for which the grants were acquired.",
      "",
      "@see hook_node_access_records()",
      "@see hook_node_grants()",
      "@see hook_node_grants_alter()",
      "@ingroup node_access"
    ],
    "scope": "php"
  },
  "hook_node_grants": {
    "prefix": "hook_node_grants",
    "body": [
      "/**",
      " * Implements hook_node_grants().",
      " */",
      "function hook_node_grants(\\Drupal\\Core\\Session\\AccountInterface $account, $op) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Inform the node access system what permissions the user has.",
      "",
      "This hook is for implementation by node access modules. In this hook,",
      "the module grants a user different \"grant IDs\" within one or more",
      "\"realms\". In hook_node_access_records(), the realms and grant IDs are",
      "associated with permission to view, edit, and delete individual nodes.",
      "",
      "The realms and grant IDs can be arbitrarily defined by your node access",
      "module; it is common to use role IDs as grant IDs, but that is not required.",
      "Your module could instead maintain its own list of users, where each list has",
      "an ID. In that case, the return value of this hook would be an array of the",
      "list IDs that this user is a member of.",
      "",
      "A node access module may implement as many realms as necessary to properly",
      "define the access privileges for the nodes. Note that the system makes no",
      "distinction between published and unpublished nodes. It is the module's",
      "responsibility to provide appropriate realms to limit access to unpublished",
      "content.",
      "",
      "Node access records are stored in the {node_access} table and define which",
      "grants are required to access a node. There is a special case for the view",
      "operation -- a record with node ID 0 corresponds to a \"view all\" grant for",
      "the realm and grant ID of that record. If there are no node access modules",
      "enabled, the core node module adds a node ID 0 record for realm 'all'. Node",
      "access modules can also grant \"view all\" permission on their custom realms;",
      "for example, a module could create a record in {node_access} with:",
      "@code",
      "$record = array(",
      "  'nid' => 0,",
      "  'gid' => 888,",
      "  'realm' => 'example_realm',",
      "  'grant_view' => 1,",
      "  'grant_update' => 0,",
      "  'grant_delete' => 0,",
      ");",
      "\\Drupal::database()->insert('node_access')->fields($record)->execute();",
      "@endcode",
      "And then in its hook_node_grants() implementation, it would need to return:",
      "@code",
      "if ($op == 'view') {",
      "  $grants['example_realm'] = array(888);",
      "}",
      "@endcode",
      "If you decide to do this, be aware that the node_access_rebuild() function",
      "will erase any node ID 0 entry when it is called, so you will need to make",
      "sure to restore your {node_access} record after node_access_rebuild() is",
      "called.",
      "",
      "@param \\Drupal\\Core\\Session\\AccountInterface $account",
      "  The account object whose grants are requested.",
      "@param string $op",
      "  The node operation to be performed, such as 'view', 'update', or 'delete'.",
      "",
      "@return array",
      "  An array whose keys are \"realms\" of grants, and whose values are arrays of",
      "  the grant IDs within this realm that this user is being granted.",
      "",
      "@see node_access_view_all_nodes()",
      "@see node_access_rebuild()",
      "@ingroup node_access"
    ],
    "scope": "php"
  },
  "hook_node_grants_alter": {
    "prefix": "hook_node_grants_alter",
    "body": [
      "/**",
      " * Implements hook_node_grants_alter().",
      " */",
      "function hook_node_grants_alter(&$grants, \\Drupal\\Core\\Session\\AccountInterface $account, $op) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter user access rules when trying to view, edit or delete a node.",
      "",
      "Node access modules establish rules for user access to content.",
      "hook_node_grants() defines permissions for a user to view, edit or delete",
      "nodes by building a $grants array that indicates the permissions assigned to",
      "the user by each node access module. This hook is called to allow modules to",
      "modify the $grants array by reference, so the interaction of multiple node",
      "access modules can be altered or advanced business logic can be applied.",
      "",
      "The resulting grants are then checked against the records stored in the",
      "{node_access} table to determine if the operation may be completed.",
      "",
      "A module may deny all access to a user by setting $grants to an empty array.",
      "",
      "Developers may use this hook to either add additional grants to a user or to",
      "remove existing grants. These rules are typically based on either the",
      "permissions assigned to a user role, or specific attributes of a user",
      "account.",
      "",
      "@param array $grants",
      "  The $grants array returned by hook_node_grants().",
      "@param \\Drupal\\Core\\Session\\AccountInterface $account",
      "  The account requesting access to content.",
      "@param string $op",
      "  The operation being performed, 'view', 'update' or 'delete'.",
      "",
      "@see hook_node_grants()",
      "@see hook_node_access_records()",
      "@see hook_node_access_records_alter()",
      "@ingroup node_access"
    ],
    "scope": "php"
  },
  "hook_node_links_alter": {
    "prefix": "hook_node_links_alter",
    "body": [
      "/**",
      " * Implements hook_node_links_alter().",
      " */",
      "function hook_node_links_alter(array &$links, NodeInterface $entity, array &$context) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the links of a node.",
      "",
      "@param array &$links",
      "  A renderable array representing the node links.",
      "@param \\Drupal\\node\\NodeInterface $entity",
      "  The node being rendered.",
      "@param array &$context",
      "  Various aspects of the context in which the node links are going to be",
      "  displayed, with the following keys:",
      "  - 'view_mode': the view mode in which the node is being viewed",
      "  - 'langcode': the language in which the node is being viewed",
      "",
      "@see \\Drupal\\node\\NodeViewBuilder::renderLinks()",
      "@see \\Drupal\\node\\NodeViewBuilder::buildLinks()",
      "@see entity_crud"
    ],
    "scope": "php"
  },
  "hook_node_search_result": {
    "prefix": "hook_node_search_result",
    "body": [
      "/**",
      " * Implements hook_node_search_result().",
      " */",
      "function hook_node_search_result(\\Drupal\\node\\NodeInterface $node) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on a node being displayed as a search result.",
      "",
      "This hook is invoked from the node search plugin during search execution,",
      "after loading and rendering the node.",
      "",
      "@param \\Drupal\\node\\NodeInterface $node",
      "  The node being displayed in a search result.",
      "",
      "@return array",
      "  Extra information to be displayed with search result. This information",
      "  should be presented as an associative array. It will be concatenated with",
      "  the post information (last updated, author) in the default search result",
      "  theming.",
      "",
      "@see template_preprocess_search_result()",
      "@see search-result.html.twig",
      "",
      "@ingroup entity_crud"
    ],
    "scope": "php"
  },
  "hook_node_update_index": {
    "prefix": "hook_node_update_index",
    "body": [
      "/**",
      " * Implements hook_node_update_index().",
      " */",
      "function hook_node_update_index(\\Drupal\\node\\NodeInterface $node) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on a node being indexed for searching.",
      "",
      "This hook is invoked during search indexing, after loading, and after the",
      "result of rendering is added as $node->rendered to the node object.",
      "",
      "@param \\Drupal\\node\\NodeInterface $node",
      "  The node being indexed.",
      "",
      "@return string",
      "  Additional node information to be indexed.",
      "",
      "@ingroup entity_crud"
    ],
    "scope": "php"
  },
  "hook_oembed_resource_url_alter": {
    "prefix": "hook_oembed_resource_url_alter",
    "body": [
      "/**",
      " * Implements hook_oembed_resource_url_alter().",
      " */",
      "function hook_oembed_resource_url_alter(array &$parsed_url, \\Drupal\\media\\OEmbed\\Provider $provider) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alters an oEmbed resource URL before it is fetched.",
      "",
      "@param array $parsed_url",
      "  A parsed URL, as returned by \\Drupal\\Component\\Utility\\UrlHelper::parse().",
      "@param \\Drupal\\media\\OEmbed\\Provider $provider",
      "  The oEmbed provider for the resource.",
      "",
      "@see \\Drupal\\media\\OEmbed\\UrlResolverInterface::getResourceUrl()"
    ],
    "scope": "php"
  },
  "hook_options_list_alter": {
    "prefix": "hook_options_list_alter",
    "body": [
      "/**",
      " * Implements hook_options_list_alter().",
      " */",
      "function hook_options_list_alter(array &$options, array $context) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alters the list of options to be displayed for a field.",
      "",
      "This hook can notably be used to change the label of the empty option.",
      "",
      "@param array $options",
      "  The array of options for the field, as returned by",
      "  \\Drupal\\Core\\TypedData\\OptionsProviderInterface::getSettableOptions(). An",
      "  empty option (_none) might have been added, depending on the field",
      "  properties.",
      "@param array $context",
      "  An associative array containing:",
      "  - fieldDefinition: The field definition",
      "    (\\Drupal\\Core\\Field\\FieldDefinitionInterface).",
      "  - entity: The entity object the field is attached to",
      "    (\\Drupal\\Core\\Entity\\EntityInterface).",
      "",
      "@ingroup hooks",
      "@see hook_options_list()"
    ],
    "scope": "php"
  },
  "hook_page_attachments": {
    "prefix": "hook_page_attachments",
    "body": [
      "/**",
      " * Implements hook_page_attachments().",
      " */",
      "function hook_page_attachments(array &$attachments) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Add attachments (typically assets) to a page before it is rendered.",
      "",
      "Use this hook when you want to conditionally add attachments to a page. This",
      "hook can only be implemented by modules.",
      "",
      "If you want to alter the attachments added by other modules or if your module",
      "depends on the elements of other modules, use hook_page_attachments_alter()",
      "instead, which runs after this hook.",
      "",
      "If you try to add anything but #attached and #cache to the array, an",
      "exception is thrown.",
      "",
      "@param array &$attachments",
      "  An array that you can add attachments to.",
      "",
      "@see hook_page_attachments_alter()"
    ],
    "scope": "php"
  },
  "hook_page_attachments_alter": {
    "prefix": "hook_page_attachments_alter",
    "body": [
      "/**",
      " * Implements hook_page_attachments_alter().",
      " */",
      "function hook_page_attachments_alter(array &$attachments) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter attachments (typically assets) to a page before it is rendered.",
      "",
      "Use this hook when you want to remove or alter attachments on the page, or",
      "add attachments to the page that depend on another module's attachments (this",
      "hook runs after hook_page_attachments(). This hook can be implemented by both",
      "modules and themes.",
      "",
      "If you try to add anything but #attached and #cache to the array, an",
      "exception is thrown.",
      "",
      "@param array &$attachments",
      "  Array of all attachments provided by hook_page_attachments() implementations.",
      "",
      "@see hook_page_attachments()"
    ],
    "scope": "php"
  },
  "hook_page_bottom": {
    "prefix": "hook_page_bottom",
    "body": [
      "/**",
      " * Implements hook_page_bottom().",
      " */",
      "function hook_page_bottom(array &$page_bottom) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Add a renderable array to the bottom of the page.",
      "",
      "@param array $page_bottom",
      "  A renderable array representing the bottom of the page."
    ],
    "scope": "php"
  },
  "hook_page_top": {
    "prefix": "hook_page_top",
    "body": [
      "/**",
      " * Implements hook_page_top().",
      " */",
      "function hook_page_top(array &$page_top) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Add a renderable array to the top of the page.",
      "",
      "@param array $page_top",
      "  A renderable array representing the top of the page."
    ],
    "scope": "php"
  },
  "hook_plugin_filter_TYPE__CONSUMER_alter": {
    "prefix": "hook_plugin_filter_TYPE__CONSUMER_alter",
    "body": [
      "/**",
      " * Implements hook_plugin_filter_TYPE__CONSUMER_alter().",
      " */",
      "function hook_plugin_filter_TYPE__CONSUMER_alter(array &$definitions, array $extra) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the filtering of plugin definitions for a specific type and consumer.",
      "",
      "TYPE (e.g. \"block\", \"layout\") limits hook scope to a plugin type.",
      "CONSUMER (e.g., \"block_ui\", \"layout_builder\") limits hook scope to one or",
      "more listeners, typically provided the same module. For example,",
      "HOOK_plugin_filter_layout__layout_builder_alter() would affect",
      "Layout Builder's listeners for the 'layout' plugin type (see",
      "ChooseSectionController), while HOOK_plugin_filter_block__block_ui_alter()",
      "would affect the Block UI's listeners for the 'block' plugin type.",
      "",
      "@param \\Drupal\\Component\\Plugin\\Definition\\PluginDefinitionInterface[]|array[] $definitions",
      "  The array of plugin definitions.",
      "@param mixed[] $extra",
      "  An associative array containing additional information provided by the code",
      "  requesting the filtered definitions."
    ],
    "scope": "php"
  },
  "hook_plugin_filter_TYPE_alter": {
    "prefix": "hook_plugin_filter_TYPE_alter",
    "body": [
      "/**",
      " * Implements hook_plugin_filter_TYPE_alter().",
      " */",
      "function hook_plugin_filter_TYPE_alter(array &$definitions, array $extra, $consumer) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the filtering of plugin definitions for a specific plugin type.",
      "",
      "TYPE (e.g. \"block\", \"layout\") limits hook scope to a plugin type.",
      "For example, HOOK_plugin_filter_block_alter() would be invoked",
      "by a hook listener which specifies the 'block' plugin list,",
      "e.g., BlockLibraryController or ChooseBlockController.",
      "",
      "@param \\Drupal\\Component\\Plugin\\Definition\\PluginDefinitionInterface[]|array[] $definitions",
      "  The array of plugin definitions.",
      "@param mixed[] $extra",
      "  An associative array containing additional information provided by the code",
      "  requesting the filtered definitions.",
      "@param string $consumer",
      "  A string identifying the consumer of these plugin definitions."
    ],
    "scope": "php"
  },
  "hook_post_update_NAME": {
    "prefix": "hook_post_update_NAME",
    "body": [
      "/**",
      " * Implements hook_post_update_NAME().",
      " */",
      "function hook_post_update_NAME(&$sandbox) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Executes an update which is intended to update data, like entities.",
      "",
      "These implementations have to be placed in a MODULE.post_update.php file or",
      "a THEME.post_update.php file.",
      "",
      "These updates are executed after all hook_update_N() implementations. At this",
      "stage Drupal is already fully repaired so you can use any API as you wish.",
      "",
      "NAME can be arbitrary machine names. In contrast to hook_update_N() the",
      "alphanumeric naming of functions in the file is the only thing which ensures",
      "the execution order of those functions. If update order is mandatory,",
      "you should add numerical prefix to NAME or make it completely numerical.",
      "",
      "Drupal also ensures to not execute the same hook_post_update_NAME() function",
      "twice.",
      "",
      "@section sec_bulk Batch updates",
      "If running your update all at once could possibly cause PHP to time out, use",
      "the $sandbox parameter to indicate that the Batch API should be used for your",
      "update. In this case, your update function acts as an implementation of",
      "callback_batch_operation(), and $sandbox acts as the batch context",
      "parameter. In your function, read the state information from the previous",
      "run from $sandbox (or initialize), run a chunk of updates, save the state in",
      "$sandbox, and set $sandbox['#finished'] to a value between 0 and 1 to",
      "indicate the percent completed, or 1 if it is finished (you need to do this",
      "explicitly in each pass).",
      "",
      "See the @link batch Batch operations topic @endlink for more information on",
      "how to use the Batch API.",
      "",
      "@param array $sandbox",
      "  Stores information for batch updates. See above for more information.",
      "",
      "@return string|null",
      "  Optionally, hook_post_update_NAME() hooks may return a translated string",
      "  that will be displayed to the user after the update has completed. If no",
      "  message is returned, no message will be presented to the user.",
      "",
      "@throws \\Drupal\\Core\\Utility\\UpdateException|PDOException",
      "  In case of error, update hooks should throw an instance of",
      "  \\Drupal\\Core\\Utility\\UpdateException with a meaningful message for the",
      "  user. If a database query fails for whatever reason, it will throw a",
      "  PDOException.",
      "",
      "@ingroup update_api",
      "",
      "@see hook_update_N()",
      "@see hook_removed_post_updates()"
    ],
    "scope": "php"
  },
  "hook_preprocess": {
    "prefix": "hook_preprocess",
    "body": [
      "/**",
      " * Implements hook_preprocess().",
      " */",
      "function hook_preprocess(&$variables, $hook) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Preprocess theme variables for templates.",
      "",
      "This hook allows modules to preprocess theme variables for theme templates.",
      "It is called for all theme hooks. hook_preprocess_HOOK() can be used to",
      "preprocess variables for a specific theme hook.",
      "",
      "For more detailed information, see the",
      "@link themeable Theme system overview topic @endlink.",
      "",
      "@param $variables",
      "  The variables array (modify in place).",
      "@param $hook",
      "  The name of the theme hook."
    ],
    "scope": "php"
  },
  "hook_preprocess_HOOK": {
    "prefix": "hook_preprocess_HOOK",
    "body": [
      "/**",
      " * Implements hook_preprocess_HOOK().",
      " */",
      "function hook_preprocess_HOOK(&$variables) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Preprocess theme variables for a specific theme hook.",
      "",
      "This hook allows modules to preprocess theme variables for a specific theme",
      "hook. It should only be used if a module needs to override or add to the",
      "theme preprocessing for a theme hook it didn't define.",
      "",
      "For more detailed information, see the",
      "@link themeable Theme system overview topic @endlink.",
      "",
      "@param $variables",
      "  The variables array (modify in place)."
    ],
    "scope": "php"
  },
  "hook_query_alter": {
    "prefix": "hook_query_alter",
    "body": [
      "/**",
      " * Implements hook_query_alter().",
      " */",
      "function hook_query_alter(Drupal\\Core\\Database\\Query\\AlterableInterface $query) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform alterations to a structured query.",
      "",
      "Structured (aka dynamic) queries that have tags associated may be altered by any module",
      "before the query is executed.",
      "",
      "@param $query",
      "  A Query object describing the composite parts of a SQL query.",
      "",
      "@see hook_query_TAG_alter()",
      "@see node_query_node_access_alter()",
      "@see AlterableInterface",
      "@see SelectInterface",
      "",
      "@ingroup database"
    ],
    "scope": "php"
  },
  "hook_query_TAG_alter": {
    "prefix": "hook_query_TAG_alter",
    "body": [
      "/**",
      " * Implements hook_query_TAG_alter().",
      " */",
      "function hook_query_TAG_alter(Drupal\\Core\\Database\\Query\\AlterableInterface $query) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform alterations to a structured query for a given tag.",
      "",
      "Some common tags include:",
      "- 'entity_reference': For queries that return entities that may be referenced",
      "  by an entity reference field.",
      "- ENTITY_TYPE . '_access': For queries of entities that will be displayed in",
      "  a listing (e.g., from Views) and therefore require access control.",
      "",
      "@param $query",
      "  A Query object describing the composite parts of a SQL query.",
      "",
      "@see hook_query_alter()",
      "@see node_query_node_access_alter()",
      "@see AlterableInterface",
      "@see SelectInterface",
      "",
      "@ingroup database"
    ],
    "scope": "php"
  },
  "hook_queue_info_alter": {
    "prefix": "hook_queue_info_alter",
    "body": [
      "/**",
      " * Implements hook_queue_info_alter().",
      " */",
      "function hook_queue_info_alter(&$queues) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter cron queue information before cron runs.",
      "",
      "Called by \\Drupal\\Core\\Cron to allow modules to alter cron queue settings",
      "before any jobs are processed.",
      "",
      "@param array $queues",
      "  An array of cron queue information.",
      "",
      "@see \\Drupal\\Core\\Queue\\QueueWorkerInterface",
      "@see \\Drupal\\Core\\Annotation\\QueueWorker",
      "@see \\Drupal\\Core\\Cron"
    ],
    "scope": "php"
  },
  "hook_quickedit_editor_alter": {
    "prefix": "hook_quickedit_editor_alter",
    "body": [
      "/**",
      " * Implements hook_quickedit_editor_alter().",
      " */",
      "function hook_quickedit_editor_alter(&$editors) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Allow modules to alter in-place editor plugin metadata.",
      "",
      "This hook is called after the in-place editor plugins have been discovered,",
      "but before they are cached. Hence any alterations will be cached.",
      "",
      "@param array &$editors",
      "  An array of metadata on existing in-place editors, as collected by the",
      "  annotation discovery mechanism.",
      "",
      "@see \\Drupal\\quickedit\\Annotation\\InPlaceEditor",
      "@see \\Drupal\\quickedit\\Plugin\\EditorManager"
    ],
    "scope": "php"
  },
  "hook_quickedit_render_field": {
    "prefix": "hook_quickedit_render_field",
    "body": [
      "/**",
      " * Implements hook_quickedit_render_field().",
      " */",
      "function hook_quickedit_render_field(\\Drupal\\Core\\Entity\\EntityInterface $entity, $field_name, $view_mode_id, $langcode) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Returns a renderable array for the value of a single field in an entity.",
      "",
      "To integrate with in-place field editing when a non-standard render pipeline",
      "is used (FieldItemListInterface::view() is not sufficient to render back the",
      "field following in-place editing in the exact way it was displayed",
      "originally), implement this hook.",
      "",
      "Edit module integrates with HTML elements with data-edit-field-id attributes.",
      "For example:",
      "  data-edit-field-id=\"node/1//und/-\"",
      "After the editing is complete, this hook is invoked on the module with",
      "the custom render pipeline identifier (last part of data-edit-field-id) to",
      "re-render the field. Use the same logic used when rendering the field for",
      "the original display.",
      "",
      "The implementation should take care of invoking the prepare_view steps. It",
      "should also respect field access permissions.",
      "",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The entity containing the field to display.",
      "@param string $field_name",
      "  The name of the field to display.",
      "@param string $view_mode_id",
      "  View mode ID for the custom render pipeline this field view was destined",
      "  for. This is not a regular view mode ID for the Entity/Field API render",
      "  pipeline and is provided by the renderer module instead. An example could",
      "  be Views' render pipeline. In the example of Views, the view mode ID would",
      "  probably contain the View's ID, display and the row index. Views would",
      "  know the internal structure of this ID. The only structure imposed on this",
      "  ID is that it contains dash separated values and the first value is the",
      "  module name. Only that module's hook implementation will be invoked. Eg.",
      "  'views-...-...'.",
      "@param string $langcode",
      "  (Optional) The language code the field values are to be shown in.",
      "",
      "@return array",
      "  A renderable array for the field value.",
      "",
      "@see \\Drupal\\Core\\Field\\FieldItemListInterface::view()"
    ],
    "scope": "php"
  },
  "hook_ranking": {
    "prefix": "hook_ranking",
    "body": [
      "/**",
      " * Implements hook_ranking().",
      " */",
      "function hook_ranking() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Provide additional methods of scoring for core search results for nodes.",
      "",
      "A node's search score is used to rank it among other nodes matched by the",
      "search, with the highest-ranked nodes appearing first in the search listing.",
      "",
      "For example, a module allowing users to vote on content could expose an",
      "option to allow search results' rankings to be influenced by the average",
      "voting score of a node.",
      "",
      "All scoring mechanisms are provided as options to site administrators, and",
      "may be tweaked based on individual sites or disabled altogether if they do",
      "not make sense. Individual scoring mechanisms, if enabled, are assigned a",
      "weight from 1 to 10. The weight represents the factor of magnification of",
      "the ranking mechanism, with higher-weighted ranking mechanisms having more",
      "influence. In order for the weight system to work, each scoring mechanism",
      "must return a value between 0 and 1 for every node. That value is then",
      "multiplied by the administrator-assigned weight for the ranking mechanism,",
      "and then the weighted scores from all ranking mechanisms are added, which",
      "brings about the same result as a weighted average.",
      "",
      "@return array",
      "  An associative array of ranking data. The keys should be strings,",
      "  corresponding to the internal name of the ranking mechanism, such as",
      "  'recent', or 'comments'. The values should be arrays themselves, with the",
      "  following keys available:",
      "  - title: (required) The human readable name of the ranking mechanism.",
      "  - join: (optional) An array with information to join any additional",
      "    necessary table. This is not necessary if the table required is already",
      "    joined to by the base query, such as for the {node} table. Other tables",
      "    should use the full table name as an alias to avoid naming collisions.",
      "  - score: (required) The part of a query string to calculate the score for",
      "    the ranking mechanism based on values in the database. This does not need",
      "    to be wrapped in parentheses, as it will be done automatically; it also",
      "    does not need to take the weighted system into account, as it will be",
      "    done automatically. It does, however, need to calculate a decimal between",
      "    0 and 1; be careful not to cast the entire score to an integer by",
      "    inadvertently introducing a variable argument.",
      "  - arguments: (optional) If any arguments are required for the score, they",
      "    can be specified in an array here.",
      "",
      "@ingroup entity_crud"
    ],
    "scope": "php"
  },
  "hook_rdf_namespaces": {
    "prefix": "hook_rdf_namespaces",
    "body": [
      "/**",
      " * Implements hook_rdf_namespaces().",
      " */",
      "function hook_rdf_namespaces() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Allow modules to define namespaces for RDF mappings.",
      "",
      "Many common namespace prefixes are defined in rdf_rdf_namespaces(). However,",
      "if a module implements rdf mappings that use prefixes that are not",
      "defined in rdf_rdf_namespaces(), this hook should be used to define the new",
      "namespace prefixes.",
      "",
      "@return string[]",
      "  An associative array of namespaces where the key is the namespace prefix",
      "  and the value is the namespace URI.",
      "",
      "@ingroup rdf"
    ],
    "scope": "php"
  },
  "hook_rebuild": {
    "prefix": "hook_rebuild",
    "body": [
      "/**",
      " * Implements hook_rebuild().",
      " */",
      "function hook_rebuild() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Rebuild data based upon refreshed caches.",
      "",
      "This hook allows your module to rebuild its data based on the latest/current",
      "module data. It runs after hook_cache_flush() and after all module data has",
      "been updated.",
      "",
      "This hook is only invoked after the system has been completely cleared;",
      "i.e., all previously cached data is known to be gone and every API in the",
      "system is known to return current information, so your module can safely rely",
      "on all available data to rebuild its own.",
      "",
      "@see hook_cache_flush()",
      "@see drupal_flush_all_caches()"
    ],
    "scope": "php"
  },
  "hook_removed_post_updates": {
    "prefix": "hook_removed_post_updates",
    "body": [
      "/**",
      " * Implements hook_removed_post_updates().",
      " */",
      "function hook_removed_post_updates() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Return an array of removed hook_post_update_NAME() function names.",
      "",
      "This should be used to indicate post-update functions that have existed in",
      "some previous version of the module, but are no longer available.",
      "",
      "This implementation has to be placed in a MODULE.post_update.php file.",
      "",
      "@return string[]",
      "  An array where the keys are removed post-update function names, and the",
      "  values are the first stable version in which the update was removed.",
      "",
      "@ingroup update_api",
      "",
      "@see hook_post_update_NAME()"
    ],
    "scope": "php"
  },
  "hook_render_template": {
    "prefix": "hook_render_template",
    "body": [
      "/**",
      " * Implements hook_render_template().",
      " */",
      "function hook_render_template($template_file, $variables) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Render a template using the theme engine.",
      "",
      "It is the theme engine's responsibility to escape variables. The only",
      "exception is if a variable implements",
      "\\Drupal\\Component\\Render\\MarkupInterface. Drupal is inherently unsafe if",
      "other variables are not escaped. The helper function",
      "theme_render_and_autoescape() may be used for this.",
      "",
      "@param string $template_file",
      "  The path (relative to the Drupal root directory) to the template to be",
      "  rendered including its extension in the format 'path/to/TEMPLATE_NAME.EXT'.",
      "@param array $variables",
      "  A keyed array of variables that are available for composing the output. The",
      "  theme engine is responsible for passing all the variables to the template.",
      "  Depending on the code in the template, all or just a subset of the",
      "  variables might be used in the template.",
      "",
      "@return string",
      "  The output generated from the template. In most cases this will be a string",
      "  containing HTML markup."
    ],
    "scope": "php"
  },
  "hook_requirements": {
    "prefix": "hook_requirements",
    "body": [
      "/**",
      " * Implements hook_requirements().",
      " */",
      "function hook_requirements($phase) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Check installation requirements and do status reporting.",
      "",
      "This hook has three closely related uses, determined by the $phase argument:",
      "- Checking installation requirements ($phase == 'install').",
      "- Checking update requirements ($phase == 'update').",
      "- Status reporting ($phase == 'runtime').",
      "",
      "Note that this hook, like all others dealing with installation and updates,",
      "must reside in a module_name.install file, or it will not properly abort",
      "the installation of the module if a critical requirement is missing.",
      "",
      "During the 'install' phase, modules can for example assert that",
      "library or server versions are available or sufficient.",
      "Note that the installation of a module can happen during installation of",
      "Drupal itself (by install.php) with an installation profile or later by hand.",
      "As a consequence, install-time requirements must be checked without access",
      "to the full Drupal API, because it is not available during install.php.",
      "If a requirement has a severity of REQUIREMENT_ERROR, install.php will abort",
      "or at least the module will not install.",
      "Other severity levels have no effect on the installation.",
      "Module dependencies do not belong to these installation requirements,",
      "but should be defined in the module's .info.yml file.",
      "",
      "During installation (when $phase == 'install'), if you need to load a class",
      "from your module, you'll need to include the class file directly.",
      "",
      "The 'runtime' phase is not limited to pure installation requirements",
      "but can also be used for more general status information like maintenance",
      "tasks and security issues.",
      "The returned 'requirements' will be listed on the status report in the",
      "administration section, with indication of the severity level.",
      "Moreover, any requirement with a severity of REQUIREMENT_ERROR severity will",
      "result in a notice on the administration configuration page.",
      "",
      "@param $phase",
      "  The phase in which requirements are checked:",
      "  - install: The module is being installed.",
      "  - update: The module is enabled and update.php is run.",
      "  - runtime: The runtime requirements are being checked and shown on the",
      "    status report page.",
      "",
      "@return array",
      "  An associative array where the keys are arbitrary but must be unique (it",
      "  is suggested to use the module short name as a prefix) and the values are",
      "  themselves associative arrays with the following elements:",
      "  - title: The name of the requirement.",
      "  - value: The current value (e.g., version, time, level, etc). During",
      "    install phase, this should only be used for version numbers, do not set",
      "    it if not applicable.",
      "  - description: The description of the requirement/status.",
      "  - severity: The requirement's result/severity level, one of:",
      "    - REQUIREMENT_INFO: For info only.",
      "    - REQUIREMENT_OK: The requirement is satisfied.",
      "    - REQUIREMENT_WARNING: The requirement failed with a warning.",
      "    - REQUIREMENT_ERROR: The requirement failed with an error."
    ],
    "scope": "php"
  },
  "hook_requirements_alter": {
    "prefix": "hook_requirements_alter",
    "body": [
      "/**",
      " * Implements hook_requirements_alter().",
      " */",
      "function hook_requirements_alter(array &$requirements): void {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alters requirements data.",
      "",
      "Implementations are able to alter the title, value, description or the",
      "severity of certain requirements defined by hook_requirements()",
      "implementations or even remove such entries.",
      "",
      "@param array $requirements",
      "  The requirements data to be altered.",
      "",
      "@see hook_requirements()"
    ],
    "scope": "php"
  },
  "hook_rest_resource_alter": {
    "prefix": "hook_rest_resource_alter",
    "body": [
      "/**",
      " * Implements hook_rest_resource_alter().",
      " */",
      "function hook_rest_resource_alter(&$definitions) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the resource plugin definitions.",
      "",
      "@param array $definitions",
      "  The collection of resource definitions."
    ],
    "scope": "php"
  },
  "hook_schema": {
    "prefix": "hook_schema",
    "body": [
      "/**",
      " * Implements hook_schema().",
      " */",
      "function hook_schema() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Define the current version of the database schema.",
      "",
      "A Drupal schema definition is an array structure representing one or more",
      "tables and their related keys and indexes. A schema is defined by",
      "hook_schema() which must live in your module's .install file.",
      "",
      "The tables declared by this hook will be automatically created when the",
      "module is installed, and removed when the module is uninstalled. This happens",
      "before hook_install() is invoked, and after hook_uninstall() is invoked,",
      "respectively.",
      "",
      "By declaring the tables used by your module via an implementation of",
      "hook_schema(), these tables will be available on all supported database",
      "engines. You don't have to deal with the different SQL dialects for table",
      "creation and alteration of the supported database engines.",
      "",
      "See the Schema API Handbook at https://www.drupal.org/node/146843 for details",
      "on schema definition structures. Note that foreign key definitions are for",
      "documentation purposes only; foreign keys are not created in the database,",
      "nor are they enforced by Drupal.",
      "",
      "@return array",
      "  A schema definition structure array. For each element of the",
      "  array, the key is a table name and the value is a table structure",
      "  definition.",
      "",
      "@ingroup schemaapi"
    ],
    "scope": "php"
  },
  "hook_search_plugin_alter": {
    "prefix": "hook_search_plugin_alter",
    "body": [
      "/**",
      " * Implements hook_search_plugin_alter().",
      " */",
      "function hook_search_plugin_alter(array &$definitions) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter search plugin definitions.",
      "",
      "@param array $definitions",
      "  The array of search plugin definitions, keyed by plugin ID.",
      "",
      "@see \\Drupal\\search\\Annotation\\SearchPlugin",
      "@see \\Drupal\\search\\SearchPluginManager"
    ],
    "scope": "php"
  },
  "hook_search_preprocess": {
    "prefix": "hook_search_preprocess",
    "body": [
      "/**",
      " * Implements hook_search_preprocess().",
      " */",
      "function hook_search_preprocess($text, $langcode = NULL) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Preprocess text for search.",
      "",
      "This hook is called to preprocess both the text added to the search index",
      "and the keywords users have submitted for searching. The same processing",
      "needs to be applied to both so that searches will find matches.",
      "",
      "Possible uses:",
      "- Adding spaces between words of Chinese or Japanese text.",
      "- Stemming words down to their root words to allow matches between, for",
      "  instance, walk, walked, walking, and walks in searching.",
      "- Expanding abbreviations and acronyms that occur in text.",
      "",
      "@param string $text",
      "  The text to preprocess. This is a single piece of plain text extracted",
      "  from between two HTML tags or from the search query. It will not contain",
      "  any HTML entities or HTML tags.",
      "@param string|null $langcode",
      "  The language code for the language the text is in, if known. When this hook",
      "  is invoked during search indexing, the language will most likely be known",
      "  and passed in. This is left up to the search plugin;",
      "  \\Drupal\\node\\Plugin\\Search\\NodeSearch does pass in the node",
      "  language. However, when this hook is invoked during searching, in order to",
      "  let a module apply the same preprocessing to the search keywords and",
      "  indexed text so they will match, $langcode will be NULL. A hook",
      "  implementation can call the getCurrentLanguage() method on the",
      "  'language_manager' service to determine the current language and act",
      "  accordingly.",
      "",
      "@return string",
      "  The text after preprocessing. Note that if your module decides not to",
      "  alter the text, it should return the original text. Also, after",
      "  preprocessing, words in the text should be separated by a space.",
      "",
      "@ingroup search"
    ],
    "scope": "php"
  },
  "hook_shortcut_default_set": {
    "prefix": "hook_shortcut_default_set",
    "body": [
      "/**",
      " * Implements hook_shortcut_default_set().",
      " */",
      "function hook_shortcut_default_set(\\Drupal\\Core\\Session\\AccountInterface $account) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Return the name of a default shortcut set for the provided user account.",
      "",
      "This hook allows modules to define default shortcut sets for a particular",
      "user that differ from the site-wide default (for example, a module may want",
      "to define default shortcuts on a per-role basis).",
      "",
      "The default shortcut set is used only when the user does not have any other",
      "shortcut set explicitly assigned to them.",
      "",
      "Note that only one default shortcut set can exist per user, so when multiple",
      "modules implement this hook, the last (i.e., highest weighted) module which",
      "returns a valid shortcut set name will prevail.",
      "",
      "@param \\Drupal\\Core\\Session\\AccountInterface $account",
      "  The user account whose default shortcut set is being requested.",
      "",
      "@return string",
      "  The name of the shortcut set that this module recommends for that user, if",
      "  there is one."
    ],
    "scope": "php"
  },
  "hook_system_breadcrumb_alter": {
    "prefix": "hook_system_breadcrumb_alter",
    "body": [
      "/**",
      " * Implements hook_system_breadcrumb_alter().",
      " */",
      "function hook_system_breadcrumb_alter(\\Drupal\\Core\\Breadcrumb\\Breadcrumb &$breadcrumb, \\Drupal\\Core\\Routing\\RouteMatchInterface $route_match, array $context) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform alterations to the breadcrumb built by the BreadcrumbManager.",
      "",
      "@param \\Drupal\\Core\\Breadcrumb\\Breadcrumb $breadcrumb",
      "  A breadcrumb object returned by BreadcrumbBuilderInterface::build().",
      "@param \\Drupal\\Core\\Routing\\RouteMatchInterface $route_match",
      "  The current route match.",
      "@param array $context",
      "  May include the following key:",
      "  - builder: the instance of",
      "    \\Drupal\\Core\\Breadcrumb\\BreadcrumbBuilderInterface that constructed this",
      "    breadcrumb, or NULL if no builder acted based on the current attributes.",
      "",
      "@ingroup menu"
    ],
    "scope": "php"
  },
  "hook_system_info_alter": {
    "prefix": "hook_system_info_alter",
    "body": [
      "/**",
      " * Implements hook_system_info_alter().",
      " */",
      "function hook_system_info_alter(array &$info, \\Drupal\\Core\\Extension\\Extension $file, $type) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the information parsed from module and theme .info.yml files.",
      "",
      "This hook is invoked in \\Drupal\\Core\\Extension\\ExtensionList::doList(). A",
      "module may implement this hook in order to add to or alter the data generated",
      "by reading the .info.yml file with \\Drupal\\Core\\Extension\\InfoParser.",
      "",
      "Using implementations of this hook to make modules required by setting the",
      "$info['required'] key is discouraged. Doing so will slow down the module",
      "installation and uninstallation process. Instead, use",
      "\\Drupal\\Core\\Extension\\ModuleUninstallValidatorInterface.",
      "",
      "@param array $info",
      "  The .info.yml file contents, passed by reference so that it can be altered.",
      "@param \\Drupal\\Core\\Extension\\Extension $file",
      "  Full information about the module or theme.",
      "@param string $type",
      "  Either 'module' or 'theme', depending on the type of .info.yml file that",
      "  was passed.",
      "",
      "@see \\Drupal\\Core\\Extension\\ModuleUninstallValidatorInterface"
    ],
    "scope": "php"
  },
  "hook_system_themes_page_alter": {
    "prefix": "hook_system_themes_page_alter",
    "body": [
      "/**",
      " * Implements hook_system_themes_page_alter().",
      " */",
      "function hook_system_themes_page_alter(&$theme_groups) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alters theme operation links.",
      "",
      "@param $theme_groups",
      "  An associative array containing groups of themes.",
      "",
      "@see system_themes_page()"
    ],
    "scope": "php"
  },
  "hook_template_preprocess_default_variables_alter": {
    "prefix": "hook_template_preprocess_default_variables_alter",
    "body": [
      "/**",
      " * Implements hook_template_preprocess_default_variables_alter().",
      " */",
      "function hook_template_preprocess_default_variables_alter(&$variables) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the default, hook-independent variables for all templates.",
      "",
      "Allows modules to provide additional default template variables or manipulate",
      "existing. This hook is invoked from template_preprocess() after basic default",
      "template variables have been set up and before the next template preprocess",
      "function is invoked.",
      "",
      "Note that the default template variables are statically cached within a",
      "request. When adding a template variable that depends on other context, it is",
      "your responsibility to appropriately reset the static cache in",
      "template_preprocess() when needed:",
      "@code",
      "drupal_static_reset('template_preprocess');",
      "@endcode",
      "",
      "See user_template_preprocess_default_variables_alter() for an example.",
      "",
      "@param array $variables",
      "  An associative array of default template variables, as set up by",
      "  _template_preprocess_default_variables(). Passed by reference.",
      "",
      "@see template_preprocess()",
      "@see _template_preprocess_default_variables()"
    ],
    "scope": "php"
  },
  "hook_theme": {
    "prefix": "hook_theme",
    "body": [
      "/**",
      " * Implements hook_theme().",
      " */",
      "function hook_theme($existing, $type, $theme, $path) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Register a module or theme's theme implementations.",
      "",
      "The implementations declared by this hook specify how a particular render",
      "array is to be rendered as HTML.",
      "",
      "@param array $existing",
      "  An array of existing implementations that may be used for override",
      "  purposes. This is primarily useful for themes that may wish to examine",
      "  existing implementations to extract data (such as arguments) so that",
      "  it may properly register its own, higher priority implementations.",
      "@param $type",
      "  Whether a theme, module, etc. is being processed. This is primarily useful",
      "  so that themes tell if they are the actual theme being called or a parent",
      "  theme. May be one of:",
      "  - 'module': A module is being checked for theme implementations.",
      "  - 'base_theme_engine': A theme engine is being checked for a theme that is",
      "    a parent of the actual theme being used.",
      "  - 'theme_engine': A theme engine is being checked for the actual theme",
      "    being used.",
      "  - 'base_theme': A base theme is being checked for theme implementations.",
      "  - 'theme': The actual theme in use is being checked.",
      "@param $theme",
      "  The actual name of theme, module, etc. that is being processed.",
      "@param $path",
      "  The directory path of the theme or module, so that it doesn't need to be",
      "  looked up.",
      "",
      "@return array",
      "  An associative array of information about theme implementations. The keys",
      "  on the outer array are known as \"theme hooks\". For theme suggestions,",
      "  instead of the array key being the base theme hook, the key is a theme",
      "  suggestion name with the format 'base_hook_name__sub_hook_name'.",
      "  For render elements, the key is the machine name of the render element.",
      "  The array values are themselves arrays containing information about the",
      "  theme hook and its implementation. Each information array must contain",
      "  either a 'variables' element (for using a #theme element) or a",
      "  'render element' element (for render elements), but not both.",
      "  The following elements may be part of each information array:",
      "  - variables: Only used for #theme in render array: an array of variables,",
      "    where the array keys are the names of the variables, and the array",
      "    values are the default values if they are not given in the render array.",
      "    Template implementations receive each array key as a variable in the",
      "    template file (so they must be legal PHP/Twig variable names).",
      "  - render element: Used for render element items only: the name of the",
      "    renderable element or element tree to pass to the template. This",
      "    name is used as the name of the variable that holds the renderable",
      "    element or tree in preprocess and process functions.",
      "  - file: The file the implementation resides in. This file will be included",
      "    prior to the theme being rendered, to make sure that the preprocess",
      "    functions in this file are actually loaded.",
      "  - path: Override the path of the file to be used. Ordinarily the module or",
      "    theme path will be used, but if the file will not be in the default",
      "    path, include it here. This path should be relative to the Drupal root",
      "    directory.",
      "  - template: If specified, this is the template name. Do not add 'html.twig'",
      "    on the end of the template name. The extension will be added",
      "    automatically by the default rendering engine (which is Twig.) If 'path'",
      "    is specified, 'template' should also be specified. If 'template' is not",
      "    specified, a default template name will be assumed. For example, if a",
      "    module registers the 'search_result' theme hook, 'search-result' will be",
      "    assigned as its template name.",
      "  - base hook: Used for theme suggestions only: the base theme hook name.",
      "    Instead of this suggestion's implementation being used directly, the base",
      "    hook will be invoked with this implementation as its first suggestion.",
      "    The base hook's files will be included and the base hook's preprocess",
      "    functions will be called in addition to any suggestion's preprocess",
      "    functions. If an implementation of hook_theme_suggestions_HOOK() (where",
      "    HOOK is the base hook) changes the suggestion order, a different",
      "    suggestion may be used in place of this suggestion. If after",
      "    hook_theme_suggestions_HOOK() this suggestion remains the first",
      "    suggestion, then this suggestion's template will be used to generate the",
      "    rendered output.",
      "  - pattern: A regular expression pattern to be used to allow this theme",
      "    implementation to have a dynamic name. The convention is to use __ to",
      "    differentiate the dynamic portion of the theme. For example, to allow",
      "    forums to be themed individually, the pattern might be: 'forum__'. Then,",
      "    when the forum is rendered, following render array can be used:",
      "    @code",
      "    $render_array = array(",
      "      '#theme' => array('forum__' . $tid, 'forum'),",
      "      '#forum' => $forum,",
      "    );",
      "    @endcode",
      "  - preprocess functions: A list of functions used to preprocess this data.",
      "    Ordinarily this won't be used; it's automatically filled in. By default,",
      "    for a module this will be filled in as template_preprocess_HOOK. For",
      "    a theme this will be filled in as twig_preprocess and",
      "    twig_preprocess_HOOK as well as themename_preprocess and",
      "    themename_preprocess_HOOK.",
      "  - override preprocess functions: Set to TRUE when a theme does NOT want",
      "    the standard preprocess functions to run. This can be used to give a",
      "    theme FULL control over how variables are set. For example, if a theme",
      "    wants total control over how certain variables in the page.html.twig are",
      "    set, this can be set to true. Please keep in mind that when this is used",
      "    by a theme, that theme becomes responsible for making sure necessary",
      "    variables are set.",
      "  - type: (automatically derived) Where the theme hook is defined:",
      "    'module', 'theme_engine', or 'theme'.",
      "  - theme path: The directory path of the theme or module. If not defined,",
      "    it is determined during the registry process.",
      "",
      "@see themeable",
      "@see hook_theme_registry_alter()"
    ],
    "scope": "php"
  },
  "hook_theme_registry_alter": {
    "prefix": "hook_theme_registry_alter",
    "body": [
      "/**",
      " * Implements hook_theme_registry_alter().",
      " */",
      "function hook_theme_registry_alter(&$theme_registry) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the theme registry information returned from hook_theme().",
      "",
      "The theme registry stores information about all available theme hooks,",
      "including which callback functions those hooks will call when triggered,",
      "what template files are exposed by these hooks, and so on.",
      "",
      "Note that this hook is only executed as the theme cache is re-built.",
      "Changes here will not be visible until the next cache clear.",
      "",
      "The $theme_registry array is keyed by theme hook name, and contains the",
      "information returned from hook_theme(), as well as additional properties",
      "added by \\Drupal\\Core\\Theme\\Registry::processExtension().",
      "",
      "For example:",
      "@code",
      "$theme_registry['block_content_add_list'] = array (",
      "  'template' => 'block-content-add-list',",
      "  'path' => 'core/themes/seven/templates',",
      "  'type' => 'theme_engine',",
      "  'theme path' => 'core/themes/seven',",
      "  'includes' => array (",
      "    0 => 'core/modules/block_content/block_content.pages.inc',",
      "  ),",
      "  'variables' => array (",
      "    'content' => NULL,",
      "  ),",
      "  'preprocess functions' => array (",
      "    0 => 'template_preprocess',",
      "    1 => 'template_preprocess_block_content_add_list',",
      "    2 => 'contextual_preprocess',",
      "    3 => 'seven_preprocess_block_content_add_list',",
      "  ),",
      ");",
      "@endcode",
      "",
      "@param $theme_registry",
      "  The entire cache of theme registry information, post-processing.",
      "",
      "@see hook_theme()",
      "@see \\Drupal\\Core\\Theme\\Registry::processExtension()"
    ],
    "scope": "php"
  },
  "hook_theme_suggestions_alter": {
    "prefix": "hook_theme_suggestions_alter",
    "body": [
      "/**",
      " * Implements hook_theme_suggestions_alter().",
      " */",
      "function hook_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alters named suggestions for all theme hooks.",
      "",
      "This hook is invoked for all theme hooks, if you are targeting a specific",
      "theme hook it's best to use hook_theme_suggestions_HOOK_alter().",
      "",
      "The call order is as follows: all existing suggestion alter functions are",
      "called for module A, then all for module B, etc., followed by all for any",
      "base theme(s), and finally for the active theme. The order is",
      "determined by system weight, then by extension (module or theme) name.",
      "",
      "Within each module or theme, suggestion alter hooks are called in the",
      "following order: first, hook_theme_suggestions_alter(); second,",
      "hook_theme_suggestions_HOOK_alter(). So, for each module or theme, the more",
      "general hooks are called first followed by the more specific.",
      "",
      "In the following example, we provide an alternative template suggestion to",
      "node and taxonomy term templates based on the user being logged in.",
      "@code",
      "function MYMODULE_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {",
      "  if (\\Drupal::currentUser()->isAuthenticated() && in_array($hook, array('node', 'taxonomy_term'))) {",
      "    $suggestions[] = $hook . '__' . 'logged_in';",
      "  }",
      "}",
      "",
      "@endcode",
      "",
      "@param array $suggestions",
      "  An array of alternate, more specific names for template files.",
      "@param array $variables",
      "  An array of variables passed to the theme hook. Note that this hook is",
      "  invoked before any variable preprocessing.",
      "@param string $hook",
      "  The base hook name. For example, if '#theme' => 'node__article' is called,",
      "  then $hook will be 'node', not 'node__article'. The specific hook called",
      "  (in this case 'node__article') is available in",
      "  $variables['theme_hook_original'].",
      "",
      "@return array",
      "  An array of theme suggestions.",
      "",
      "@see hook_theme_suggestions_HOOK_alter()"
    ],
    "scope": "php"
  },
  "hook_theme_suggestions_HOOK": {
    "prefix": "hook_theme_suggestions_HOOK",
    "body": [
      "/**",
      " * Implements hook_theme_suggestions_HOOK().",
      " */",
      "function hook_theme_suggestions_HOOK(array $variables) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Provides alternate named suggestions for a specific theme hook.",
      "",
      "This hook allows modules to provide alternative template name suggestions.",
      "",
      "HOOK is the least-specific version of the hook being called. For example, if",
      "'#theme' => 'node__article' is called, then hook_theme_suggestions_node()",
      "will be invoked, not hook_theme_suggestions_node__article(). The specific",
      "hook called (in this case 'node__article') is available in",
      "$variables['theme_hook_original'].",
      "",
      "Implementations of this hook must be placed in *.module or *.theme files, or",
      "must otherwise make sure that the hook implementation is available at",
      "any given time.",
      "",
      "@todo Add @code sample.",
      "",
      "@param array $variables",
      "  An array of variables passed to the theme hook. Note that this hook is",
      "  invoked before any preprocessing.",
      "",
      "@return array",
      "  An array of theme suggestions.",
      "",
      "@see hook_theme_suggestions_HOOK_alter()"
    ],
    "scope": "php"
  },
  "hook_theme_suggestions_HOOK_alter": {
    "prefix": "hook_theme_suggestions_HOOK_alter",
    "body": [
      "/**",
      " * Implements hook_theme_suggestions_HOOK_alter().",
      " */",
      "function hook_theme_suggestions_HOOK_alter(array &$suggestions, array $variables) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alters named suggestions for a specific theme hook.",
      "",
      "This hook allows any module or theme to provide alternative template name",
      "suggestions and reorder or remove suggestions provided by",
      "hook_theme_suggestions_HOOK() or by earlier invocations of this hook.",
      "",
      "HOOK is the least-specific version of the hook being called. For example, if",
      "'#theme' => 'node__article' is called, then node_theme_suggestions_node()",
      "will be invoked, not node_theme_suggestions_node__article(). The specific",
      "hook called (in this case 'node__article') is available in",
      "$variables['theme_hook_original'].",
      "",
      "Implementations of this hook must be placed in *.module or *.theme files, or",
      "must otherwise make sure that the hook implementation is available at",
      "any given time.",
      "",
      "@todo Add @code sample.",
      "",
      "@param array $suggestions",
      "  An array of theme suggestions.",
      "@param array $variables",
      "  An array of variables passed to the theme hook. Note that this hook is",
      "  invoked before any preprocessing.",
      "",
      "@see hook_theme_suggestions_alter()",
      "@see hook_theme_suggestions_HOOK()"
    ],
    "scope": "php"
  },
  "hook_themes_installed": {
    "prefix": "hook_themes_installed",
    "body": [
      "/**",
      " * Implements hook_themes_installed().",
      " */",
      "function hook_themes_installed($theme_list) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to themes being installed.",
      "",
      "@param array $theme_list",
      "  Array containing the names of the themes being installed.",
      "",
      "@see \\Drupal\\Core\\Extension\\ThemeInstallerInterface::install()"
    ],
    "scope": "php"
  },
  "hook_themes_uninstalled": {
    "prefix": "hook_themes_uninstalled",
    "body": [
      "/**",
      " * Implements hook_themes_uninstalled().",
      " */",
      "function hook_themes_uninstalled(array $themes) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Respond to themes being uninstalled.",
      "",
      "@param array $themes",
      "  Array containing the names of the themes being uninstalled.",
      "",
      "@see \\Drupal\\Core\\Extension\\ThemeInstallerInterface::uninstall()"
    ],
    "scope": "php"
  },
  "hook_token_info": {
    "prefix": "hook_token_info",
    "body": [
      "/**",
      " * Implements hook_token_info().",
      " */",
      "function hook_token_info() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Provide information about available placeholder tokens and token types.",
      "",
      "Tokens are placeholders that can be put into text by using the syntax",
      "[type:token], where type is the machine-readable name of a token type, and",
      "token is the machine-readable name of a token within this group. This hook",
      "provides a list of types and tokens to be displayed on text editing screens,",
      "so that people editing text can see what their token options are.",
      "",
      "The actual token replacement is done by",
      "\\Drupal\\Core\\Utility\\Token::replace(), which invokes hook_tokens(). Your",
      "module will need to implement that hook in order to generate token",
      "replacements from the tokens defined here.",
      "",
      "@return array",
      "  An associative array of available tokens and token types. The outer array",
      "  has two components:",
      "  - types: An associative array of token types (groups). Each token type is",
      "    an associative array with the following components:",
      "    - name: The translated human-readable short name of the token type.",
      "    - description (optional): A translated longer description of the token",
      "      type.",
      "    - needs-data: The type of data that must be provided to",
      "      \\Drupal\\Core\\Utility\\Token::replace() in the $data argument (i.e., the",
      "      key name in $data) in order for tokens of this type to be used in the",
      "      $text being processed. For instance, if the token needs a node object,",
      "      'needs-data' should be 'node', and to use this token in",
      "      \\Drupal\\Core\\Utility\\Token::replace(), the caller needs to supply a",
      "      node object as $data['node']. Some token data can also be supplied",
      "      indirectly; for instance, a node object in $data supplies a user object",
      "      (the author of the node), allowing user tokens to be used when only",
      "      a node data object is supplied.",
      "  - tokens: An associative array of tokens. The outer array is keyed by the",
      "    group name (the same key as in the types array). Within each group of",
      "    tokens, each token item is keyed by the machine name of the token, and",
      "    each token item has the following components:",
      "    - name: The translated human-readable short name of the token.",
      "    - description (optional): A translated longer description of the token.",
      "    - type (optional): A 'needs-data' data type supplied by this token, which",
      "      should match a 'needs-data' value from another token type. For example,",
      "      the node author token provides a user object, which can then be used",
      "      for token replacement data in \\Drupal\\Core\\Utility\\Token::replace()",
      "      without having to supply a separate user object.",
      "",
      "@see hook_token_info_alter()",
      "@see hook_tokens()"
    ],
    "scope": "php"
  },
  "hook_token_info_alter": {
    "prefix": "hook_token_info_alter",
    "body": [
      "/**",
      " * Implements hook_token_info_alter().",
      " */",
      "function hook_token_info_alter(&$data) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the metadata about available placeholder tokens and token types.",
      "",
      "@param $data",
      "  The associative array of token definitions from hook_token_info().",
      "",
      "@see hook_token_info()"
    ],
    "scope": "php"
  },
  "hook_tokens": {
    "prefix": "hook_tokens",
    "body": [
      "/**",
      " * Implements hook_tokens().",
      " */",
      "function hook_tokens($type, $tokens, array $data, array $options, \\Drupal\\Core\\Render\\BubbleableMetadata $bubbleable_metadata) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Provide replacement values for placeholder tokens.",
      "",
      "This hook is invoked when someone calls",
      "\\Drupal\\Core\\Utility\\Token::replace(). That function first scans the text for",
      "[type:token] patterns, and splits the needed tokens into groups by type.",
      "Then hook_tokens() is invoked on each token-type group, allowing your module",
      "to respond by providing replacement text for any of the tokens in the group",
      "that your module knows how to process.",
      "",
      "A module implementing this hook should also implement hook_token_info() in",
      "order to list its available tokens on editing screens.",
      "",
      "@param $type",
      "  The machine-readable name of the type (group) of token being replaced, such",
      "  as 'node', 'user', or another type defined by a hook_token_info()",
      "  implementation.",
      "@param $tokens",
      "  An array of tokens to be replaced. The keys are the machine-readable token",
      "  names, and the values are the raw [type:token] strings that appeared in the",
      "  original text.",
      "@param array $data",
      "  An associative array of data objects to be used when generating replacement",
      "  values, as supplied in the $data parameter to",
      "  \\Drupal\\Core\\Utility\\Token::replace().",
      "@param array $options",
      "  An associative array of options for token replacement; see",
      "  \\Drupal\\Core\\Utility\\Token::replace() for possible values.",
      "@param \\Drupal\\Core\\Render\\BubbleableMetadata $bubbleable_metadata",
      "  The bubbleable metadata. Prior to invoking this hook,",
      "  \\Drupal\\Core\\Utility\\Token::generate() collects metadata for all of the",
      "  data objects in $data. For any data sources not in $data, but that are",
      "  used by the token replacement logic, such as global configuration (e.g.,",
      "  'system.site') and related objects (e.g., $node->getOwner()),",
      "  implementations of this hook must add the corresponding metadata.",
      "  For example:",
      "  @code",
      "    $bubbleable_metadata->addCacheableDependency(\\Drupal::config('system.site'));",
      "    $bubbleable_metadata->addCacheableDependency($node->getOwner());",
      "  @endcode",
      "",
      "  Additionally, implementations of this hook, must forward",
      "  $bubbleable_metadata to the chained tokens that they invoke.",
      "  For example:",
      "  @code",
      "    if ($created_tokens = $token_service->findWithPrefix($tokens, 'created')) {",
      "      $replacements = $token_service->generate('date', $created_tokens, array('date' => $node->getCreatedTime()), $options, $bubbleable_metadata);",
      "    }",
      "  @endcode",
      "",
      "@return array",
      "  An associative array of replacement values, keyed by the raw [type:token]",
      "  strings from the original text. The returned values must be either plain",
      "  text strings, or an object implementing MarkupInterface if they are",
      "  HTML-formatted.",
      "",
      "@see hook_token_info()",
      "@see hook_tokens_alter()"
    ],
    "scope": "php"
  },
  "hook_tokens_alter": {
    "prefix": "hook_tokens_alter",
    "body": [
      "/**",
      " * Implements hook_tokens_alter().",
      " */",
      "function hook_tokens_alter(array &$replacements, array $context, \\Drupal\\Core\\Render\\BubbleableMetadata $bubbleable_metadata) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter replacement values for placeholder tokens.",
      "",
      "@param $replacements",
      "  An associative array of replacements returned by hook_tokens().",
      "@param $context",
      "  The context in which hook_tokens() was called. An associative array with",
      "  the following keys, which have the same meaning as the corresponding",
      "  parameters of hook_tokens():",
      "  - 'type'",
      "  - 'tokens'",
      "  - 'data'",
      "  - 'options'",
      "@param \\Drupal\\Core\\Render\\BubbleableMetadata $bubbleable_metadata",
      "  The bubbleable metadata. In case you alter an existing token based upon",
      "  a data source that isn't in $context['data'], you must add that",
      "  dependency to $bubbleable_metadata.",
      "",
      "@see hook_tokens()"
    ],
    "scope": "php"
  },
  "hook_toolbar": {
    "prefix": "hook_toolbar",
    "body": [
      "/**",
      " * Implements hook_toolbar().",
      " */",
      "function hook_toolbar() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Add items to the toolbar menu.",
      "",
      "The toolbar is a container for administrative and site-global interactive",
      "components.",
      "",
      "The toolbar provides a common styling for items denoted by the",
      ".toolbar-tab class.",
      "",
      "The toolbar provides a construct called a 'tray'. The tray is a container",
      "for content. The tray may be associated with a toggle in the administration",
      "bar. The toggle shows or hides the tray and is optimized for small and",
      "large screens. To create this association, hook_toolbar() returns one or",
      "more render elements of type 'toolbar_item', containing the toggle and tray",
      "elements in its 'tab' and 'tray' properties.",
      "",
      "The following properties are available:",
      "  - 'tab': A renderable array.",
      "  - 'tray': Optional. A renderable array.",
      "  - '#weight': Optional. Integer weight used for sorting toolbar items in",
      "    administration bar area.",
      "",
      "This hook is invoked in Toolbar::preRenderToolbar().",
      "",
      "@return array",
      "  An array of toolbar items, keyed by unique identifiers such as 'home' or",
      "  'administration', or the short name of the module implementing the hook.",
      "  The corresponding value is a render element of type 'toolbar_item'.",
      "",
      "@see \\Drupal\\toolbar\\Element\\Toolbar::preRenderToolbar()",
      "@ingroup toolbar_tabs"
    ],
    "scope": "php"
  },
  "hook_toolbar_alter": {
    "prefix": "hook_toolbar_alter",
    "body": [
      "/**",
      " * Implements hook_toolbar_alter().",
      " */",
      "function hook_toolbar_alter(&$items) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the toolbar menu after hook_toolbar() is invoked.",
      "",
      "This hook is invoked by Toolbar::preRenderToolbar() immediately after",
      "hook_toolbar(). The toolbar definitions are passed in by reference. Each",
      "element of the $items array is one item returned by a module from",
      "hook_toolbar(). Additional items may be added, or existing items altered.",
      "",
      "@param $items",
      "  Associative array of toolbar menu definitions returned from hook_toolbar()."
    ],
    "scope": "php"
  },
  "hook_tour_tips_alter": {
    "prefix": "hook_tour_tips_alter",
    "body": [
      "/**",
      " * Implements hook_tour_tips_alter().",
      " */",
      "function hook_tour_tips_alter(array &$tour_tips, \\Drupal\\Core\\Entity\\EntityInterface $entity) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Allow modules to alter tour items before render.",
      "",
      "@param array $tour_tips",
      "  Array of \\Drupal\\tour\\TipPluginInterface items.",
      "@param \\Drupal\\Core\\Entity\\EntityInterface $entity",
      "  The tour which contains the $tour_tips."
    ],
    "scope": "php"
  },
  "hook_tour_tips_info_alter": {
    "prefix": "hook_tour_tips_info_alter",
    "body": [
      "/**",
      " * Implements hook_tour_tips_info_alter().",
      " */",
      "function hook_tour_tips_info_alter(&$info) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Allow modules to alter tip plugin definitions.",
      "",
      "@param array $info",
      "  The array of tip plugin definitions, keyed by plugin ID.",
      "",
      "@see \\Drupal\\tour\\Annotation\\Tip"
    ],
    "scope": "php"
  },
  "hook_transliteration_overrides_alter": {
    "prefix": "hook_transliteration_overrides_alter",
    "body": [
      "/**",
      " * Implements hook_transliteration_overrides_alter().",
      " */",
      "function hook_transliteration_overrides_alter(&$overrides, $langcode) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Provide language-specific overrides for transliteration.",
      "",
      "If the overrides you want to provide are standard for your language, consider",
      "providing a patch for the Drupal Core transliteration system instead of using",
      "this hook. This hook can be used temporarily until Drupal Core's",
      "transliteration tables are fixed, or for sites that want to use a",
      "non-standard transliteration system.",
      "",
      "@param array $overrides",
      "  Associative array of language-specific overrides whose keys are integer",
      "  Unicode character codes, and whose values are the transliterations of those",
      "  characters in the given language, to override default transliterations.",
      "@param string $langcode",
      "  The code for the language that is being transliterated.",
      "",
      "@ingroup hooks"
    ],
    "scope": "php"
  },
  "hook_uninstall": {
    "prefix": "hook_uninstall",
    "body": [
      "/**",
      " * Implements hook_uninstall().",
      " */",
      "function hook_uninstall($is_syncing) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Remove any information that the module sets.",
      "",
      "The information that the module should remove includes:",
      "- state that the module has set using \\Drupal::state()",
      "- modifications to existing tables",
      "",
      "The module should not remove its entry from the module configuration.",
      "Database tables defined by hook_schema() will be removed automatically.",
      "",
      "The uninstall hook must be implemented in the module's .install file. It",
      "will fire when the module gets uninstalled but before the module's database",
      "tables are removed, allowing your module to query its own tables during",
      "this routine.",
      "",
      "Adding custom logic to hook_uninstall implementations to check for",
      "criteria before uninstalling, does not take advantage of the module",
      "uninstall page UI. Instead, use",
      "\\Drupal\\Core\\Extension\\ModuleUninstallValidatorInterface.",
      "",
      "@param bool $is_syncing",
      "  TRUE if the module is being uninstalled as part of a configuration import.",
      "  In these cases, your hook implementation needs to carefully consider what",
      "  changes, if any, it should make. For example, it should not make any",
      "  changes to configuration objects or entities.",
      "",
      "@see hook_install()",
      "@see hook_schema()",
      "@see hook_modules_uninstalled()",
      "@see \\Drupal\\Core\\Extension\\ModuleUninstallValidatorInterface"
    ],
    "scope": "php"
  },
  "hook_update_dependencies": {
    "prefix": "hook_update_dependencies",
    "body": [
      "/**",
      " * Implements hook_update_dependencies().",
      " */",
      "function hook_update_dependencies() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Return an array of information about module update dependencies.",
      "",
      "This can be used to indicate update functions from other modules that your",
      "module's update functions depend on, or vice versa. It is used by the update",
      "system to determine the appropriate order in which updates should be run, as",
      "well as to search for missing dependencies.",
      "",
      "Implementations of this hook should be placed in a mymodule.install file in",
      "the same directory as mymodule.module.",
      "",
      "@return array",
      "  A multidimensional array containing information about the module update",
      "  dependencies. The first two levels of keys represent the module and update",
      "  number (respectively) for which information is being returned, and the",
      "  value is an array of information about that update's dependencies. Within",
      "  this array, each key represents a module, and each value represents the",
      "  number of an update function within that module. In the event that your",
      "  update function depends on more than one update from a particular module,",
      "  you should always list the highest numbered one here (since updates within",
      "  a given module always run in numerical order).",
      "",
      "@ingroup update_api",
      "",
      "@see update_resolve_dependencies()",
      "@see hook_update_N()"
    ],
    "scope": "php"
  },
  "hook_update_last_removed": {
    "prefix": "hook_update_last_removed",
    "body": [
      "/**",
      " * Implements hook_update_last_removed().",
      " */",
      "function hook_update_last_removed() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Return a number which is no longer available as hook_update_N().",
      "",
      "If you remove some update functions from your mymodule.install file, you",
      "should notify Drupal of those missing functions. This way, Drupal can",
      "ensure that no update is accidentally skipped.",
      "",
      "Implementations of this hook should be placed in a mymodule.install file in",
      "the same directory as mymodule.module.",
      "",
      "@return int",
      "  An integer, corresponding to hook_update_N() which has been removed from",
      "  mymodule.install.",
      "",
      "@ingroup update_api",
      "",
      "@see hook_update_N()"
    ],
    "scope": "php"
  },
  "hook_update_N": {
    "prefix": "hook_update_N",
    "body": [
      "/**",
      " * Implements hook_update_N().",
      " */",
      "function hook_update_N(&$sandbox) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Perform a single update between minor versions.",
      "",
      "Hook hook_update_N() can only be used to update between minor versions of a",
      "module. To upgrade between major versions of Drupal (for example, between",
      "Drupal 7 and 8), use the @link migrate Migrate API @endlink instead.",
      "",
      "@section sec_naming Naming and documenting your function",
      "For each change in a module that requires one or more actions to be performed",
      "when updating a site, add a new implementation of hook_update_N() to your",
      "mymodule.install file (assuming mymodule is the machine name of your module).",
      "Implementations of hook_update_N() are named (module name)_update_(number).",
      "The numbers are normally composed of three parts:",
      "- 1 or 2 digits for Drupal core compatibility (Drupal 8, 9, 10, etc.). This",
      "  convention must be followed.",
      "- 1 digit for your module's major release version; for example, for 8.x-1.*",
      "  use 1, for 8.x-2.* use 2, for Core 8.0.x use 0, and for Core 8.1.x use 1.",
      "  This convention is optional but suggested for clarity.",
      "- 2 digits for sequential counting, starting with 01. Note that the x000",
      "  number can never be used: the lowest update number that will be recognized",
      "  and run for major version x is x001.",
      "Examples:",
      "- node_update_8001(): The first update for the Drupal 8.0.x version of the",
      "  Drupal Core node module.",
      "- mymodule_update_8101(): The first update for your custom or contributed",
      "  module's 8.x-1.x versions.",
      "- mymodule_update_8201(): The first update for the 8.x-2.x versions.",
      "",
      "Never renumber update functions. The numeric part of the hook implementation",
      "function is stored in the database to keep track of which updates have run,",
      "so it is important to maintain this information consistently.",
      "",
      "The documentation block preceding this function is stripped of newlines and",
      "used as the description for the update on the pending updates task list,",
      "which users will see when they run the update.php script.",
      "",
      "@section sec_notes Notes about the function body",
      "Writing hook_update_N() functions is tricky. There are several reasons why",
      "this is the case:",
      "- You do not know when updates will be run: someone could be keeping up with",
      "  every update and run them when the database and code are in the same state",
      "  as when you wrote your update function, or they could have waited until a",
      "  few more updates have come out, and run several at the same time.",
      "- You do not know the state of other modules' updates either.",
      "- Other modules can use hook_update_dependencies() to run updates between",
      "  your module's updates, so you also cannot count on your functions running",
      "  right after one another.",
      "- You do not know what environment your update will run in (which modules",
      "  are installed, whether certain hooks are implemented or not, whether",
      "  services are overridden, etc.).",
      "",
      "Because of these reasons, you'll need to use care in writing your update",
      "function. Some things to think about:",
      "- Never assume that the database schema is the same when the update will run",
      "  as it is when you wrote the update function. So, when updating a database",
      "  table or field, put the schema information you want to update to directly",
      "  into your function instead of calling your hook_schema() function to",
      "  retrieve it (this is one case where the right thing to do is copy and paste",
      "  the code).",
      "- Never assume that the configuration schema is the same when the update will",
      "  run as it is when you wrote the update function. So, when saving",
      "  configuration, use the $has_trusted_data = TRUE parameter so that schema is",
      "  ignored, and make sure that the configuration data you are saving matches",
      "  the configuration schema at the time when you write the update function",
      "  (later updates may change it again to match new schema changes).",
      "- Never assume your field or entity type definitions are the same when the",
      "  update will run as they are when you wrote the update function. Always",
      "  retrieve the correct version via",
      "  \\Drupal::entityDefinitionUpdateManager()::getEntityType() or",
      "  \\Drupal::entityDefinitionUpdateManager()::getFieldStorageDefinition(). When",
      "  adding a new definition always replicate it in the update function body as",
      "  you would do with a schema definition.",
      "- Be careful about API functions and especially CRUD operations that you use",
      "  in your update function. If they invoke hooks or use services, they may",
      "  not behave as expected, and it may actually not be appropriate to use the",
      "  normal API functions that invoke all the hooks, use the database schema,",
      "  and/or use services in an update function -- you may need to switch to",
      "  using a more direct method (database query, etc.).",
      "- In particular, loading, saving, or performing any other CRUD operation on",
      "  an entity is never safe to do (they always involve hooks and services).",
      "- Never rebuild the router during an update function.",
      "",
      "The following actions are examples of things that are safe to do during",
      "updates:",
      "- Cache invalidation.",
      "- Using \\Drupal::configFactory()->getEditable() and \\Drupal::config(), as",
      "  long as you make sure that your update data matches the schema, and you",
      "  use the $has_trusted_data argument in the save operation.",
      "- Marking a container for rebuild.",
      "- Using the API provided by \\Drupal::entityDefinitionUpdateManager() to",
      "  update the entity schema based on changes in entity type or field",
      "  definitions provided by your module.",
      "",
      "See https://www.drupal.org/node/2535316 for more on writing update functions.",
      "",
      "@section sec_bulk Batch updates",
      "If running your update all at once could possibly cause PHP to time out, use",
      "the $sandbox parameter to indicate that the Batch API should be used for your",
      "update. In this case, your update function acts as an implementation of",
      "callback_batch_operation(), and $sandbox acts as the batch context",
      "parameter. In your function, read the state information from the previous",
      "run from $sandbox (or initialize), run a chunk of updates, save the state in",
      "$sandbox, and set $sandbox['#finished'] to a value between 0 and 1 to",
      "indicate the percent completed, or 1 if it is finished (you need to do this",
      "explicitly in each pass).",
      "",
      "See the @link batch Batch operations topic @endlink for more information on",
      "how to use the Batch API.",
      "",
      "@param array $sandbox",
      "  Stores information for batch updates. See above for more information.",
      "",
      "@return string|null",
      "  Optionally, update hooks may return a translated string that will be",
      "  displayed to the user after the update has completed. If no message is",
      "  returned, no message will be presented to the user.",
      "",
      "@throws \\Drupal\\Core\\Utility\\UpdateException|PDOException",
      "  In case of error, update hooks should throw an instance of",
      "  Drupal\\Core\\Utility\\UpdateException with a meaningful message for the user.",
      "  If a database query fails for whatever reason, it will throw a",
      "  PDOException.",
      "",
      "@ingroup update_api",
      "",
      "@see batch",
      "@see schemaapi",
      "@see hook_update_last_removed()",
      "@see update_get_update_list()",
      "@see \\Drupal\\Core\\Entity\\EntityDefinitionUpdateManagerInterface",
      "@see https://www.drupal.org/node/2535316"
    ],
    "scope": "php"
  },
  "hook_update_projects_alter": {
    "prefix": "hook_update_projects_alter",
    "body": [
      "/**",
      " * Implements hook_update_projects_alter().",
      " */",
      "function hook_update_projects_alter(&$projects) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the list of projects before fetching data and comparing versions.",
      "",
      "Most modules will never need to implement this hook. It is for advanced",
      "interaction with the Update Manager module. The primary use-case for this",
      "hook is to add projects to the list; for example, to provide update status",
      "data on disabled modules and themes. A contributed module might want to hide",
      "projects from the list; for example, if there is a site-specific module that",
      "doesn't have any official releases, that module could remove itself from this",
      "list to avoid \"No available releases found\" warnings on the available updates",
      "report. In rare cases, a module might want to alter the data associated with",
      "a project already in the list.",
      "",
      "@param $projects",
      "  Reference to an array of the projects installed on the system. This",
      "  includes all the metadata documented in the comments below for each project",
      "  (either module or theme) that is currently enabled. The array is initially",
      "  populated inside \\Drupal\\update\\UpdateManager::getProjects() with the help",
      "  of \\Drupal\\Core\\Utility\\ProjectInfo->processInfoList(), so look there for",
      "  examples of how to populate the array with real values.",
      "",
      "@see \\Drupal\\update\\UpdateManager::getProjects()",
      "@see \\Drupal\\Core\\Utility\\ProjectInfo::processInfoList()"
    ],
    "scope": "php"
  },
  "hook_update_status_alter": {
    "prefix": "hook_update_status_alter",
    "body": [
      "/**",
      " * Implements hook_update_status_alter().",
      " */",
      "function hook_update_status_alter(&$projects) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the information about available updates for projects.",
      "",
      "@param $projects",
      "  Reference to an array of information about available updates to each",
      "  project installed on the system.",
      "",
      "@see update_calculate_project_data()"
    ],
    "scope": "php"
  },
  "hook_updater_info": {
    "prefix": "hook_updater_info",
    "body": [
      "/**",
      " * Implements hook_updater_info().",
      " */",
      "function hook_updater_info() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Provide information on Updaters (classes that can update Drupal).",
      "",
      "Drupal\\Core\\Updater\\Updater is a class that knows how to update various parts",
      "of the Drupal file system, for example to update modules that have newer",
      "releases, or to install a new theme.",
      "",
      "@return array",
      "  An associative array of information about the updater(s) being provided.",
      "  This array is keyed by a unique identifier for each updater, and the",
      "  values are subarrays that can contain the following keys:",
      "  - class: The name of the PHP class which implements this updater.",
      "  - name: Human-readable name of this updater.",
      "  - weight: Controls what order the Updater classes are consulted to decide",
      "    which one should handle a given task. When an update task is being run,",
      "    the system will loop through all the Updater classes defined in this",
      "    registry in weight order and let each class respond to the task and",
      "    decide if each Updater wants to handle the task. In general, this",
      "    doesn't matter, but if you need to override an existing Updater, make",
      "    sure your Updater has a lighter weight so that it comes first.",
      "",
      "@ingroup update_api",
      "",
      "@see drupal_get_updaters()",
      "@see hook_updater_info_alter()"
    ],
    "scope": "php"
  },
  "hook_updater_info_alter": {
    "prefix": "hook_updater_info_alter",
    "body": [
      "/**",
      " * Implements hook_updater_info_alter().",
      " */",
      "function hook_updater_info_alter(&$updaters) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the Updater information array.",
      "",
      "An Updater is a class that knows how to update various parts of the Drupal",
      "file system, for example to update modules that have newer releases, or to",
      "install a new theme.",
      "",
      "@param array $updaters",
      "  Associative array of updaters as defined through hook_updater_info().",
      "  Alter this array directly.",
      "",
      "@ingroup update_api",
      "",
      "@see drupal_get_updaters()",
      "@see hook_updater_info()"
    ],
    "scope": "php"
  },
  "hook_user_cancel": {
    "prefix": "hook_user_cancel",
    "body": [
      "/**",
      " * Implements hook_user_cancel().",
      " */",
      "function hook_user_cancel($edit, UserInterface $account, $method) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on user account cancellations.",
      "",
      "This hook is invoked from user_cancel() before a user account is canceled.",
      "Depending on the account cancellation method, the module should either do",
      "nothing, unpublish content, or anonymize content. See user_cancel_methods()",
      "for the list of default account cancellation methods provided by User module.",
      "Modules may add further methods via hook_user_cancel_methods_alter().",
      "",
      "This hook is NOT invoked for the 'user_cancel_delete' account cancellation",
      "method. To react to that method, implement hook_ENTITY_TYPE_predelete() or",
      "hook_ENTITY_TYPE_delete() for user entities instead.",
      "",
      "Expensive operations should be added to the global account cancellation batch",
      "by using batch_set().",
      "",
      "@param array $edit",
      "  The array of form values submitted by the user.",
      "@param \\Drupal\\user\\UserInterface $account",
      "  The user object on which the operation is being performed.",
      "@param string $method",
      "  The account cancellation method.",
      "",
      "@see user_cancel_methods()",
      "@see hook_user_cancel_methods_alter()"
    ],
    "scope": "php"
  },
  "hook_user_cancel_methods_alter": {
    "prefix": "hook_user_cancel_methods_alter",
    "body": [
      "/**",
      " * Implements hook_user_cancel_methods_alter().",
      " */",
      "function hook_user_cancel_methods_alter(&$methods) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify account cancellation methods.",
      "",
      "By implementing this hook, modules are able to add, customize, or remove",
      "account cancellation methods. All defined methods are turned into radio",
      "button form elements by user_cancel_methods() after this hook is invoked.",
      "The following properties can be defined for each method:",
      "- title: The radio button's title.",
      "- description: (optional) A description to display on the confirmation form",
      "  if the user is not allowed to select the account cancellation method. The",
      "  description is NOT used for the radio button, but instead should provide",
      "  additional explanation to the user seeking to cancel their account.",
      "- access: (optional) A boolean value indicating whether the user can access",
      "  a method. If 'access' is defined, the method cannot be configured as",
      "  default method.",
      "",
      "@param array $methods",
      "  An array containing user account cancellation methods, keyed by method id.",
      "",
      "@see user_cancel_methods()",
      "@see \\Drupal\\user\\Form\\UserCancelForm"
    ],
    "scope": "php"
  },
  "hook_user_format_name_alter": {
    "prefix": "hook_user_format_name_alter",
    "body": [
      "/**",
      " * Implements hook_user_format_name_alter().",
      " */",
      "function hook_user_format_name_alter(&$name, AccountInterface $account) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the username that is displayed for a user.",
      "",
      "Called by $account->getDisplayName() to allow modules to alter the username",
      "that is displayed. Can be used to ensure user privacy in situations where",
      "$account->getDisplayName() is too revealing. This hook is invoked both for",
      "user entities and the anonymous user session object.",
      "",
      "@param string|Drupal\\Component\\Render\\MarkupInterface $name",
      "  The username that is displayed for a user. If a hook implementation changes",
      "  this to an object implementing MarkupInterface it is the responsibility of",
      "  the implementation to ensure the user's name is escaped properly. String",
      "  values will be autoescaped.",
      "@param \\Drupal\\Core\\Session\\AccountInterface $account",
      "  The object on which the operation is being performed. This object may be a",
      "  user entity. If the object is an implementation of UserInterface you can",
      "  use instanceof operator before accessing user entity methods. For example:",
      "  @code",
      "  if ($account instanceof UserInterface) {",
      "     // Access user entity methods.",
      "  }",
      "  @endcode",
      "",
      "@see \\Drupal\\Core\\Session\\AccountInterface::getDisplayName()",
      "@see sanitization"
    ],
    "scope": "php"
  },
  "hook_user_login": {
    "prefix": "hook_user_login",
    "body": [
      "/**",
      " * Implements hook_user_login().",
      " */",
      "function hook_user_login(UserInterface $account) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "The user just logged in.",
      "",
      "@param \\Drupal\\user\\UserInterface $account",
      "  The user object on which the operation was just performed."
    ],
    "scope": "php"
  },
  "hook_user_logout": {
    "prefix": "hook_user_logout",
    "body": [
      "/**",
      " * Implements hook_user_logout().",
      " */",
      "function hook_user_logout(AccountInterface $account) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "The user just logged out.",
      "",
      "@param \\Drupal\\Core\\Session\\AccountInterface $account",
      "  The user object on which the operation was just performed."
    ],
    "scope": "php"
  },
  "hook_validation_constraint_alter": {
    "prefix": "hook_validation_constraint_alter",
    "body": [
      "/**",
      " * Implements hook_validation_constraint_alter().",
      " */",
      "function hook_validation_constraint_alter(array &$definitions) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter validation constraint plugin definitions.",
      "",
      "@param array[] $definitions",
      "  The array of validation constraint definitions, keyed by plugin ID.",
      "",
      "@see \\Drupal\\Core\\Validation\\ConstraintManager",
      "@see \\Drupal\\Core\\Validation\\Annotation\\Constraint"
    ],
    "scope": "php"
  },
  "hook_verify_update_archive": {
    "prefix": "hook_verify_update_archive",
    "body": [
      "/**",
      " * Implements hook_verify_update_archive().",
      " */",
      "function hook_verify_update_archive($project, $archive_file, $directory) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Verify an archive after it has been downloaded and extracted.",
      "",
      "@param string $project",
      "  The short name of the project that has been downloaded.",
      "@param string $archive_file",
      "  The filename of the unextracted archive.",
      "@param string $directory",
      "  The directory that the archive was extracted into.",
      "",
      "@return array",
      "  If there are any problems, return an array of error messages. If there are",
      "  no problems, return an empty array.",
      "",
      "@see update_manager_archive_verify()",
      "@ingroup update_manager_file"
    ],
    "scope": "php"
  },
  "hook_views_analyze": {
    "prefix": "hook_views_analyze",
    "body": [
      "/**",
      " * Implements hook_views_analyze().",
      " */",
      "function hook_views_analyze(\\Drupal\\views\\ViewExecutable $view) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Analyze a view to provide warnings about its configuration.",
      "",
      "@param \\Drupal\\views\\ViewExecutable $view",
      "  The view being executed.",
      "",
      "@return array",
      "  Array of warning messages built by Analyzer::formatMessage to be displayed",
      "  to the user following analysis of the view."
    ],
    "scope": "php"
  },
  "hook_views_data": {
    "prefix": "hook_views_data",
    "body": [
      "/**",
      " * Implements hook_views_data().",
      " */",
      "function hook_views_data() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Describe data tables and fields (or the equivalent) to Views.",
      "",
      "The table and fields are processed in Views using various plugins. See",
      "the @link views_plugins Views plugins topic @endlink for more information.",
      "",
      "To provide views data for an entity, instead of implementing this hook,",
      "create a class implementing \\Drupal\\views\\EntityViewsDataInterface and",
      "reference this in the \"handlers.views_data\" annotation in the entity class.",
      "The return value of the getViewsData() method on the interface is the same as",
      "this hook, and base class in \\Drupal\\views\\EntityViewsData will take care of",
      "adding the basic Views tables and fields for your entity. See the",
      "@link entity_api Entity API topic @endlink for more information about",
      "entities.",
      "",
      "The data described with this hook is fetched and retrieved by",
      "\\Drupal\\views\\Views::viewsData()->get().",
      "",
      "@return array",
      "  An associative array describing the structure of database tables and fields",
      "  (and their equivalents) provided for use in Views. At the outermost level,",
      "  the keys are the names used internally by Views for the tables (usually the",
      "  actual table name). Each table's array describes the table itself, how to",
      "  join to other tables, and the fields that are part of the table. The sample",
      "  function body provides documentation of the details.",
      "",
      "@see hook_views_data_alter()"
    ],
    "scope": "php"
  },
  "hook_views_data_alter": {
    "prefix": "hook_views_data_alter",
    "body": [
      "/**",
      " * Implements hook_views_data_alter().",
      " */",
      "function hook_views_data_alter(array &$data) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the table and field information from hook_views_data().",
      "",
      "@param array $data",
      "  An array of all information about Views tables and fields, collected from",
      "  hook_views_data(), passed by reference.",
      "",
      "@see hook_views_data()"
    ],
    "scope": "php"
  },
  "hook_views_form_substitutions": {
    "prefix": "hook_views_form_substitutions",
    "body": [
      "/**",
      " * Implements hook_views_form_substitutions().",
      " */",
      "function hook_views_form_substitutions() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Replace special strings when processing a view with form elements.",
      "",
      "@return array",
      "  An associative array where each key is a string to be replaced, and the",
      "  corresponding value is its replacement. The value will be escaped unless it",
      "  is already marked safe."
    ],
    "scope": "php"
  },
  "hook_views_invalidate_cache": {
    "prefix": "hook_views_invalidate_cache",
    "body": [
      "/**",
      " * Implements hook_views_invalidate_cache().",
      " */",
      "function hook_views_invalidate_cache() {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Allow modules to respond to the invalidation of the Views cache.",
      "",
      "This hook will fire whenever a view is enabled, disabled, created,",
      "updated, or deleted.",
      "",
      "@see views_invalidate_cache()"
    ],
    "scope": "php"
  },
  "hook_views_plugins_access_alter": {
    "prefix": "hook_views_plugins_access_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_access_alter().",
      " */",
      "function hook_views_plugins_access_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views access plugins.",
      "",
      "This hook may be used to modify plugin properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing plugin definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsPluginManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_area_alter": {
    "prefix": "hook_views_plugins_area_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_area_alter().",
      " */",
      "function hook_views_plugins_area_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views area handler plugins.",
      "",
      "This hook may be used to modify handler properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing handler definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsHandlerManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_argument_alter": {
    "prefix": "hook_views_plugins_argument_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_argument_alter().",
      " */",
      "function hook_views_plugins_argument_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views argument handler plugins.",
      "",
      "This hook may be used to modify handler properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing handler definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsHandlerManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_argument_default_alter": {
    "prefix": "hook_views_plugins_argument_default_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_argument_default_alter().",
      " */",
      "function hook_views_plugins_argument_default_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views default argument plugins.",
      "",
      "This hook may be used to modify plugin properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing plugin definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsPluginManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_argument_validator_alter": {
    "prefix": "hook_views_plugins_argument_validator_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_argument_validator_alter().",
      " */",
      "function hook_views_plugins_argument_validator_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views argument validation plugins.",
      "",
      "This hook may be used to modify plugin properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing plugin definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsPluginManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_cache_alter": {
    "prefix": "hook_views_plugins_cache_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_cache_alter().",
      " */",
      "function hook_views_plugins_cache_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views cache plugins.",
      "",
      "This hook may be used to modify plugin properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing plugin definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsPluginManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_display_alter": {
    "prefix": "hook_views_plugins_display_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_display_alter().",
      " */",
      "function hook_views_plugins_display_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views display plugins.",
      "",
      "This hook may be used to modify plugin properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing plugin definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsPluginManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_display_extenders_alter": {
    "prefix": "hook_views_plugins_display_extenders_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_display_extenders_alter().",
      " */",
      "function hook_views_plugins_display_extenders_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views display extender plugins.",
      "",
      "This hook may be used to modify plugin properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing plugin definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsPluginManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_exposed_form_alter": {
    "prefix": "hook_views_plugins_exposed_form_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_exposed_form_alter().",
      " */",
      "function hook_views_plugins_exposed_form_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views exposed form plugins.",
      "",
      "This hook may be used to modify plugin properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing plugin definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsPluginManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_field_alter": {
    "prefix": "hook_views_plugins_field_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_field_alter().",
      " */",
      "function hook_views_plugins_field_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views field handler plugins.",
      "",
      "This hook may be used to modify handler properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing handler definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsHandlerManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_filter_alter": {
    "prefix": "hook_views_plugins_filter_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_filter_alter().",
      " */",
      "function hook_views_plugins_filter_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views filter handler plugins.",
      "",
      "This hook may be used to modify handler properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing handler definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsHandlerManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_join_alter": {
    "prefix": "hook_views_plugins_join_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_join_alter().",
      " */",
      "function hook_views_plugins_join_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views join plugins.",
      "",
      "This hook may be used to modify plugin properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing plugin definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsPluginManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_pager_alter": {
    "prefix": "hook_views_plugins_pager_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_pager_alter().",
      " */",
      "function hook_views_plugins_pager_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views pager plugins.",
      "",
      "This hook may be used to modify plugin properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing plugin definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsPluginManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_query_alter": {
    "prefix": "hook_views_plugins_query_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_query_alter().",
      " */",
      "function hook_views_plugins_query_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views query plugins.",
      "",
      "This hook may be used to modify plugin properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing plugin definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsPluginManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_relationship_alter": {
    "prefix": "hook_views_plugins_relationship_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_relationship_alter().",
      " */",
      "function hook_views_plugins_relationship_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views relationship handler plugins.",
      "",
      "This hook may be used to modify handler properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing handler definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsHandlerManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_row_alter": {
    "prefix": "hook_views_plugins_row_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_row_alter().",
      " */",
      "function hook_views_plugins_row_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views row plugins.",
      "",
      "This hook may be used to modify plugin properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing plugin definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsPluginManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_sort_alter": {
    "prefix": "hook_views_plugins_sort_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_sort_alter().",
      " */",
      "function hook_views_plugins_sort_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views sort handler plugins.",
      "",
      "This hook may be used to modify handler properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing handler definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsHandlerManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_style_alter": {
    "prefix": "hook_views_plugins_style_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_style_alter().",
      " */",
      "function hook_views_plugins_style_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views style plugins.",
      "",
      "This hook may be used to modify plugin properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing plugin definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsPluginManager"
    ],
    "scope": "php"
  },
  "hook_views_plugins_wizard_alter": {
    "prefix": "hook_views_plugins_wizard_alter",
    "body": [
      "/**",
      " * Implements hook_views_plugins_wizard_alter().",
      " */",
      "function hook_views_plugins_wizard_alter(array &$plugins) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Modify the list of available views wizard plugins.",
      "",
      "This hook may be used to modify plugin properties after they have been",
      "specified by other modules.",
      "",
      "@param array $plugins",
      "  An array of all the existing plugin definitions, passed by reference.",
      "",
      "@see \\Drupal\\views\\Plugin\\ViewsPluginManager"
    ],
    "scope": "php"
  },
  "hook_views_post_build": {
    "prefix": "hook_views_post_build",
    "body": [
      "/**",
      " * Implements hook_views_post_build().",
      " */",
      "function hook_views_post_build(ViewExecutable $view) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on the view immediately after the query is built.",
      "",
      "Output can be added to the view by setting $view->attachment_before",
      "and $view->attachment_after.",
      "",
      "@param \\Drupal\\views\\ViewExecutable $view",
      "  The view object about to be processed.",
      "",
      "@see \\Drupal\\views\\ViewExecutable"
    ],
    "scope": "php"
  },
  "hook_views_post_execute": {
    "prefix": "hook_views_post_execute",
    "body": [
      "/**",
      " * Implements hook_views_post_execute().",
      " */",
      "function hook_views_post_execute(ViewExecutable $view) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on the view immediately after the query has been executed.",
      "",
      "At this point the query has been executed, but the preRender() phase has",
      "not yet happened for handlers.",
      "",
      "Output can be added to the view by setting $view->attachment_before",
      "and $view->attachment_after.",
      "",
      "@param \\Drupal\\views\\ViewExecutable $view",
      "  The view object about to be processed.",
      "",
      "@see \\Drupal\\views\\ViewExecutable"
    ],
    "scope": "php"
  },
  "hook_views_post_render": {
    "prefix": "hook_views_post_render",
    "body": [
      "/**",
      " * Implements hook_views_post_render().",
      " */",
      "function hook_views_post_render(ViewExecutable $view, array &$output, CachePluginBase $cache) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Post-process any render data.",
      "",
      "The module or theme may add, modify or remove elements in $output after",
      "rendering.",
      "",
      "If a module wishes to act on the rendered HTML of the view rather than the",
      "structured content array, it may use this hook to add a #post_render",
      "callback:",
      "@code",
      "// The object must implement \\Drupal\\Core\\Security\\TrustedCallbackInterface.",
      "$output['#post_render'][] = '\\Drupal\\my_module\\View::postRender';",
      "@endcode",
      "",
      "See \\Drupal\\Core\\Render\\RendererInterface::render() for #post_render",
      "documentation.",
      "",
      "Alternatively, it could also implement hook_preprocess_HOOK() for",
      "the particular view template, if there is one.",
      "",
      "@param \\Drupal\\views\\ViewExecutable $view",
      "  The view object being processed.",
      "@param array $output",
      "  A structured content array representing the view output. The given array",
      "  depends on the style plugin and can be either a render array or an array of",
      "  render arrays.",
      "@param \\Drupal\\views\\Plugin\\views\\cache\\CachePluginBase $cache",
      "  The cache settings.",
      "",
      "@see \\Drupal\\views\\ViewExecutable"
    ],
    "scope": "php"
  },
  "hook_views_pre_build": {
    "prefix": "hook_views_pre_build",
    "body": [
      "/**",
      " * Implements hook_views_pre_build().",
      " */",
      "function hook_views_pre_build(ViewExecutable $view) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on the view before the query is built, but after displays are attached.",
      "",
      "Output can be added to the view by setting $view->attachment_before",
      "and $view->attachment_after.",
      "",
      "@param \\Drupal\\views\\ViewExecutable $view",
      "  The view object about to be processed.",
      "",
      "@see \\Drupal\\views\\ViewExecutable"
    ],
    "scope": "php"
  },
  "hook_views_pre_execute": {
    "prefix": "hook_views_pre_execute",
    "body": [
      "/**",
      " * Implements hook_views_pre_execute().",
      " */",
      "function hook_views_pre_execute(ViewExecutable $view) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on the view after the query is built and just before it is executed.",
      "",
      "Output can be added to the view by setting $view->attachment_before",
      "and $view->attachment_after.",
      "",
      "@param \\Drupal\\views\\ViewExecutable $view",
      "  The view object about to be processed.",
      "",
      "@see \\Drupal\\views\\ViewExecutable"
    ],
    "scope": "php"
  },
  "hook_views_pre_render": {
    "prefix": "hook_views_pre_render",
    "body": [
      "/**",
      " * Implements hook_views_pre_render().",
      " */",
      "function hook_views_pre_render(ViewExecutable $view) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Act on the view immediately before rendering it.",
      "",
      "At this point the query has been executed, and the preRender() phase has",
      "already happened for handlers, so all data should be available. This hook",
      "can be used by themes.",
      "",
      "Output can be added to the view by setting $view->attachment_before",
      "and $view->attachment_after.",
      "",
      "@param \\Drupal\\views\\ViewExecutable $view",
      "  The view object about to be processed.",
      "",
      "@see \\Drupal\\views\\ViewExecutable"
    ],
    "scope": "php"
  },
  "hook_views_pre_view": {
    "prefix": "hook_views_pre_view",
    "body": [
      "/**",
      " * Implements hook_views_pre_view().",
      " */",
      "function hook_views_pre_view(ViewExecutable $view, $display_id, array &$args) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter a view at the very beginning of Views processing.",
      "",
      "Output can be added to the view by setting $view->attachment_before",
      "and $view->attachment_after.",
      "",
      "@param \\Drupal\\views\\ViewExecutable $view",
      "  The view object about to be processed.",
      "@param string $display_id",
      "  The machine name of the active display.",
      "@param array $args",
      "  An array of arguments passed into the view.",
      "",
      "@see \\Drupal\\views\\ViewExecutable"
    ],
    "scope": "php"
  },
  "hook_views_preview_info_alter": {
    "prefix": "hook_views_preview_info_alter",
    "body": [
      "/**",
      " * Implements hook_views_preview_info_alter().",
      " */",
      "function hook_views_preview_info_alter(array &$rows, ViewExecutable $view) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the view preview information.",
      "",
      "The view preview information is optionally displayed when a view is",
      "previewed in the administrative UI. It includes query and performance",
      "statistics.",
      "",
      "@param array $rows",
      "  An associative array with two keys:",
      "  - query: An array of rows suitable for '#type' => 'table', containing",
      "    information about the query and the display title and path.",
      "  - statistics: An array of rows suitable for '#type' => 'table',",
      "    containing performance statistics.",
      "@param \\Drupal\\views\\ViewExecutable $view",
      "  The view object.",
      "",
      "@see \\Drupal\\views_ui\\ViewUI",
      "@see table.html.twig"
    ],
    "scope": "php"
  },
  "hook_views_query_alter": {
    "prefix": "hook_views_query_alter",
    "body": [
      "/**",
      " * Implements hook_views_query_alter().",
      " */",
      "function hook_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the query before it is executed.",
      "",
      "@param \\Drupal\\views\\ViewExecutable $view",
      "  The view object about to be processed.",
      "@param \\Drupal\\views\\Plugin\\views\\query\\QueryPluginBase $query",
      "  The query plugin object for the query.",
      "",
      "@see hook_views_query_substitutions()",
      "@see \\Drupal\\views\\Plugin\\views\\query\\Sql"
    ],
    "scope": "php"
  },
  "hook_views_query_substitutions": {
    "prefix": "hook_views_query_substitutions",
    "body": [
      "/**",
      " * Implements hook_views_query_substitutions().",
      " */",
      "function hook_views_query_substitutions(ViewExecutable $view) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Replace special strings in the query before it is executed.",
      "",
      "The idea is that certain dynamic values can be placed in a query when it is",
      "built, and substituted at run-time, allowing the query to be cached and",
      "still work correctly when executed.",
      "",
      "@param \\Drupal\\views\\ViewExecutable $view",
      "  The View being executed.",
      "",
      "@return array",
      "  An associative array where each key is a string to be replaced, and the",
      "  corresponding value is its replacement. The strings to replace are often",
      "  surrounded with '***', as illustrated in the example implementation, to",
      "  avoid collisions with other values in the query."
    ],
    "scope": "php"
  },
  "hook_views_ui_display_tab_alter": {
    "prefix": "hook_views_ui_display_tab_alter",
    "body": [
      "/**",
      " * Implements hook_views_ui_display_tab_alter().",
      " */",
      "function hook_views_ui_display_tab_alter(&$build, \\Drupal\\views_ui\\ViewUI $view, $display_id) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the renderable array representing the edit page for one display.",
      "",
      "This hook can be implemented by themes.",
      "",
      "@param array[] $build",
      "  Render array for the tab contents.",
      "@param \\Drupal\\views_ui\\ViewUI $view",
      "  The view being edited.",
      "@param string $display_id",
      "  The display ID.",
      "",
      "@todo Until https://www.drupal.org/project/drupal/issues/3087455 is resolved,",
      "  use this hook or hook_views_ui_display_tab_alter() instead of",
      "  hook_form_view_edit_form_alter().",
      "",
      "@see \\Drupal\\views_ui\\ViewEditForm::getDisplayTab()"
    ],
    "scope": "php"
  },
  "hook_views_ui_display_top_alter": {
    "prefix": "hook_views_ui_display_top_alter",
    "body": [
      "/**",
      " * Implements hook_views_ui_display_top_alter().",
      " */",
      "function hook_views_ui_display_top_alter(&$build, \\Drupal\\views_ui\\ViewUI $view, $display_id) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the top of the display for the Views UI.",
      "",
      "This hook can be implemented by themes.",
      "",
      "@param array[] $build",
      "  Render array for the display top.",
      "@param \\Drupal\\views_ui\\ViewUI $view",
      "  The view being edited.",
      "@param string $display_id",
      "  The display ID.",
      "",
      "@todo Until https://www.drupal.org/project/drupal/issues/3087455 is resolved,",
      "  use this hook or hook_views_ui_display_tab_alter() instead of",
      "  hook_form_view_edit_form_alter().",
      "",
      "@see \\Drupal\\views_ui\\ViewUI::renderDisplayTop()"
    ],
    "scope": "php"
  },
  "hook_views_ui_display_top_links_alter": {
    "prefix": "hook_views_ui_display_top_links_alter",
    "body": [
      "/**",
      " * Implements hook_views_ui_display_top_links_alter().",
      " */",
      "function hook_views_ui_display_top_links_alter(array &$links, ViewExecutable $view, $display_id) {",
      "  $0",
      "}"
    ],
    "description": [
      "Drupal 9+",
      "",
      "Alter the links displayed at the top of the view edit form.",
      "",
      "@param array $links",
      "  A renderable array of links which will be displayed at the top of the",
      "  view edit form. Each entry will be in a form suitable for",
      "  '#theme' => 'links'.",
      "@param \\Drupal\\views\\ViewExecutable $view",
      "  The view object being edited.",
      "@param string $display_id",
      "  The ID of the display being edited, e.g. 'default' or 'page_1'.",
      "",
      "@see \\Drupal\\views_ui\\ViewUI::renderDisplayTop()"
    ],
    "scope": "php"
  }
}