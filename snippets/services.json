{
  "access_arguments_resolver_factory": {
    "prefix": [
      "@Service (\"access_arguments_resolver_factory\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Access\\AccessArgumentsResolverFactory",
      " */",
      "${1:\\$access_arguments_resolver_factory_service} = \\Drupal::service('access_arguments_resolver_factory');",
      ""
    ],
    "description": [
      "Resolves the arguments to pass to an access check callable."
    ],
    "scope": "php"
  },
  "access_check.csrf": {
    "prefix": [
      "@Service (\"access_check.csrf\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Access\\CsrfAccessCheck",
      " */",
      "${1:\\$access_check_csrf_service} = \\Drupal::service('access_check.csrf');",
      ""
    ],
    "description": [
      "Allows access to routes to be controlled by a '_csrf_token' parameter.",
      "",
      "To use this check, add a \"token\" GET parameter to URLs of which the value is",
      "a token generated by \\Drupal::csrfToken()->get() using the same value as the",
      "\"_csrf_token\" parameter in the route."
    ],
    "scope": "php"
  },
  "access_check.custom": {
    "prefix": [
      "@Service (\"access_check.custom\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Access\\CustomAccessCheck",
      " */",
      "${1:\\$access_check_custom_service} = \\Drupal::service('access_check.custom');",
      ""
    ],
    "description": [
      "Defines an access checker that allows specifying a custom method for access.",
      "",
      "You should only use it when you are sure that the access callback will not be",
      "reused. Good examples in core are Edit or Toolbar module.",
      "",
      "The method is called on another instance of the controller class, so you",
      "cannot reuse any stored property of your actual controller instance used",
      "to generate the output."
    ],
    "scope": "php"
  },
  "access_check.default": {
    "prefix": [
      "@Service (\"access_check.default\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Access\\DefaultAccessCheck",
      " */",
      "${1:\\$access_check_default_service} = \\Drupal::service('access_check.default');",
      ""
    ],
    "description": [
      "Allows access to routes to be controlled by an '_access' boolean parameter."
    ],
    "scope": "php"
  },
  "access_check.entity": {
    "prefix": [
      "@Service (\"access_check.entity\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityAccessCheck",
      " */",
      "${1:\\$access_check_entity_service} = \\Drupal::service('access_check.entity');",
      ""
    ],
    "description": [
      "Provides a generic access checker for entities."
    ],
    "scope": "php"
  },
  "access_check.entity_bundles": {
    "prefix": [
      "@Service (\"access_check.entity_bundles\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityBundleAccessCheck",
      " */",
      "${1:\\$access_check_entity_bundles_service} = \\Drupal::service('access_check.entity_bundles');",
      ""
    ],
    "description": [
      "Provides an entity bundle checker for the _entity_bundles route requirement.",
      "",
      "@todo Deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Specify",
      "  the list of bundles in the entity parameter, under \"bundle\" key, as a",
      "  sequence, instead.",
      "",
      "@see https://www.drupal.org/node/3155569"
    ],
    "scope": "php"
  },
  "access_check.entity_create": {
    "prefix": [
      "@Service (\"access_check.entity_create\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityCreateAccessCheck",
      " */",
      "${1:\\$access_check_entity_create_service} = \\Drupal::service('access_check.entity_create');",
      ""
    ],
    "description": [
      "Defines an access checker for entity creation."
    ],
    "scope": "php"
  },
  "access_check.entity_create_any": {
    "prefix": [
      "@Service (\"access_check.entity_create_any\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityCreateAnyAccessCheck",
      " */",
      "${1:\\$access_check_entity_create_any_service} = \\Drupal::service('access_check.entity_create_any');",
      ""
    ],
    "description": [
      "Defines an access checker for creating an entity of any bundle."
    ],
    "scope": "php"
  },
  "access_check.entity_delete_multiple": {
    "prefix": [
      "@Service (\"access_check.entity_delete_multiple\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityDeleteMultipleAccessCheck",
      " */",
      "${1:\\$access_check_entity_delete_multiple_service} = \\Drupal::service('access_check.entity_delete_multiple');",
      ""
    ],
    "description": [
      "Checks if the current user has delete access to the items of the tempstore."
    ],
    "scope": "php"
  },
  "access_check.header.csrf": {
    "prefix": [
      "@Service (\"access_check.header.csrf\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Access\\CsrfRequestHeaderAccessCheck",
      " */",
      "${1:\\$access_check_header_csrf_service} = \\Drupal::service('access_check.header.csrf');",
      ""
    ],
    "description": [
      "Access protection against CSRF attacks."
    ],
    "scope": "php"
  },
  "access_check.theme": {
    "prefix": [
      "@Service (\"access_check.theme\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Theme\\ThemeAccessCheck",
      " */",
      "${1:\\$access_check_theme_service} = \\Drupal::service('access_check.theme');",
      ""
    ],
    "description": [
      "Provides access checking for themes for routing and theme negotiation."
    ],
    "scope": "php"
  },
  "access_manager": {
    "prefix": [
      "@Service (\"access_manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Access\\AccessManager",
      " */",
      "${1:\\$access_manager_service} = \\Drupal::service('access_manager');",
      ""
    ],
    "description": [
      "Attaches access check services to routes and runs them on request.",
      "",
      "@see \\Drupal\\Tests\\Core\\Access\\AccessManagerTest"
    ],
    "scope": "php"
  },
  "account_switcher": {
    "prefix": [
      "@Service (\"account_switcher\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Session\\AccountSwitcher",
      " */",
      "${1:\\$account_switcher_service} = \\Drupal::service('account_switcher');",
      ""
    ],
    "description": [
      "An implementation of AccountSwitcherInterface.",
      "",
      "This allows for safe switching of user accounts by ensuring that session",
      "data for one user is not leaked in to others. It also provides a stack that",
      "allows reverting to a previous user after switching."
    ],
    "scope": "php"
  },
  "ajax_response.attachments_processor": {
    "prefix": [
      "@Service (\"ajax_response.attachments_processor\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Ajax\\AjaxResponseAttachmentsProcessor",
      " */",
      "${1:\\$ajax_response_attachments_processor_service} = \\Drupal::service('ajax_response.attachments_processor');",
      ""
    ],
    "description": [
      "Processes attachments of AJAX responses.",
      "",
      "@see \\Drupal\\Core\\Ajax\\AjaxResponse",
      "@see \\Drupal\\Core\\Render\\MainContent\\AjaxRenderer"
    ],
    "scope": "php"
  },
  "ajax_response.subscriber": {
    "prefix": [
      "@Service (\"ajax_response.subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\AjaxResponseSubscriber",
      " */",
      "${1:\\$ajax_response_subscriber_service} = \\Drupal::service('ajax_response.subscriber');",
      ""
    ],
    "description": [
      "Response subscriber to handle AJAX responses."
    ],
    "scope": "php"
  },
  "anonymous_user_response_subscriber": {
    "prefix": [
      "@Service (\"anonymous_user_response_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\AnonymousUserResponseSubscriber",
      " */",
      "${1:\\$anonymous_user_response_subscriber_service} = \\Drupal::service('anonymous_user_response_subscriber');",
      ""
    ],
    "description": [
      "Response subscriber to handle finished responses for the anonymous user."
    ],
    "scope": "php"
  },
  "app.root": {
    "prefix": [
      "@Service (\"app.root\")"
    ],
    "body": [
      "/**",
      " * @var \\SplString",
      " */",
      "${1:\\$app_root_service} = \\Drupal::service('app.root');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "asset.css.collection_grouper": {
    "prefix": [
      "@Service (\"asset.css.collection_grouper\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Asset\\CssCollectionGrouper",
      " */",
      "${1:\\$asset_css_collection_grouper_service} = \\Drupal::service('asset.css.collection_grouper');",
      ""
    ],
    "description": [
      "Groups CSS assets."
    ],
    "scope": "php"
  },
  "asset.css.collection_optimizer": {
    "prefix": [
      "@Service (\"asset.css.collection_optimizer\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Asset\\CssCollectionOptimizer",
      " */",
      "${1:\\$asset_css_collection_optimizer_service} = \\Drupal::service('asset.css.collection_optimizer');",
      ""
    ],
    "description": [
      "Optimizes CSS assets."
    ],
    "scope": "php"
  },
  "asset.css.collection_renderer": {
    "prefix": [
      "@Service (\"asset.css.collection_renderer\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Asset\\CssCollectionRenderer",
      " */",
      "${1:\\$asset_css_collection_renderer_service} = \\Drupal::service('asset.css.collection_renderer');",
      ""
    ],
    "description": [
      "Renders CSS assets."
    ],
    "scope": "php"
  },
  "asset.css.dumper": {
    "prefix": [
      "@Service (\"asset.css.dumper\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Asset\\AssetDumper",
      " */",
      "${1:\\$asset_css_dumper_service} = \\Drupal::service('asset.css.dumper');",
      ""
    ],
    "description": [
      "Dumps a CSS or JavaScript asset."
    ],
    "scope": "php"
  },
  "asset.css.optimizer": {
    "prefix": [
      "@Service (\"asset.css.optimizer\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Asset\\CssOptimizer",
      " */",
      "${1:\\$asset_css_optimizer_service} = \\Drupal::service('asset.css.optimizer');",
      ""
    ],
    "description": [
      "Optimizes a CSS asset."
    ],
    "scope": "php"
  },
  "asset.js.collection_grouper": {
    "prefix": [
      "@Service (\"asset.js.collection_grouper\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Asset\\JsCollectionGrouper",
      " */",
      "${1:\\$asset_js_collection_grouper_service} = \\Drupal::service('asset.js.collection_grouper');",
      ""
    ],
    "description": [
      "Groups JavaScript assets."
    ],
    "scope": "php"
  },
  "asset.js.collection_optimizer": {
    "prefix": [
      "@Service (\"asset.js.collection_optimizer\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Asset\\JsCollectionOptimizer",
      " */",
      "${1:\\$asset_js_collection_optimizer_service} = \\Drupal::service('asset.js.collection_optimizer');",
      ""
    ],
    "description": [
      "Optimizes JavaScript assets."
    ],
    "scope": "php"
  },
  "asset.js.collection_renderer": {
    "prefix": [
      "@Service (\"asset.js.collection_renderer\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Asset\\JsCollectionRenderer",
      " */",
      "${1:\\$asset_js_collection_renderer_service} = \\Drupal::service('asset.js.collection_renderer');",
      ""
    ],
    "description": [
      "Renders JavaScript assets."
    ],
    "scope": "php"
  },
  "asset.js.dumper": {
    "prefix": [
      "@Service (\"asset.js.dumper\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Asset\\AssetDumper",
      " */",
      "${1:\\$asset_js_dumper_service} = \\Drupal::service('asset.js.dumper');",
      ""
    ],
    "description": [
      "Dumps a CSS or JavaScript asset."
    ],
    "scope": "php"
  },
  "asset.js.optimizer": {
    "prefix": [
      "@Service (\"asset.js.optimizer\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Asset\\JsOptimizer",
      " */",
      "${1:\\$asset_js_optimizer_service} = \\Drupal::service('asset.js.optimizer');",
      ""
    ],
    "description": [
      "Optimizes a JavaScript asset."
    ],
    "scope": "php"
  },
  "asset.resolver": {
    "prefix": [
      "@Service (\"asset.resolver\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Asset\\AssetResolver",
      " */",
      "${1:\\$asset_resolver_service} = \\Drupal::service('asset.resolver');",
      ""
    ],
    "description": [
      "The default asset resolver."
    ],
    "scope": "php"
  },
  "authentication": {
    "prefix": [
      "@Service (\"authentication\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Authentication\\AuthenticationManager",
      " */",
      "${1:\\$authentication_service} = \\Drupal::service('authentication');",
      ""
    ],
    "description": [
      "Manager for authentication.",
      "",
      "On each request, let all authentication providers try to authenticate the",
      "user. The providers are iterated according to their priority and the first",
      "provider detecting credentials for its method wins. No further provider will",
      "get triggered.",
      "",
      "If no provider sets an active user then the user remains anonymous."
    ],
    "scope": "php"
  },
  "authentication_collector": {
    "prefix": [
      "@Service (\"authentication_collector\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Authentication\\AuthenticationCollector",
      " */",
      "${1:\\$authentication_collector_service} = \\Drupal::service('authentication_collector');",
      ""
    ],
    "description": [
      "A collector class for authentication providers."
    ],
    "scope": "php"
  },
  "authentication_subscriber": {
    "prefix": [
      "@Service (\"authentication_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\AuthenticationSubscriber",
      " */",
      "${1:\\$authentication_subscriber_service} = \\Drupal::service('authentication_subscriber');",
      ""
    ],
    "description": [
      "Authentication subscriber.",
      "",
      "Trigger authentication during the request."
    ],
    "scope": "php"
  },
  "bare_html_page_renderer": {
    "prefix": [
      "@Service (\"bare_html_page_renderer\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Render\\BareHtmlPageRenderer",
      " */",
      "${1:\\$bare_html_page_renderer_service} = \\Drupal::service('bare_html_page_renderer');",
      ""
    ],
    "description": [
      "Default bare HTML page renderer."
    ],
    "scope": "php"
  },
  "batch.storage": {
    "prefix": [
      "@Service (\"batch.storage\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Batch\\BatchStorage",
      " */",
      "${1:\\$batch_storage_service} = \\Drupal::service('batch.storage');",
      ""
    ],
    "description": [
      "   * The table name.",
      "   */"
    ],
    "scope": "php"
  },
  "breadcrumb": {
    "prefix": [
      "@Service (\"breadcrumb\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Breadcrumb\\BreadcrumbManager",
      " */",
      "${1:\\$breadcrumb_service} = \\Drupal::service('breadcrumb');",
      ""
    ],
    "description": [
      "Provides a breadcrumb manager.",
      "",
      "Can be assigned any number of BreadcrumbBuilderInterface objects by calling",
      "the addBuilder() method. When build() is called it iterates over the objects",
      "in priority order and uses the first one that returns TRUE from",
      "BreadcrumbBuilderInterface::applies() to build the breadcrumbs.",
      "",
      "@see \\Drupal\\Core\\DependencyInjection\\Compiler\\RegisterBreadcrumbBuilderPass"
    ],
    "scope": "php"
  },
  "cache.backend.apcu": {
    "prefix": [
      "@Service (\"cache.backend.apcu\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\ApcuBackendFactory",
      " */",
      "${1:\\$cache_backend_apcu_service} = \\Drupal::service('cache.backend.apcu');",
      ""
    ],
    "description": [
      "   * The site prefix string.",
      "   *",
      "   * @var string",
      "   */"
    ],
    "scope": "php"
  },
  "cache.backend.chainedfast": {
    "prefix": [
      "@Service (\"cache.backend.chainedfast\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\ChainedFastBackendFactory",
      " */",
      "${1:\\$cache_backend_chainedfast_service} = \\Drupal::service('cache.backend.chainedfast');",
      ""
    ],
    "description": [
      "Defines the chained fast cache backend factory.",
      "",
      "@see \\Drupal\\Core\\Cache\\ChainedFastBackend"
    ],
    "scope": "php"
  },
  "cache.backend.database": {
    "prefix": [
      "@Service (\"cache.backend.database\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\DatabaseBackendFactory",
      " */",
      "${1:\\$cache_backend_database_service} = \\Drupal::service('cache.backend.database');",
      ""
    ],
    "description": [
      "   * The database connection.",
      "   *",
      "   * @var \\Drupal\\Core\\Database\\Connection",
      "   */"
    ],
    "scope": "php"
  },
  "cache.backend.memory": {
    "prefix": [
      "@Service (\"cache.backend.memory\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\MemoryBackendFactory",
      " */",
      "${1:\\$cache_backend_memory_service} = \\Drupal::service('cache.backend.memory');",
      ""
    ],
    "description": [
      "   * Instantiated memory cache bins.",
      "   *",
      "   * @var \\Drupal\\Core\\Cache\\MemoryBackend[]",
      "   */"
    ],
    "scope": "php"
  },
  "cache.backend.php": {
    "prefix": [
      "@Service (\"cache.backend.php\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\PhpBackendFactory",
      " */",
      "${1:\\$cache_backend_php_service} = \\Drupal::service('cache.backend.php');",
      ""
    ],
    "description": [
      "   * The cache tags checksum provider.",
      "   *",
      "   * @var \\Drupal\\Core\\Cache\\CacheTagsChecksumInterface",
      "   */"
    ],
    "scope": "php"
  },
  "cache.bootstrap": {
    "prefix": [
      "@Service (\"cache.bootstrap\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\CacheBackendInterface",
      " */",
      "${1:\\$cache_bootstrap_service} = \\Drupal::service('cache.bootstrap');",
      ""
    ],
    "description": [
      "Defines an interface for cache implementations.",
      "",
      "All cache implementations have to implement this interface.",
      "Drupal\\Core\\Cache\\DatabaseBackend provides the default implementation, which",
      "can be consulted as an example.",
      "",
      "The cache identifiers are case sensitive.",
      "",
      "@ingroup cache"
    ],
    "scope": "php"
  },
  "cache.config": {
    "prefix": [
      "@Service (\"cache.config\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\CacheBackendInterface",
      " */",
      "${1:\\$cache_config_service} = \\Drupal::service('cache.config');",
      ""
    ],
    "description": [
      "Defines an interface for cache implementations.",
      "",
      "All cache implementations have to implement this interface.",
      "Drupal\\Core\\Cache\\DatabaseBackend provides the default implementation, which",
      "can be consulted as an example.",
      "",
      "The cache identifiers are case sensitive.",
      "",
      "@ingroup cache"
    ],
    "scope": "php"
  },
  "cache.data": {
    "prefix": [
      "@Service (\"cache.data\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\CacheBackendInterface",
      " */",
      "${1:\\$cache_data_service} = \\Drupal::service('cache.data');",
      ""
    ],
    "description": [
      "Defines an interface for cache implementations.",
      "",
      "All cache implementations have to implement this interface.",
      "Drupal\\Core\\Cache\\DatabaseBackend provides the default implementation, which",
      "can be consulted as an example.",
      "",
      "The cache identifiers are case sensitive.",
      "",
      "@ingroup cache"
    ],
    "scope": "php"
  },
  "cache.default": {
    "prefix": [
      "@Service (\"cache.default\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\CacheBackendInterface",
      " */",
      "${1:\\$cache_default_service} = \\Drupal::service('cache.default');",
      ""
    ],
    "description": [
      "Defines an interface for cache implementations.",
      "",
      "All cache implementations have to implement this interface.",
      "Drupal\\Core\\Cache\\DatabaseBackend provides the default implementation, which",
      "can be consulted as an example.",
      "",
      "The cache identifiers are case sensitive.",
      "",
      "@ingroup cache"
    ],
    "scope": "php"
  },
  "cache.discovery": {
    "prefix": [
      "@Service (\"cache.discovery\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\CacheBackendInterface",
      " */",
      "${1:\\$cache_discovery_service} = \\Drupal::service('cache.discovery');",
      ""
    ],
    "description": [
      "Defines an interface for cache implementations.",
      "",
      "All cache implementations have to implement this interface.",
      "Drupal\\Core\\Cache\\DatabaseBackend provides the default implementation, which",
      "can be consulted as an example.",
      "",
      "The cache identifiers are case sensitive.",
      "",
      "@ingroup cache"
    ],
    "scope": "php"
  },
  "cache.entity": {
    "prefix": [
      "@Service (\"cache.entity\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\CacheBackendInterface",
      " */",
      "${1:\\$cache_entity_service} = \\Drupal::service('cache.entity');",
      ""
    ],
    "description": [
      "Defines an interface for cache implementations.",
      "",
      "All cache implementations have to implement this interface.",
      "Drupal\\Core\\Cache\\DatabaseBackend provides the default implementation, which",
      "can be consulted as an example.",
      "",
      "The cache identifiers are case sensitive.",
      "",
      "@ingroup cache"
    ],
    "scope": "php"
  },
  "cache.menu": {
    "prefix": [
      "@Service (\"cache.menu\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\CacheBackendInterface",
      " */",
      "${1:\\$cache_menu_service} = \\Drupal::service('cache.menu');",
      ""
    ],
    "description": [
      "Defines an interface for cache implementations.",
      "",
      "All cache implementations have to implement this interface.",
      "Drupal\\Core\\Cache\\DatabaseBackend provides the default implementation, which",
      "can be consulted as an example.",
      "",
      "The cache identifiers are case sensitive.",
      "",
      "@ingroup cache"
    ],
    "scope": "php"
  },
  "cache.render": {
    "prefix": [
      "@Service (\"cache.render\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\CacheBackendInterface",
      " */",
      "${1:\\$cache_render_service} = \\Drupal::service('cache.render');",
      ""
    ],
    "description": [
      "Defines an interface for cache implementations.",
      "",
      "All cache implementations have to implement this interface.",
      "Drupal\\Core\\Cache\\DatabaseBackend provides the default implementation, which",
      "can be consulted as an example.",
      "",
      "The cache identifiers are case sensitive.",
      "",
      "@ingroup cache"
    ],
    "scope": "php"
  },
  "cache.static": {
    "prefix": [
      "@Service (\"cache.static\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\CacheBackendInterface",
      " */",
      "${1:\\$cache_static_service} = \\Drupal::service('cache.static');",
      ""
    ],
    "description": [
      "Defines an interface for cache implementations.",
      "",
      "All cache implementations have to implement this interface.",
      "Drupal\\Core\\Cache\\DatabaseBackend provides the default implementation, which",
      "can be consulted as an example.",
      "",
      "The cache identifiers are case sensitive.",
      "",
      "@ingroup cache"
    ],
    "scope": "php"
  },
  "cache_context.cookies": {
    "prefix": [
      "@Service (\"cache_context.cookies\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\CookiesCacheContext",
      " */",
      "${1:\\$cache_context_cookies_service} = \\Drupal::service('cache_context.cookies');",
      ""
    ],
    "description": [
      "Defines the CookiesCacheContext service, for \"per cookie\" caching.",
      "",
      "Cache context ID: 'cookies' (to vary by all cookies).",
      "Calculated cache context ID: 'cookies:%name', e.g. 'cookies:device_type' (to",
      "vary by the 'device_type' cookie)."
    ],
    "scope": "php"
  },
  "cache_context.headers": {
    "prefix": [
      "@Service (\"cache_context.headers\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\HeadersCacheContext",
      " */",
      "${1:\\$cache_context_headers_service} = \\Drupal::service('cache_context.headers');",
      ""
    ],
    "description": [
      "Defines the HeadersCacheContext service, for \"per header\" caching.",
      "",
      "Cache context ID: 'headers' (to vary by all headers).",
      "Calculated cache context ID: 'headers:%name', e.g. 'headers:X-Something' (to",
      "vary by the 'X-Something' header)."
    ],
    "scope": "php"
  },
  "cache_context.ip": {
    "prefix": [
      "@Service (\"cache_context.ip\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\IpCacheContext",
      " */",
      "${1:\\$cache_context_ip_service} = \\Drupal::service('cache_context.ip');",
      ""
    ],
    "description": [
      "Defines the IpCacheContext service, for \"per IP address\" caching.",
      "",
      "Cache context ID: 'ip'."
    ],
    "scope": "php"
  },
  "cache_context.languages": {
    "prefix": [
      "@Service (\"cache_context.languages\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\LanguagesCacheContext",
      " */",
      "${1:\\$cache_context_languages_service} = \\Drupal::service('cache_context.languages');",
      ""
    ],
    "description": [
      "Defines the LanguagesCacheContext service, for \"per language\" caching."
    ],
    "scope": "php"
  },
  "cache_context.protocol_version": {
    "prefix": [
      "@Service (\"cache_context.protocol_version\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\ProtocolVersionCacheContext",
      " */",
      "${1:\\$cache_context_protocol_version_service} = \\Drupal::service('cache_context.protocol_version');",
      ""
    ],
    "description": [
      "Defines the ProtocolVersionCacheContext service, for \"per protocol\" caching.",
      "",
      "Useful to differentiate between HTTP/1.1 and HTTP/2.0 responses for example,",
      "to allow responses to be optimized for protocol-specific characteristics.",
      "",
      "Cache context ID: 'protocol_version'."
    ],
    "scope": "php"
  },
  "cache_context.request_format": {
    "prefix": [
      "@Service (\"cache_context.request_format\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\RequestFormatCacheContext",
      " */",
      "${1:\\$cache_context_request_format_service} = \\Drupal::service('cache_context.request_format');",
      ""
    ],
    "description": [
      "Defines the RequestFormatCacheContext service, for \"per format\" caching.",
      "",
      "Cache context ID: 'request_format'."
    ],
    "scope": "php"
  },
  "cache_context.route": {
    "prefix": [
      "@Service (\"cache_context.route\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\RouteCacheContext",
      " */",
      "${1:\\$cache_context_route_service} = \\Drupal::service('cache_context.route');",
      ""
    ],
    "description": [
      "Defines the RouteCacheContext service, for \"per route\" caching.",
      "",
      "Cache context ID: 'route'."
    ],
    "scope": "php"
  },
  "cache_context.route.menu_active_trails": {
    "prefix": [
      "@Service (\"cache_context.route.menu_active_trails\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\MenuActiveTrailsCacheContext",
      " */",
      "${1:\\$cache_context_route_menu_active_trails_service} = \\Drupal::service('cache_context.route.menu_active_trails');",
      ""
    ],
    "description": [
      "Defines the MenuActiveTrailsCacheContext service.",
      "",
      "This class is container-aware to avoid initializing the 'menu.active_trails'",
      "service (and its dependencies) when it is not necessary."
    ],
    "scope": "php"
  },
  "cache_context.route.name": {
    "prefix": [
      "@Service (\"cache_context.route.name\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\RouteNameCacheContext",
      " */",
      "${1:\\$cache_context_route_name_service} = \\Drupal::service('cache_context.route.name');",
      ""
    ],
    "description": [
      "Defines the RouteCacheContext service, for \"per route name\" caching.",
      "",
      "Cache context ID: 'route.name'."
    ],
    "scope": "php"
  },
  "cache_context.session": {
    "prefix": [
      "@Service (\"cache_context.session\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\SessionCacheContext",
      " */",
      "${1:\\$cache_context_session_service} = \\Drupal::service('cache_context.session');",
      ""
    ],
    "description": [
      "Defines the SessionCacheContext service, for \"per session\" caching.",
      "",
      "Cache context ID: 'session'."
    ],
    "scope": "php"
  },
  "cache_context.session.exists": {
    "prefix": [
      "@Service (\"cache_context.session.exists\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\SessionExistsCacheContext",
      " */",
      "${1:\\$cache_context_session_exists_service} = \\Drupal::service('cache_context.session.exists');",
      ""
    ],
    "description": [
      "Defines the SessionExistsCacheContext service, for \"session or not\" caching.",
      "",
      "Cache context ID: 'session.exists'."
    ],
    "scope": "php"
  },
  "cache_context.theme": {
    "prefix": [
      "@Service (\"cache_context.theme\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\ThemeCacheContext",
      " */",
      "${1:\\$cache_context_theme_service} = \\Drupal::service('cache_context.theme');",
      ""
    ],
    "description": [
      "Defines the ThemeCacheContext service, for \"per theme\" caching.",
      "",
      "Cache context ID: 'theme'."
    ],
    "scope": "php"
  },
  "cache_context.timezone": {
    "prefix": [
      "@Service (\"cache_context.timezone\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\TimeZoneCacheContext",
      " */",
      "${1:\\$cache_context_timezone_service} = \\Drupal::service('cache_context.timezone');",
      ""
    ],
    "description": [
      "Defines the TimeZoneCacheContext service, for \"per time zone\" caching.",
      "",
      "Cache context ID: 'timezone'.",
      "",
      "@see \\Drupal\\Core\\Session\\AccountProxy::setAccount()"
    ],
    "scope": "php"
  },
  "cache_context.url": {
    "prefix": [
      "@Service (\"cache_context.url\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\UrlCacheContext",
      " */",
      "${1:\\$cache_context_url_service} = \\Drupal::service('cache_context.url');",
      ""
    ],
    "description": [
      "Defines the UrlCacheContext service, for \"per page\" caching.",
      "",
      "Cache context ID: 'url'."
    ],
    "scope": "php"
  },
  "cache_context.url.path": {
    "prefix": [
      "@Service (\"cache_context.url.path\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\PathCacheContext",
      " */",
      "${1:\\$cache_context_url_path_service} = \\Drupal::service('cache_context.url.path');",
      ""
    ],
    "description": [
      "Defines the PathCacheContext service, for \"per URL path\" caching.",
      "",
      "Cache context ID: 'url.path'.",
      "",
      "(This allows for caching relative URLs.)",
      "",
      "@see \\Symfony\\Component\\HttpFoundation\\Request::getBasePath()",
      "@see \\Symfony\\Component\\HttpFoundation\\Request::getPathInfo()"
    ],
    "scope": "php"
  },
  "cache_context.url.path.is_front": {
    "prefix": [
      "@Service (\"cache_context.url.path.is_front\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\IsFrontPathCacheContext",
      " */",
      "${1:\\$cache_context_url_path_is_front_service} = \\Drupal::service('cache_context.url.path.is_front');",
      ""
    ],
    "description": [
      "Defines a cache context for whether the URL is the front page of the site.",
      "",
      "Cache context ID: 'url.path.is_front'."
    ],
    "scope": "php"
  },
  "cache_context.url.path.parent": {
    "prefix": [
      "@Service (\"cache_context.url.path.parent\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\PathParentCacheContext",
      " */",
      "${1:\\$cache_context_url_path_parent_service} = \\Drupal::service('cache_context.url.path.parent');",
      ""
    ],
    "description": [
      "Defines a cache context service for path parents.",
      "",
      "Cache context ID: 'url.path.parent'.",
      "",
      "This allows for caching based on the path, excluding everything after the",
      "last forward slash."
    ],
    "scope": "php"
  },
  "cache_context.url.query_args": {
    "prefix": [
      "@Service (\"cache_context.url.query_args\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\QueryArgsCacheContext",
      " */",
      "${1:\\$cache_context_url_query_args_service} = \\Drupal::service('cache_context.url.query_args');",
      ""
    ],
    "description": [
      "Defines the QueryArgsCacheContext service, for \"per query args\" caching.",
      "",
      "Cache context ID: 'url.query_args' (to vary by all query arguments).",
      "Calculated cache context ID: 'url.query_args:%key', e.g.'url.query_args:foo'",
      "(to vary by the 'foo' query argument)."
    ],
    "scope": "php"
  },
  "cache_context.url.query_args.pagers": {
    "prefix": [
      "@Service (\"cache_context.url.query_args.pagers\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\PagersCacheContext",
      " */",
      "${1:\\$cache_context_url_query_args_pagers_service} = \\Drupal::service('cache_context.url.query_args.pagers');",
      ""
    ],
    "description": [
      "Defines a cache context for \"per page in a pager\" caching.",
      "",
      "Cache context ID: 'url.query_args.pagers' (to vary by all pagers).",
      "Calculated cache context ID: 'url.query_args.pagers:%pager_id', e.g.",
      "'url.query_args.pagers:1' (to vary by the pager with ID 1)."
    ],
    "scope": "php"
  },
  "cache_context.url.site": {
    "prefix": [
      "@Service (\"cache_context.url.site\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\SiteCacheContext",
      " */",
      "${1:\\$cache_context_url_site_service} = \\Drupal::service('cache_context.url.site');",
      ""
    ],
    "description": [
      "Defines the SiteCacheContext service, for \"per site\" caching.",
      "",
      "Cache context ID: 'url.site'.",
      "",
      "A \"site\" is defined as the combination of URI scheme, domain name, port and",
      "base path. It allows for varying between the *same* site being accessed via",
      "different entry points. (Different sites in a multisite setup have separate",
      "databases.) For example: http://example.com and http://www.example.com.",
      "",
      "@see \\Symfony\\Component\\HttpFoundation\\Request::getSchemeAndHttpHost()",
      "@see \\Symfony\\Component\\HttpFoundation\\Request::getBaseUrl()"
    ],
    "scope": "php"
  },
  "cache_context.user": {
    "prefix": [
      "@Service (\"cache_context.user\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\UserCacheContext",
      " */",
      "${1:\\$cache_context_user_service} = \\Drupal::service('cache_context.user');",
      ""
    ],
    "description": [
      "Defines the UserCacheContext service, for \"per user\" caching.",
      "",
      "Cache context ID: 'user'."
    ],
    "scope": "php"
  },
  "cache_context.user.is_super_user": {
    "prefix": [
      "@Service (\"cache_context.user.is_super_user\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\IsSuperUserCacheContext",
      " */",
      "${1:\\$cache_context_user_is_super_user_service} = \\Drupal::service('cache_context.user.is_super_user');",
      ""
    ],
    "description": [
      "Defines the IsSuperUserCacheContext service, for \"super user or not\" caching.",
      "",
      "Cache context ID: 'user.is_super_user'."
    ],
    "scope": "php"
  },
  "cache_context.user.permissions": {
    "prefix": [
      "@Service (\"cache_context.user.permissions\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\AccountPermissionsCacheContext",
      " */",
      "${1:\\$cache_context_user_permissions_service} = \\Drupal::service('cache_context.user.permissions');",
      ""
    ],
    "description": [
      "Defines the AccountPermissionsCacheContext service, for \"per permission\" caching.",
      "",
      "Cache context ID: 'user.permissions'."
    ],
    "scope": "php"
  },
  "cache_context.user.roles": {
    "prefix": [
      "@Service (\"cache_context.user.roles\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\UserRolesCacheContext",
      " */",
      "${1:\\$cache_context_user_roles_service} = \\Drupal::service('cache_context.user.roles');",
      ""
    ],
    "description": [
      "Defines the UserRolesCacheContext service, for \"per role\" caching.",
      "",
      "Only use this cache context when checking explicitly for certain roles. Use",
      "user.permissions for anything that checks permissions.",
      "",
      "Cache context ID: 'user.roles' (to vary by all roles of the current user).",
      "Calculated cache context ID: 'user.roles:%role', e.g. 'user.roles:anonymous'",
      "(to vary by the presence/absence of a specific role)."
    ],
    "scope": "php"
  },
  "cache_contexts_manager": {
    "prefix": [
      "@Service (\"cache_contexts_manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\Context\\CacheContextsManager",
      " */",
      "${1:\\$cache_contexts_manager_service} = \\Drupal::service('cache_contexts_manager');",
      ""
    ],
    "description": [
      "Converts cache context tokens into cache keys.",
      "",
      "Uses cache context services (services tagged with 'cache.context', and whose",
      "service ID has the 'cache_context.' prefix) to dynamically generate cache",
      "keys based on the request context, thus allowing developers to express the",
      "state by which should varied (the current URL, language, and so on).",
      "",
      "Note that this maps exactly to HTTP's Vary header semantics:",
      "@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.44",
      "",
      "@see \\Drupal\\Core\\Cache\\Context\\CacheContextInterface",
      "@see \\Drupal\\Core\\Cache\\Context\\CalculatedCacheContextInterface",
      "@see \\Drupal\\Core\\Cache\\Context\\CacheContextsPass"
    ],
    "scope": "php"
  },
  "cache_factory": {
    "prefix": [
      "@Service (\"cache_factory\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\CacheFactory",
      " */",
      "${1:\\$cache_factory_service} = \\Drupal::service('cache_factory');",
      ""
    ],
    "description": [
      "Defines the cache backend factory."
    ],
    "scope": "php"
  },
  "cache_router_rebuild_subscriber": {
    "prefix": [
      "@Service (\"cache_router_rebuild_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\CacheRouterRebuildSubscriber",
      " */",
      "${1:\\$cache_router_rebuild_subscriber_service} = \\Drupal::service('cache_router_rebuild_subscriber');",
      ""
    ],
    "description": [
      "Clear cache tags when the router is rebuilt."
    ],
    "scope": "php"
  },
  "cache_tags.invalidator": {
    "prefix": [
      "@Service (\"cache_tags.invalidator\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\CacheTagsInvalidator",
      " */",
      "${1:\\$cache_tags_invalidator_service} = \\Drupal::service('cache_tags.invalidator');",
      ""
    ],
    "description": [
      "Passes cache tag events to classes that wish to respond to them."
    ],
    "scope": "php"
  },
  "cache_tags.invalidator.checksum": {
    "prefix": [
      "@Service (\"cache_tags.invalidator.checksum\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\DatabaseCacheTagsChecksum",
      " */",
      "${1:\\$cache_tags_invalidator_checksum_service} = \\Drupal::service('cache_tags.invalidator.checksum');",
      ""
    ],
    "description": [
      "Cache tags invalidations checksum implementation that uses the database."
    ],
    "scope": "php"
  },
  "class_resolver": {
    "prefix": [
      "@Service (\"class_resolver\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\DependencyInjection\\ClassResolver",
      " */",
      "${1:\\$class_resolver_service} = \\Drupal::service('class_resolver');",
      ""
    ],
    "description": [
      "Implements the class resolver interface supporting class names and services."
    ],
    "scope": "php"
  },
  "client_error_response_subscriber": {
    "prefix": [
      "@Service (\"client_error_response_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\ClientErrorResponseSubscriber",
      " */",
      "${1:\\$client_error_response_subscriber_service} = \\Drupal::service('client_error_response_subscriber');",
      ""
    ],
    "description": [
      "Response subscriber to set the '4xx-response' cache tag on 4xx responses."
    ],
    "scope": "php"
  },
  "config.factory": {
    "prefix": [
      "@Service (\"config.factory\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Config\\ConfigFactory",
      " */",
      "${1:\\$config_factory_service} = \\Drupal::service('config.factory');",
      ""
    ],
    "description": [
      "Defines the configuration object factory.",
      "",
      "The configuration object factory instantiates a Config object for each",
      "configuration object name that is accessed and returns it to callers.",
      "",
      "@see \\Drupal\\Core\\Config\\Config",
      "",
      "Each configuration object gets a storage object injected, which",
      "is used for reading and writing the configuration data.",
      "",
      "@see \\Drupal\\Core\\Config\\StorageInterface",
      "",
      "@ingroup config_api"
    ],
    "scope": "php"
  },
  "config.import_transformer": {
    "prefix": [
      "@Service (\"config.import_transformer\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Config\\ImportStorageTransformer",
      " */",
      "${1:\\$config_import_transformer_service} = \\Drupal::service('config.import_transformer');",
      ""
    ],
    "description": [
      "The import storage transformer helps to use the configuration management api.",
      "",
      "This service does not implement an interface and is final because it is not",
      "meant to be replaced, extended or used in a different context.",
      "Its single purpose is to transform a storage for the import step of a",
      "configuration synchronization by dispatching the import transformation event."
    ],
    "scope": "php"
  },
  "config.importer_subscriber": {
    "prefix": [
      "@Service (\"config.importer_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Config\\Importer\\FinalMissingContentSubscriber",
      " */",
      "${1:\\$config_importer_subscriber_service} = \\Drupal::service('config.importer_subscriber');",
      ""
    ],
    "description": [
      "Final event subscriber to the missing content event.",
      "",
      "Ensure that all missing content dependencies are removed from the event so",
      "the importer can complete.",
      "",
      "@see \\Drupal\\Core\\Config\\ConfigImporter::processMissingContent()"
    ],
    "scope": "php"
  },
  "config.installer": {
    "prefix": [
      "@Service (\"config.installer\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Config\\ConfigInstaller",
      " */",
      "${1:\\$config_installer_service} = \\Drupal::service('config.installer');",
      ""
    ],
    "description": [
      "   * The configuration factory.",
      "   *",
      "   * @var \\Drupal\\Core\\Config\\ConfigFactoryInterface",
      "   */"
    ],
    "scope": "php"
  },
  "config.manager": {
    "prefix": [
      "@Service (\"config.manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Config\\ConfigManager",
      " */",
      "${1:\\$config_manager_service} = \\Drupal::service('config.manager');",
      ""
    ],
    "description": [
      "The ConfigManager provides helper functions for the configuration system."
    ],
    "scope": "php"
  },
  "config.storage": {
    "prefix": [
      "@Service (\"config.storage\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Config\\CachedStorage",
      " */",
      "${1:\\$config_storage_service} = \\Drupal::service('config.storage');",
      ""
    ],
    "description": [
      "Defines the cached storage.",
      "",
      "The class gets another storage and a cache backend injected. It reads from",
      "the cache and delegates the read to the storage on a cache miss. It also",
      "handles cache invalidation."
    ],
    "scope": "php"
  },
  "config.storage.export": {
    "prefix": [
      "@Service (\"config.storage.export\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Config\\ManagedStorage",
      " */",
      "${1:\\$config_storage_export_service} = \\Drupal::service('config.storage.export');",
      ""
    ],
    "description": [
      "The managed storage defers all the storage method calls to the manager.",
      "",
      "The reason for deferring all the method calls is that the storage interface",
      "is the API but we potentially need to do an expensive transformation before",
      "the storage can be used so we can't do it in the constructor but we also",
      "don't know which method is called first.",
      "",
      "This class is not meant to be extended and is final to make sure the",
      "assumptions that the storage is retrieved only once are upheld."
    ],
    "scope": "php"
  },
  "config.storage.schema": {
    "prefix": [
      "@Service (\"config.storage.schema\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Config\\ExtensionInstallStorage",
      " */",
      "${1:\\$config_storage_schema_service} = \\Drupal::service('config.storage.schema');",
      ""
    ],
    "description": [
      "Storage to access configuration and schema in enabled extensions.",
      "",
      "@see \\Drupal\\Core\\Config\\ConfigInstaller",
      "@see \\Drupal\\Core\\Config\\TypedConfigManager"
    ],
    "scope": "php"
  },
  "config.storage.snapshot": {
    "prefix": [
      "@Service (\"config.storage.snapshot\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Config\\DatabaseStorage",
      " */",
      "${1:\\$config_storage_snapshot_service} = \\Drupal::service('config.storage.snapshot');",
      ""
    ],
    "description": [
      "Defines the Database storage."
    ],
    "scope": "php"
  },
  "config.storage.sync": {
    "prefix": [
      "@Service (\"config.storage.sync\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Config\\FileStorage",
      " */",
      "${1:\\$config_storage_sync_service} = \\Drupal::service('config.storage.sync');",
      ""
    ],
    "description": [
      "Defines the file storage."
    ],
    "scope": "php"
  },
  "config.typed": {
    "prefix": [
      "@Service (\"config.typed\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Config\\TypedConfigManager",
      " */",
      "${1:\\$config_typed_service} = \\Drupal::service('config.typed');",
      ""
    ],
    "description": [
      "Manages config schema type plugins."
    ],
    "scope": "php"
  },
  "config_exclude_modules_subscriber": {
    "prefix": [
      "@Service (\"config_exclude_modules_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\ExcludedModulesEventSubscriber",
      " */",
      "${1:\\$config_exclude_modules_subscriber_service} = \\Drupal::service('config_exclude_modules_subscriber');",
      ""
    ],
    "description": [
      "The event subscriber preventing excluded modules to be exported."
    ],
    "scope": "php"
  },
  "config_import_subscriber": {
    "prefix": [
      "@Service (\"config_import_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\ConfigImportSubscriber",
      " */",
      "${1:\\$config_import_subscriber_service} = \\Drupal::service('config_import_subscriber');",
      ""
    ],
    "description": [
      "Config import subscriber for config import events."
    ],
    "scope": "php"
  },
  "config_snapshot_subscriber": {
    "prefix": [
      "@Service (\"config_snapshot_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\ConfigSnapshotSubscriber",
      " */",
      "${1:\\$config_snapshot_subscriber_service} = \\Drupal::service('config_snapshot_subscriber');",
      ""
    ],
    "description": [
      "Create a snapshot when config is imported."
    ],
    "scope": "php"
  },
  "container.namespaces": {
    "prefix": [
      "@Service (\"container.namespaces\")"
    ],
    "body": [
      "/**",
      " * @var ArrayObject",
      " */",
      "${1:\\$container_namespaces_service} = \\Drupal::service('container.namespaces');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "content_type_header_matcher": {
    "prefix": [
      "@Service (\"content_type_header_matcher\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Routing\\ContentTypeHeaderMatcher",
      " */",
      "${1:\\$content_type_header_matcher_service} = \\Drupal::service('content_type_header_matcher');",
      ""
    ],
    "description": [
      "Filters routes based on the HTTP Content-type header."
    ],
    "scope": "php"
  },
  "content_uninstall_validator": {
    "prefix": [
      "@Service (\"content_uninstall_validator\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\ContentUninstallValidator",
      " */",
      "${1:\\$content_uninstall_validator_service} = \\Drupal::service('content_uninstall_validator');",
      ""
    ],
    "description": [
      "Validates module uninstall readiness based on existing content entities."
    ],
    "scope": "php"
  },
  "context.handler": {
    "prefix": [
      "@Service (\"context.handler\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Plugin\\Context\\ContextHandler",
      " */",
      "${1:\\$context_handler_service} = \\Drupal::service('context.handler');",
      ""
    ],
    "description": [
      "Provides methods to handle sets of contexts."
    ],
    "scope": "php"
  },
  "context.repository": {
    "prefix": [
      "@Service (\"context.repository\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Plugin\\Context\\LazyContextRepository",
      " */",
      "${1:\\$context_repository_service} = \\Drupal::service('context.repository');",
      ""
    ],
    "description": [
      "Provides a context repository which uses context provider services."
    ],
    "scope": "php"
  },
  "controller.entity_form": {
    "prefix": [
      "@Service (\"controller.entity_form\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\HtmlEntityFormController",
      " */",
      "${1:\\$controller_entity_form_service} = \\Drupal::service('controller.entity_form');",
      ""
    ],
    "description": [
      "Wrapping controller for entity forms that serve as the main page body."
    ],
    "scope": "php"
  },
  "controller.form": {
    "prefix": [
      "@Service (\"controller.form\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Controller\\HtmlFormController",
      " */",
      "${1:\\$controller_form_service} = \\Drupal::service('controller.form');",
      ""
    ],
    "description": [
      "Wrapping controller for forms that serve as the main page body."
    ],
    "scope": "php"
  },
  "controller_resolver": {
    "prefix": [
      "@Service (\"controller_resolver\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Controller\\ControllerResolver",
      " */",
      "${1:\\$controller_resolver_service} = \\Drupal::service('controller_resolver');",
      ""
    ],
    "description": [
      "ControllerResolver to enhance controllers beyond Symfony's basic handling.",
      "",
      "It adds two behaviors:",
      "",
      " - When creating a new object-based controller that implements",
      "   ContainerAwareInterface, inject the container into it. While not always",
      "   necessary, that allows a controller to vary the services it needs at",
      "   runtime.",
      "",
      " - By default, a controller name follows the class::method notation. This",
      "   class adds the possibility to use a service from the container as a",
      "   controller by using a service:method notation (Symfony uses the same",
      "   convention)."
    ],
    "scope": "php"
  },
  "country_manager": {
    "prefix": [
      "@Service (\"country_manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Locale\\CountryManager",
      " */",
      "${1:\\$country_manager_service} = \\Drupal::service('country_manager');",
      ""
    ],
    "description": [
      "Provides list of countries."
    ],
    "scope": "php"
  },
  "cron": {
    "prefix": [
      "@Service (\"cron\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cron",
      " */",
      "${1:\\$cron_service} = \\Drupal::service('cron');",
      ""
    ],
    "description": [
      "The Drupal core Cron service."
    ],
    "scope": "php"
  },
  "csrf_token": {
    "prefix": [
      "@Service (\"csrf_token\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Access\\CsrfTokenGenerator",
      " */",
      "${1:\\$csrf_token_service} = \\Drupal::service('csrf_token');",
      ""
    ],
    "description": [
      "Generates and validates CSRF tokens.",
      "",
      "@see \\Drupal\\Tests\\Core\\Access\\CsrfTokenGeneratorTest"
    ],
    "scope": "php"
  },
  "current_route_match": {
    "prefix": [
      "@Service (\"current_route_match\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Routing\\CurrentRouteMatch",
      " */",
      "${1:\\$current_route_match_service} = \\Drupal::service('current_route_match');",
      ""
    ],
    "description": [
      "Default object for current_route_match service."
    ],
    "scope": "php"
  },
  "current_user": {
    "prefix": [
      "@Service (\"current_user\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Session\\AccountProxy",
      " */",
      "${1:\\$current_user_service} = \\Drupal::service('current_user');",
      ""
    ],
    "description": [
      "A proxied implementation of AccountInterface.",
      "",
      "The reason why we need an account proxy is that we don't want to have global",
      "state directly stored in the container.",
      "",
      "This proxy object avoids multiple invocations of the authentication manager",
      "which can happen if the current user is accessed in constructors. It also",
      "allows legacy code to change the current user where the user cannot be",
      "directly injected into dependent code."
    ],
    "scope": "php"
  },
  "database": {
    "prefix": [
      "@Service (\"database\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Database\\Connection",
      " */",
      "${1:\\$database_service} = \\Drupal::service('database');",
      ""
    ],
    "description": [
      "Base Database API class.",
      "",
      "This class provides a Drupal extension for a client database connection.",
      "Every database driver implementation must provide a concrete implementation",
      "of it to support special handling required by that database.",
      "The most common database abstraction layer in PHP is PDO.",
      "",
      "@see http://php.net/manual/book.pdo.php"
    ],
    "scope": "php"
  },
  "database.replica": {
    "prefix": [
      "@Service (\"database.replica\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Database\\Connection",
      " */",
      "${1:\\$database_replica_service} = \\Drupal::service('database.replica');",
      ""
    ],
    "description": [
      "Base Database API class.",
      "",
      "This class provides a Drupal extension for a client database connection.",
      "Every database driver implementation must provide a concrete implementation",
      "of it to support special handling required by that database.",
      "The most common database abstraction layer in PHP is PDO.",
      "",
      "@see http://php.net/manual/book.pdo.php"
    ],
    "scope": "php"
  },
  "database.replica_kill_switch": {
    "prefix": [
      "@Service (\"database.replica_kill_switch\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Database\\ReplicaKillSwitch",
      " */",
      "${1:\\$database_replica_kill_switch_service} = \\Drupal::service('database.replica_kill_switch');",
      ""
    ],
    "description": [
      "Provides replica server kill switch to ignore it."
    ],
    "scope": "php"
  },
  "database_driver_uninstall_validator": {
    "prefix": [
      "@Service (\"database_driver_uninstall_validator\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Extension\\DatabaseDriverUninstallValidator",
      " */",
      "${1:\\$database_driver_uninstall_validator_service} = \\Drupal::service('database_driver_uninstall_validator');",
      ""
    ],
    "description": [
      "Ensures installed modules providing a database driver are not uninstalled."
    ],
    "scope": "php"
  },
  "date.formatter": {
    "prefix": [
      "@Service (\"date.formatter\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Datetime\\DateFormatter",
      " */",
      "${1:\\$date_formatter_service} = \\Drupal::service('date.formatter');",
      ""
    ],
    "description": [
      "Provides a service to handle various date related functionality.",
      "",
      "@ingroup i18n"
    ],
    "scope": "php"
  },
  "datetime.time": {
    "prefix": [
      "@Service (\"datetime.time\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Component\\Datetime\\Time",
      " */",
      "${1:\\$datetime_time_service} = \\Drupal::service('datetime.time');",
      ""
    ],
    "description": [
      "Provides a class for obtaining system time."
    ],
    "scope": "php"
  },
  "diff.formatter": {
    "prefix": [
      "@Service (\"diff.formatter\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Diff\\DiffFormatter",
      " */",
      "${1:\\$diff_formatter_service} = \\Drupal::service('diff.formatter');",
      ""
    ],
    "description": [
      "Diff formatter which uses returns output that can be rendered to a table."
    ],
    "scope": "php"
  },
  "early_rendering_controller_wrapper_subscriber": {
    "prefix": [
      "@Service (\"early_rendering_controller_wrapper_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\EarlyRenderingControllerWrapperSubscriber",
      " */",
      "${1:\\$early_rendering_controller_wrapper_subscriber_service} = \\Drupal::service('early_rendering_controller_wrapper_subscriber');",
      ""
    ],
    "description": [
      "Subscriber that wraps controllers, to handle early rendering.",
      "",
      "When controllers call RendererInterface::render() outside of a render",
      "context, we call that \"early rendering\". Controllers should return",
      "only render arrays, but we cannot prevent controllers from doing",
      "early rendering. The problem with early rendering is that the",
      "bubbleable metadata (cacheability & attachments) are lost.",
      "",
      "This can lead to broken pages (missing assets), stale pages (missing cache",
      "tags causing a page not to be invalidated) or even security problems (missing",
      "cache contexts causing a cached page not to be varied sufficiently).",
      "",
      "This event subscriber wraps all controller executions in a closure that sets",
      "up a render context. Consequently, any early rendering will have their",
      "bubbleable metadata (assets & cacheability) stored on that render context.",
      "",
      "If the render context is empty, then the controller either did not do any",
      "rendering at all, or used the RendererInterface::renderRoot() or",
      "::renderPlain() methods. In that case, no bubbleable metadata is lost.",
      "",
      "If the render context is not empty, then the controller did use",
      "RendererInterface::render(), and bubbleable metadata was collected.",
      "This bubbleable metadata is then merged onto the render array.",
      "",
      "In other words: this just exists to ease the transition to Drupal 8: it",
      "allows controllers that return render arrays (the majority) and",
      "\\Drupal\\Core\\Ajax\\AjaxResponse\\AjaxResponse objects (a sizable minority that",
      "often involve a fair amount of rendering) to still do early rendering. But",
      "controllers that return any other kind of response are already expected to",
      "do the right thing, so if early rendering is detected in such a case, an",
      "exception is thrown.",
      "",
      "@see \\Drupal\\Core\\Render\\RendererInterface",
      "@see \\Drupal\\Core\\Render\\Renderer",
      "",
      "@todo Remove in Drupal 9.0.0, by disallowing early rendering."
    ],
    "scope": "php"
  },
  "email.validator": {
    "prefix": [
      "@Service (\"email.validator\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Component\\Utility\\EmailValidator",
      " */",
      "${1:\\$email_validator_service} = \\Drupal::service('email.validator');",
      ""
    ],
    "description": [
      "Validates email addresses."
    ],
    "scope": "php"
  },
  "entity.autocomplete_matcher": {
    "prefix": [
      "@Service (\"entity.autocomplete_matcher\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityAutocompleteMatcher",
      " */",
      "${1:\\$entity_autocomplete_matcher_service} = \\Drupal::service('entity.autocomplete_matcher');",
      ""
    ],
    "description": [
      "Matcher class to get autocompletion results for entity reference."
    ],
    "scope": "php"
  },
  "entity.bundle_config_import_validator": {
    "prefix": [
      "@Service (\"entity.bundle_config_import_validator\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\Event\\BundleConfigImportValidate",
      " */",
      "${1:\\$entity_bundle_config_import_validator_service} = \\Drupal::service('entity.bundle_config_import_validator');",
      ""
    ],
    "description": [
      "Entity config importer validation event subscriber."
    ],
    "scope": "php"
  },
  "entity.definition_update_manager": {
    "prefix": [
      "@Service (\"entity.definition_update_manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityDefinitionUpdateManager",
      " */",
      "${1:\\$entity_definition_update_manager_service} = \\Drupal::service('entity.definition_update_manager');",
      ""
    ],
    "description": [
      "Manages entity definition updates."
    ],
    "scope": "php"
  },
  "entity.form_builder": {
    "prefix": [
      "@Service (\"entity.form_builder\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityFormBuilder",
      " */",
      "${1:\\$entity_form_builder_service} = \\Drupal::service('entity.form_builder');",
      ""
    ],
    "description": [
      "Builds entity forms."
    ],
    "scope": "php"
  },
  "entity.last_installed_schema.repository": {
    "prefix": [
      "@Service (\"entity.last_installed_schema.repository\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityLastInstalledSchemaRepository",
      " */",
      "${1:\\$entity_last_installed_schema_repository_service} = \\Drupal::service('entity.last_installed_schema.repository');",
      ""
    ],
    "description": [
      "Provides a repository for installed entity definitions."
    ],
    "scope": "php"
  },
  "entity.memory_cache": {
    "prefix": [
      "@Service (\"entity.memory_cache\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Cache\\MemoryCache\\MemoryCache",
      " */",
      "${1:\\$entity_memory_cache_service} = \\Drupal::service('entity.memory_cache');",
      ""
    ],
    "description": [
      "Defines a memory cache implementation.",
      "",
      "Stores cache items in memory using a PHP array.",
      "",
      "@ingroup cache"
    ],
    "scope": "php"
  },
  "entity.query.config": {
    "prefix": [
      "@Service (\"entity.query.config\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Config\\Entity\\Query\\QueryFactory",
      " */",
      "${1:\\$entity_query_config_service} = \\Drupal::service('entity.query.config');",
      ""
    ],
    "description": [
      "Provides a factory for creating entity query objects for the config backend."
    ],
    "scope": "php"
  },
  "entity.query.keyvalue": {
    "prefix": [
      "@Service (\"entity.query.keyvalue\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\KeyValueStore\\Query\\QueryFactory",
      " */",
      "${1:\\$entity_query_keyvalue_service} = \\Drupal::service('entity.query.keyvalue');",
      ""
    ],
    "description": [
      "Provides a factory for creating the key value entity query."
    ],
    "scope": "php"
  },
  "entity.query.null": {
    "prefix": [
      "@Service (\"entity.query.null\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\Query\\Null\\QueryFactory",
      " */",
      "${1:\\$entity_query_null_service} = \\Drupal::service('entity.query.null');",
      ""
    ],
    "description": [
      "Provides a factory for creating entity query objects for the null backend."
    ],
    "scope": "php"
  },
  "entity.query.sql": {
    "prefix": [
      "@Service (\"entity.query.sql\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\Query\\Sql\\QueryFactory",
      " */",
      "${1:\\$entity_query_sql_service} = \\Drupal::service('entity.query.sql');",
      ""
    ],
    "description": [
      "Factory class creating entity query objects for the SQL backend.",
      "",
      "@see \\Drupal\\Core\\Entity\\Query\\Sql\\Query",
      "@see \\Drupal\\Core\\Entity\\Query\\Sql\\QueryAggregate"
    ],
    "scope": "php"
  },
  "entity.repository": {
    "prefix": [
      "@Service (\"entity.repository\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityRepository",
      " */",
      "${1:\\$entity_repository_service} = \\Drupal::service('entity.repository');",
      ""
    ],
    "description": [
      "Provides several mechanisms for retrieving entities."
    ],
    "scope": "php"
  },
  "entity_bundle.listener": {
    "prefix": [
      "@Service (\"entity_bundle.listener\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityBundleListener",
      " */",
      "${1:\\$entity_bundle_listener_service} = \\Drupal::service('entity_bundle.listener');",
      ""
    ],
    "description": [
      "Reacts to entity bundle CRUD on behalf of the Entity system."
    ],
    "scope": "php"
  },
  "entity_display.repository": {
    "prefix": [
      "@Service (\"entity_display.repository\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityDisplayRepository",
      " */",
      "${1:\\$entity_display_repository_service} = \\Drupal::service('entity_display.repository');",
      ""
    ],
    "description": [
      "Provides a repository for entity display objects (view modes and form modes)."
    ],
    "scope": "php"
  },
  "entity_field.deleted_fields_repository": {
    "prefix": [
      "@Service (\"entity_field.deleted_fields_repository\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Field\\DeletedFieldsRepository",
      " */",
      "${1:\\$entity_field_deleted_fields_repository_service} = \\Drupal::service('entity_field.deleted_fields_repository');",
      ""
    ],
    "description": [
      "Provides a repository for deleted field and field storage objects.",
      "",
      "@internal"
    ],
    "scope": "php"
  },
  "entity_field.manager": {
    "prefix": [
      "@Service (\"entity_field.manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityFieldManager",
      " */",
      "${1:\\$entity_field_manager_service} = \\Drupal::service('entity_field.manager');",
      ""
    ],
    "description": [
      "Manages the discovery of entity fields.",
      "",
      "This includes field definitions, base field definitions, and field storage",
      "definitions."
    ],
    "scope": "php"
  },
  "entity_route_subscriber": {
    "prefix": [
      "@Service (\"entity_route_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\EntityRouteProviderSubscriber",
      " */",
      "${1:\\$entity_route_subscriber_service} = \\Drupal::service('entity_route_subscriber');",
      ""
    ],
    "description": [
      "Ensures that routes can be provided by entity types."
    ],
    "scope": "php"
  },
  "entity_type.bundle.info": {
    "prefix": [
      "@Service (\"entity_type.bundle.info\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityTypeBundleInfo",
      " */",
      "${1:\\$entity_type_bundle_info_service} = \\Drupal::service('entity_type.bundle.info');",
      ""
    ],
    "description": [
      "Provides discovery and retrieval of entity type bundles."
    ],
    "scope": "php"
  },
  "entity_type.listener": {
    "prefix": [
      "@Service (\"entity_type.listener\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityTypeListener",
      " */",
      "${1:\\$entity_type_listener_service} = \\Drupal::service('entity_type.listener');",
      ""
    ],
    "description": [
      "Reacts to entity type CRUD on behalf of the Entity system.",
      "",
      "@see \\Drupal\\Core\\Entity\\EntityTypeEvents"
    ],
    "scope": "php"
  },
  "entity_type.manager": {
    "prefix": [
      "@Service (\"entity_type.manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityTypeManager",
      " */",
      "${1:\\$entity_type_manager_service} = \\Drupal::service('entity_type.manager');",
      ""
    ],
    "description": [
      "Manages entity type plugin definitions.",
      "",
      "Each entity type definition array is set in the entity type's annotation and",
      "altered by hook_entity_type_alter().",
      "",
      "Do not use hook_entity_type_alter() hook to add information to entity types,",
      "unless one of the following is true:",
      "- You are filling in default values.",
      "- You need to dynamically add information only in certain circumstances.",
      "- Your hook needs to run after hook_entity_type_build() implementations.",
      "Use hook_entity_type_build() instead in all other cases.",
      "",
      "@see \\Drupal\\Core\\Entity\\Annotation\\EntityType",
      "@see \\Drupal\\Core\\Entity\\EntityInterface",
      "@see \\Drupal\\Core\\Entity\\EntityTypeInterface",
      "@see hook_entity_type_alter()",
      "@see hook_entity_type_build()"
    ],
    "scope": "php"
  },
  "entity_type.repository": {
    "prefix": [
      "@Service (\"entity_type.repository\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityTypeRepository",
      " */",
      "${1:\\$entity_type_repository_service} = \\Drupal::service('entity_type.repository');",
      ""
    ],
    "description": [
      "Provides helper methods for loading entity types.",
      "",
      "@see \\Drupal\\Core\\Entity\\EntityTypeManagerInterface"
    ],
    "scope": "php"
  },
  "event_dispatcher": {
    "prefix": [
      "@Service (\"event_dispatcher\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Component\\EventDispatcher\\ContainerAwareEventDispatcher",
      " */",
      "${1:\\$event_dispatcher_service} = \\Drupal::service('event_dispatcher');",
      ""
    ],
    "description": [
      "A performance optimized container aware event dispatcher.",
      "",
      "This version of the event dispatcher contains the following optimizations",
      "in comparison to the Symfony event dispatcher component:",
      "",
      "",
      "  Faster instantiation of the event dispatcher service",
      "  ",
      "    Instead of calling addSubscriberService once for each",
      "    subscriber, a precompiled array of listener definitions is passed",
      "    directly to the constructor. This is faster by roughly an order of",
      "    magnitude. The listeners are collected and prepared using a compiler",
      "    pass.",
      "  ",
      "  Lazy instantiation of listeners",
      "  ",
      "    Services are only retrieved from the container just before invocation.",
      "    Especially when dispatching the KernelEvents::REQUEST event, this leads",
      "    to a more timely invocation of the first listener. Overall dispatch",
      "    runtime is not affected by this change though.",
      "  ",
      ""
    ],
    "scope": "php"
  },
  "exception.custom_page_html": {
    "prefix": [
      "@Service (\"exception.custom_page_html\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\CustomPageExceptionHtmlSubscriber",
      " */",
      "${1:\\$exception_custom_page_html_service} = \\Drupal::service('exception.custom_page_html');",
      ""
    ],
    "description": [
      "Exception subscriber for handling core custom HTML error pages."
    ],
    "scope": "php"
  },
  "exception.default_html": {
    "prefix": [
      "@Service (\"exception.default_html\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\DefaultExceptionHtmlSubscriber",
      " */",
      "${1:\\$exception_default_html_service} = \\Drupal::service('exception.default_html');",
      ""
    ],
    "description": [
      "Exception subscriber for handling core default HTML error pages."
    ],
    "scope": "php"
  },
  "exception.default_json": {
    "prefix": [
      "@Service (\"exception.default_json\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\ExceptionJsonSubscriber",
      " */",
      "${1:\\$exception_default_json_service} = \\Drupal::service('exception.default_json');",
      ""
    ],
    "description": [
      "Default handling for JSON errors."
    ],
    "scope": "php"
  },
  "exception.enforced_form_response": {
    "prefix": [
      "@Service (\"exception.enforced_form_response\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\EnforcedFormResponseSubscriber",
      " */",
      "${1:\\$exception_enforced_form_response_service} = \\Drupal::service('exception.enforced_form_response');",
      ""
    ],
    "description": [
      "Handle the EnforcedResponseException and deliver an EnforcedResponse."
    ],
    "scope": "php"
  },
  "exception.fast_404_html": {
    "prefix": [
      "@Service (\"exception.fast_404_html\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\Fast404ExceptionHtmlSubscriber",
      " */",
      "${1:\\$exception_fast_404_html_service} = \\Drupal::service('exception.fast_404_html');",
      ""
    ],
    "description": [
      "High-performance 404 exception subscriber.",
      "",
      "This subscriber will return a minimalist 404 response for HTML requests",
      "without running a full page theming operation.",
      "",
      "Fast 404s are configured using the system.performance configuration object.",
      "There are the following options:",
      "- system.performance:fast_404.exclude_paths: A regular expression to match",
      "  paths to exclude, such as images generated by image styles, or",
      "  dynamically-resized images. The default pattern provided below also",
      "  excludes the private file system. If you need to add more paths, you can",
      "  add '|path' to the expression.",
      "- system.performance:fast_404.paths: A regular expression to match paths that",
      "  should return a simple 404 page, rather than the fully themed 404 page. If",
      "  you don't have any aliases ending in htm or html you can add '|s?html?' to",
      "  the expression.",
      "- system.performance:fast_404.html: The html to return for simple 404 pages."
    ],
    "scope": "php"
  },
  "exception.final": {
    "prefix": [
      "@Service (\"exception.final\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\FinalExceptionSubscriber",
      " */",
      "${1:\\$exception_final_service} = \\Drupal::service('exception.final');",
      ""
    ],
    "description": [
      "Last-chance handler for exceptions: the final exception subscriber.",
      "",
      "This handler will catch any exceptions not caught elsewhere and report",
      "them as an error page.",
      "",
      "Each format has its own way of handling exceptions:",
      "- html: exception.default_html, exception.custom_page_html and",
      "  exception.fast_404_html",
      "- json: exception.default_json",
      "",
      "And when the serialization module is installed, all serialization formats are",
      "handled by a single exception subscriber:: serialization.exception.default.",
      "",
      "This exception subscriber runs after all the above (it has a lower priority),",
      "which makes it the last-chance exception handler. It always sends a plain",
      "text response. If it's a displayable error and the error level is configured",
      "to be verbose, then a helpful backtrace is also printed."
    ],
    "scope": "php"
  },
  "exception.logger": {
    "prefix": [
      "@Service (\"exception.logger\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\ExceptionLoggingSubscriber",
      " */",
      "${1:\\$exception_logger_service} = \\Drupal::service('exception.logger');",
      ""
    ],
    "description": [
      "Log exceptions without further handling."
    ],
    "scope": "php"
  },
  "exception.needs_installer": {
    "prefix": [
      "@Service (\"exception.needs_installer\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\ExceptionDetectNeedsInstallSubscriber",
      " */",
      "${1:\\$exception_needs_installer_service} = \\Drupal::service('exception.needs_installer');",
      ""
    ],
    "description": [
      "Exception handler to determine if an exception indicates an uninstalled site."
    ],
    "scope": "php"
  },
  "extension.list.module": {
    "prefix": [
      "@Service (\"extension.list.module\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Extension\\ModuleExtensionList",
      " */",
      "${1:\\$extension_list_module_service} = \\Drupal::service('extension.list.module');",
      ""
    ],
    "description": [
      "Provides a list of available modules.",
      "",
      "@internal",
      "  This class is not yet stable and therefore there are no guarantees that the",
      "  internal implementations including constructor signature and protected",
      "  properties / methods will not change over time. This will be reviewed after",
      "  https://www.drupal.org/project/drupal/issues/2940481"
    ],
    "scope": "php"
  },
  "extension.list.profile": {
    "prefix": [
      "@Service (\"extension.list.profile\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Extension\\ProfileExtensionList",
      " */",
      "${1:\\$extension_list_profile_service} = \\Drupal::service('extension.list.profile');",
      ""
    ],
    "description": [
      "Provides a list of installation profiles.",
      "",
      "@internal",
      "  This class is not yet stable and therefore there are no guarantees that the",
      "  internal implementations including constructor signature and protected",
      "  properties / methods will not change over time. This will be reviewed after",
      "  https://www.drupal.org/project/drupal/issues/2940481"
    ],
    "scope": "php"
  },
  "extension.list.theme": {
    "prefix": [
      "@Service (\"extension.list.theme\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Extension\\ThemeExtensionList",
      " */",
      "${1:\\$extension_list_theme_service} = \\Drupal::service('extension.list.theme');",
      ""
    ],
    "description": [
      "Provides a list of available themes.",
      "",
      "@internal",
      "  This class is not yet stable and therefore there are no guarantees that the",
      "  internal implementations including constructor signature and protected",
      "  properties / methods will not change over time. This will be reviewed after",
      "  https://www.drupal.org/project/drupal/issues/2940481"
    ],
    "scope": "php"
  },
  "extension.list.theme_engine": {
    "prefix": [
      "@Service (\"extension.list.theme_engine\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Extension\\ThemeEngineExtensionList",
      " */",
      "${1:\\$extension_list_theme_engine_service} = \\Drupal::service('extension.list.theme_engine');",
      ""
    ],
    "description": [
      "Provides a list of available theme engines.",
      "",
      "@internal",
      "  This class is not yet stable and therefore there are no guarantees that the",
      "  internal implementations including constructor signature and protected",
      "  properties / methods will not change over time. This will be reviewed after",
      "  https://www.drupal.org/project/drupal/issues/2940481"
    ],
    "scope": "php"
  },
  "extension.path.resolver": {
    "prefix": [
      "@Service (\"extension.path.resolver\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Extension\\ExtensionPathResolver",
      " */",
      "${1:\\$extension_path_resolver_service} = \\Drupal::service('extension.path.resolver');",
      ""
    ],
    "description": [
      "Factory for getting extension lists by type."
    ],
    "scope": "php"
  },
  "feed.bridge.reader": {
    "prefix": [
      "@Service (\"feed.bridge.reader\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Component\\Bridge\\ZfExtensionManagerSfContainer",
      " */",
      "${1:\\$feed_bridge_reader_service} = \\Drupal::service('feed.bridge.reader');",
      ""
    ],
    "description": [
      "Defines a bridge between the Laminas service manager to Symfony container.",
      "",
      "@deprecated in drupal:9.4.0 and is removed from drupal:10.0.0. The class has",
      "  moved to \\Drupal\\aggregator\\ZfExtensionManagerSfContainer.",
      "",
      "@see https://www.drupal.org/node/3258656"
    ],
    "scope": "php"
  },
  "feed.bridge.writer": {
    "prefix": [
      "@Service (\"feed.bridge.writer\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Component\\Bridge\\ZfExtensionManagerSfContainer",
      " */",
      "${1:\\$feed_bridge_writer_service} = \\Drupal::service('feed.bridge.writer');",
      ""
    ],
    "description": [
      "Defines a bridge between the Laminas service manager to Symfony container.",
      "",
      "@deprecated in drupal:9.4.0 and is removed from drupal:10.0.0. The class has",
      "  moved to \\Drupal\\aggregator\\ZfExtensionManagerSfContainer.",
      "",
      "@see https://www.drupal.org/node/3258656"
    ],
    "scope": "php"
  },
  "feed.reader.atomentry": {
    "prefix": [
      "@Service (\"feed.reader.atomentry\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Reader\\Extension\\Atom\\Entry",
      " */",
      "${1:\\$feed_reader_atomentry_service} = \\Drupal::service('feed.reader.atomentry');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.reader.atomfeed": {
    "prefix": [
      "@Service (\"feed.reader.atomfeed\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Reader\\Extension\\Atom\\Feed",
      " */",
      "${1:\\$feed_reader_atomfeed_service} = \\Drupal::service('feed.reader.atomfeed');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.reader.contententry": {
    "prefix": [
      "@Service (\"feed.reader.contententry\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Reader\\Extension\\Content\\Entry",
      " */",
      "${1:\\$feed_reader_contententry_service} = \\Drupal::service('feed.reader.contententry');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.reader.dublincoreentry": {
    "prefix": [
      "@Service (\"feed.reader.dublincoreentry\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Reader\\Extension\\DublinCore\\Entry",
      " */",
      "${1:\\$feed_reader_dublincoreentry_service} = \\Drupal::service('feed.reader.dublincoreentry');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.reader.dublincorefeed": {
    "prefix": [
      "@Service (\"feed.reader.dublincorefeed\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Reader\\Extension\\DublinCore\\Feed",
      " */",
      "${1:\\$feed_reader_dublincorefeed_service} = \\Drupal::service('feed.reader.dublincorefeed');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.reader.podcastentry": {
    "prefix": [
      "@Service (\"feed.reader.podcastentry\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Reader\\Extension\\Podcast\\Entry",
      " */",
      "${1:\\$feed_reader_podcastentry_service} = \\Drupal::service('feed.reader.podcastentry');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.reader.podcastfeed": {
    "prefix": [
      "@Service (\"feed.reader.podcastfeed\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Reader\\Extension\\Podcast\\Feed",
      " */",
      "${1:\\$feed_reader_podcastfeed_service} = \\Drupal::service('feed.reader.podcastfeed');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.reader.slashentry": {
    "prefix": [
      "@Service (\"feed.reader.slashentry\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Reader\\Extension\\Slash\\Entry",
      " */",
      "${1:\\$feed_reader_slashentry_service} = \\Drupal::service('feed.reader.slashentry');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.reader.threadentry": {
    "prefix": [
      "@Service (\"feed.reader.threadentry\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Reader\\Extension\\Thread\\Entry",
      " */",
      "${1:\\$feed_reader_threadentry_service} = \\Drupal::service('feed.reader.threadentry');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.reader.wellformedwebentry": {
    "prefix": [
      "@Service (\"feed.reader.wellformedwebentry\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Reader\\Extension\\WellFormedWeb\\Entry",
      " */",
      "${1:\\$feed_reader_wellformedwebentry_service} = \\Drupal::service('feed.reader.wellformedwebentry');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.writer.atomrendererfeed": {
    "prefix": [
      "@Service (\"feed.writer.atomrendererfeed\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Writer\\Extension\\Atom\\Renderer\\Feed",
      " */",
      "${1:\\$feed_writer_atomrendererfeed_service} = \\Drupal::service('feed.writer.atomrendererfeed');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.writer.contentrendererentry": {
    "prefix": [
      "@Service (\"feed.writer.contentrendererentry\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Writer\\Extension\\Content\\Renderer\\Entry",
      " */",
      "${1:\\$feed_writer_contentrendererentry_service} = \\Drupal::service('feed.writer.contentrendererentry');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.writer.dublincorerendererentry": {
    "prefix": [
      "@Service (\"feed.writer.dublincorerendererentry\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Writer\\Extension\\DublinCore\\Renderer\\Entry",
      " */",
      "${1:\\$feed_writer_dublincorerendererentry_service} = \\Drupal::service('feed.writer.dublincorerendererentry');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.writer.dublincorerendererfeed": {
    "prefix": [
      "@Service (\"feed.writer.dublincorerendererfeed\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Writer\\Extension\\DublinCore\\Renderer\\Feed",
      " */",
      "${1:\\$feed_writer_dublincorerendererfeed_service} = \\Drupal::service('feed.writer.dublincorerendererfeed');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.writer.itunesentry": {
    "prefix": [
      "@Service (\"feed.writer.itunesentry\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Writer\\Extension\\ITunes\\Entry",
      " */",
      "${1:\\$feed_writer_itunesentry_service} = \\Drupal::service('feed.writer.itunesentry');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.writer.itunesfeed": {
    "prefix": [
      "@Service (\"feed.writer.itunesfeed\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Writer\\Extension\\ITunes\\Feed",
      " */",
      "${1:\\$feed_writer_itunesfeed_service} = \\Drupal::service('feed.writer.itunesfeed');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.writer.itunesrendererentry": {
    "prefix": [
      "@Service (\"feed.writer.itunesrendererentry\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Writer\\Extension\\ITunes\\Renderer\\Entry",
      " */",
      "${1:\\$feed_writer_itunesrendererentry_service} = \\Drupal::service('feed.writer.itunesrendererentry');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.writer.itunesrendererfeed": {
    "prefix": [
      "@Service (\"feed.writer.itunesrendererfeed\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Writer\\Extension\\ITunes\\Renderer\\Feed",
      " */",
      "${1:\\$feed_writer_itunesrendererfeed_service} = \\Drupal::service('feed.writer.itunesrendererfeed');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.writer.slashrendererentry": {
    "prefix": [
      "@Service (\"feed.writer.slashrendererentry\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Writer\\Extension\\Slash\\Renderer\\Entry",
      " */",
      "${1:\\$feed_writer_slashrendererentry_service} = \\Drupal::service('feed.writer.slashrendererentry');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.writer.threadingrendererentry": {
    "prefix": [
      "@Service (\"feed.writer.threadingrendererentry\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Writer\\Extension\\Threading\\Renderer\\Entry",
      " */",
      "${1:\\$feed_writer_threadingrendererentry_service} = \\Drupal::service('feed.writer.threadingrendererentry');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "feed.writer.wellformedwebrendererentry": {
    "prefix": [
      "@Service (\"feed.writer.wellformedwebrendererentry\")"
    ],
    "body": [
      "/**",
      " * @var Laminas\\Feed\\Writer\\Extension\\WellFormedWeb\\Renderer\\Entry",
      " */",
      "${1:\\$feed_writer_wellformedwebrendererentry_service} = \\Drupal::service('feed.writer.wellformedwebrendererentry');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "field_definition.listener": {
    "prefix": [
      "@Service (\"field_definition.listener\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Field\\FieldDefinitionListener",
      " */",
      "${1:\\$field_definition_listener_service} = \\Drupal::service('field_definition.listener');",
      ""
    ],
    "description": [
      "Reacts to field definition CRUD on behalf of the Entity system."
    ],
    "scope": "php"
  },
  "field_storage_definition.listener": {
    "prefix": [
      "@Service (\"field_storage_definition.listener\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Field\\FieldStorageDefinitionListener",
      " */",
      "${1:\\$field_storage_definition_listener_service} = \\Drupal::service('field_storage_definition.listener');",
      ""
    ],
    "description": [
      "Reacts to field storage definition CRUD on behalf of the Entity system.",
      "",
      "@see \\Drupal\\Core\\Field\\FieldStorageDefinitionEvents"
    ],
    "scope": "php"
  },
  "file.htaccess_writer": {
    "prefix": [
      "@Service (\"file.htaccess_writer\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\File\\HtaccessWriter",
      " */",
      "${1:\\$file_htaccess_writer_service} = \\Drupal::service('file.htaccess_writer');",
      ""
    ],
    "description": [
      "Provides functions to manage Apache .htaccess files."
    ],
    "scope": "php"
  },
  "file.mime_type.guesser": {
    "prefix": [
      "@Service (\"file.mime_type.guesser\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\File\\MimeType\\MimeTypeGuesser",
      " */",
      "${1:\\$file_mime_type_guesser_service} = \\Drupal::service('file.mime_type.guesser');",
      ""
    ],
    "description": [
      "Defines a MIME type guesser that also supports stream wrapper paths."
    ],
    "scope": "php"
  },
  "file.mime_type.guesser.extension": {
    "prefix": [
      "@Service (\"file.mime_type.guesser.extension\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\File\\MimeType\\ExtensionMimeTypeGuesser",
      " */",
      "${1:\\$file_mime_type_guesser_extension_service} = \\Drupal::service('file.mime_type.guesser.extension');",
      ""
    ],
    "description": [
      "Makes possible to guess the MIME type of a file using its extension."
    ],
    "scope": "php"
  },
  "file_system": {
    "prefix": [
      "@Service (\"file_system\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\File\\FileSystem",
      " */",
      "${1:\\$file_system_service} = \\Drupal::service('file_system');",
      ""
    ],
    "description": [
      "Provides helpers to operate on files and stream wrappers."
    ],
    "scope": "php"
  },
  "file_url_generator": {
    "prefix": [
      "@Service (\"file_url_generator\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\File\\FileUrlGenerator",
      " */",
      "${1:\\$file_url_generator_service} = \\Drupal::service('file_url_generator');",
      ""
    ],
    "description": [
      "Default implementation for the file URL generator service."
    ],
    "scope": "php"
  },
  "finish_response_subscriber": {
    "prefix": [
      "@Service (\"finish_response_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\FinishResponseSubscriber",
      " */",
      "${1:\\$finish_response_subscriber_service} = \\Drupal::service('finish_response_subscriber');",
      ""
    ],
    "description": [
      "Response subscriber to handle finished responses."
    ],
    "scope": "php"
  },
  "flood": {
    "prefix": [
      "@Service (\"flood\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Flood\\DatabaseBackend",
      " */",
      "${1:\\$flood_service} = \\Drupal::service('flood');",
      ""
    ],
    "description": [
      "Defines the database flood backend. This is the default Drupal backend."
    ],
    "scope": "php"
  },
  "form_ajax_response_builder": {
    "prefix": [
      "@Service (\"form_ajax_response_builder\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Form\\FormAjaxResponseBuilder",
      " */",
      "${1:\\$form_ajax_response_builder_service} = \\Drupal::service('form_ajax_response_builder');",
      ""
    ],
    "description": [
      "Builds an AJAX form response.",
      "",
      "Given the current request, a form render array, its form state, and any AJAX",
      "commands to apply to the form, build a response object."
    ],
    "scope": "php"
  },
  "form_ajax_subscriber": {
    "prefix": [
      "@Service (\"form_ajax_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Form\\EventSubscriber\\FormAjaxSubscriber",
      " */",
      "${1:\\$form_ajax_subscriber_service} = \\Drupal::service('form_ajax_subscriber');",
      ""
    ],
    "description": [
      "Wraps AJAX form submissions that are triggered via an exception."
    ],
    "scope": "php"
  },
  "form_builder": {
    "prefix": [
      "@Service (\"form_builder\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Form\\FormBuilder",
      " */",
      "${1:\\$form_builder_service} = \\Drupal::service('form_builder');",
      ""
    ],
    "description": [
      "Provides form building and processing.",
      "",
      "@ingroup form_api"
    ],
    "scope": "php"
  },
  "form_error_handler": {
    "prefix": [
      "@Service (\"form_error_handler\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Form\\FormErrorHandler",
      " */",
      "${1:\\$form_error_handler_service} = \\Drupal::service('form_error_handler');",
      ""
    ],
    "description": [
      "Handles form errors."
    ],
    "scope": "php"
  },
  "form_submitter": {
    "prefix": [
      "@Service (\"form_submitter\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Form\\FormSubmitter",
      " */",
      "${1:\\$form_submitter_service} = \\Drupal::service('form_submitter');",
      ""
    ],
    "description": [
      "Provides submission processing for forms."
    ],
    "scope": "php"
  },
  "form_validator": {
    "prefix": [
      "@Service (\"form_validator\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Form\\FormValidator",
      " */",
      "${1:\\$form_validator_service} = \\Drupal::service('form_validator');",
      ""
    ],
    "description": [
      "Provides validation of form submissions."
    ],
    "scope": "php"
  },
  "html_response.attachments_processor": {
    "prefix": [
      "@Service (\"html_response.attachments_processor\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Render\\HtmlResponseAttachmentsProcessor",
      " */",
      "${1:\\$html_response_attachments_processor_service} = \\Drupal::service('html_response.attachments_processor');",
      ""
    ],
    "description": [
      "Processes attachments of HTML responses.",
      "",
      "This class is used by the rendering service to process the #attached part of",
      "the render array, for HTML responses.",
      "",
      "To render attachments to HTML for testing without a controller, use the",
      "'bare_html_page_renderer' service to generate a",
      "Drupal\\Core\\Render\\HtmlResponse object. Then use its getContent(),",
      "getStatusCode(), and/or the headers property to access the result.",
      "",
      "@see template_preprocess_html()",
      "@see \\Drupal\\Core\\Render\\AttachmentsResponseProcessorInterface",
      "@see \\Drupal\\Core\\Render\\BareHtmlPageRenderer",
      "@see \\Drupal\\Core\\Render\\HtmlResponse",
      "@see \\Drupal\\Core\\Render\\MainContent\\HtmlRenderer"
    ],
    "scope": "php"
  },
  "html_response.placeholder_strategy_subscriber": {
    "prefix": [
      "@Service (\"html_response.placeholder_strategy_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\HtmlResponsePlaceholderStrategySubscriber",
      " */",
      "${1:\\$html_response_placeholder_strategy_subscriber_service} = \\Drupal::service('html_response.placeholder_strategy_subscriber');",
      ""
    ],
    "description": [
      "HTML response subscriber to allow for different placeholder strategies.",
      "",
      "This allows core and contrib to coordinate how to render placeholders;",
      "e.g. an EsiRenderStrategy could replace the placeholders with ESI tags,",
      "while e.g. a BigPipeRenderStrategy could store the placeholders in a",
      "BigPipe service and render them after the main content has been sent to",
      "the client."
    ],
    "scope": "php"
  },
  "html_response.subscriber": {
    "prefix": [
      "@Service (\"html_response.subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\HtmlResponseSubscriber",
      " */",
      "${1:\\$html_response_subscriber_service} = \\Drupal::service('html_response.subscriber');",
      ""
    ],
    "description": [
      "Response subscriber to handle HTML responses."
    ],
    "scope": "php"
  },
  "http_client": {
    "prefix": [
      "@Service (\"http_client\")"
    ],
    "body": [
      "/**",
      " * @var GuzzleHttp\\Client",
      " */",
      "${1:\\$http_client_service} = \\Drupal::service('http_client');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "http_client_factory": {
    "prefix": [
      "@Service (\"http_client_factory\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Http\\ClientFactory",
      " */",
      "${1:\\$http_client_factory_service} = \\Drupal::service('http_client_factory');",
      ""
    ],
    "description": [
      "Helper class to construct a HTTP client with Drupal specific config."
    ],
    "scope": "php"
  },
  "http_kernel": {
    "prefix": [
      "@Service (\"http_kernel\")"
    ],
    "body": [
      "/**",
      " * @var Stack\\StackedHttpKernel",
      " */",
      "${1:\\$http_kernel_service} = \\Drupal::service('http_kernel');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "http_kernel.basic": {
    "prefix": [
      "@Service (\"http_kernel.basic\")"
    ],
    "body": [
      "/**",
      " * @var Symfony\\Component\\HttpKernel\\HttpKernel",
      " */",
      "${1:\\$http_kernel_basic_service} = \\Drupal::service('http_kernel.basic');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "http_kernel.controller.argument_resolver": {
    "prefix": [
      "@Service (\"http_kernel.controller.argument_resolver\")"
    ],
    "body": [
      "/**",
      " * @var Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver",
      " */",
      "${1:\\$http_kernel_controller_argument_resolver_service} = \\Drupal::service('http_kernel.controller.argument_resolver');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "http_middleware.cors": {
    "prefix": [
      "@Service (\"http_middleware.cors\")"
    ],
    "body": [
      "/**",
      " * @var Asm89\\Stack\\Cors",
      " */",
      "${1:\\$http_middleware_cors_service} = \\Drupal::service('http_middleware.cors');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "http_middleware.kernel_pre_handle": {
    "prefix": [
      "@Service (\"http_middleware.kernel_pre_handle\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\StackMiddleware\\KernelPreHandle",
      " */",
      "${1:\\$http_middleware_kernel_pre_handle_service} = \\Drupal::service('http_middleware.kernel_pre_handle');",
      ""
    ],
    "description": [
      "Prepares the environment after page caching ran."
    ],
    "scope": "php"
  },
  "http_middleware.negotiation": {
    "prefix": [
      "@Service (\"http_middleware.negotiation\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\StackMiddleware\\NegotiationMiddleware",
      " */",
      "${1:\\$http_middleware_negotiation_service} = \\Drupal::service('http_middleware.negotiation');",
      ""
    ],
    "description": [
      "Provides a middleware to determine the content type upon the accept header."
    ],
    "scope": "php"
  },
  "http_middleware.reverse_proxy": {
    "prefix": [
      "@Service (\"http_middleware.reverse_proxy\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\StackMiddleware\\ReverseProxyMiddleware",
      " */",
      "${1:\\$http_middleware_reverse_proxy_service} = \\Drupal::service('http_middleware.reverse_proxy');",
      ""
    ],
    "description": [
      "Provides support for reverse proxies."
    ],
    "scope": "php"
  },
  "http_middleware.session": {
    "prefix": [
      "@Service (\"http_middleware.session\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\StackMiddleware\\Session",
      " */",
      "${1:\\$http_middleware_session_service} = \\Drupal::service('http_middleware.session');",
      ""
    ],
    "description": [
      "Wrap session logic around a HTTP request.",
      "",
      "Note, the session service is not injected into this class in order to prevent",
      "premature initialization of session storage (database). Instead the session",
      "service is retrieved from the container only when handling the request."
    ],
    "scope": "php"
  },
  "image.factory": {
    "prefix": [
      "@Service (\"image.factory\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Image\\ImageFactory",
      " */",
      "${1:\\$image_factory_service} = \\Drupal::service('image.factory');",
      ""
    ],
    "description": [
      "Provides a factory for image objects."
    ],
    "scope": "php"
  },
  "image.toolkit.manager": {
    "prefix": [
      "@Service (\"image.toolkit.manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\ImageToolkit\\ImageToolkitManager",
      " */",
      "${1:\\$image_toolkit_manager_service} = \\Drupal::service('image.toolkit.manager');",
      ""
    ],
    "description": [
      "Manages image toolkit plugins.",
      "",
      "@see \\Drupal\\Core\\ImageToolkit\\Annotation\\ImageToolkit",
      "@see \\Drupal\\Core\\ImageToolkit\\ImageToolkitInterface",
      "@see \\Drupal\\Core\\ImageToolkit\\ImageToolkitBase",
      "@see plugin_api"
    ],
    "scope": "php"
  },
  "image.toolkit.operation.manager": {
    "prefix": [
      "@Service (\"image.toolkit.operation.manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\ImageToolkit\\ImageToolkitOperationManager",
      " */",
      "${1:\\$image_toolkit_operation_manager_service} = \\Drupal::service('image.toolkit.operation.manager');",
      ""
    ],
    "description": [
      "Manages toolkit operation plugins.",
      "",
      "@see \\Drupal\\Core\\ImageToolkit\\Annotation\\ImageToolkitOperation",
      "@see \\Drupal\\Core\\ImageToolkit\\ImageToolkitOperationBase",
      "@see \\Drupal\\Core\\ImageToolkit\\ImageToolkitOperationInterface",
      "@see plugin_api"
    ],
    "scope": "php"
  },
  "info_parser": {
    "prefix": [
      "@Service (\"info_parser\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Extension\\InfoParser",
      " */",
      "${1:\\$info_parser_service} = \\Drupal::service('info_parser');",
      ""
    ],
    "description": [
      "Parses extension .info.yml files."
    ],
    "scope": "php"
  },
  "kernel_destruct_subscriber": {
    "prefix": [
      "@Service (\"kernel_destruct_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\KernelDestructionSubscriber",
      " */",
      "${1:\\$kernel_destruct_subscriber_service} = \\Drupal::service('kernel_destruct_subscriber');",
      ""
    ],
    "description": [
      "Destructs services that are initiated and tagged with \"needs_destruction\".",
      "",
      "@see \\Drupal\\Core\\DestructableInterface"
    ],
    "scope": "php"
  },
  "keyvalue": {
    "prefix": [
      "@Service (\"keyvalue\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\KeyValueStore\\KeyValueFactory",
      " */",
      "${1:\\$keyvalue_service} = \\Drupal::service('keyvalue');",
      ""
    ],
    "description": [
      "Defines the key/value store factory."
    ],
    "scope": "php"
  },
  "keyvalue.database": {
    "prefix": [
      "@Service (\"keyvalue.database\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\KeyValueStore\\KeyValueDatabaseFactory",
      " */",
      "${1:\\$keyvalue_database_service} = \\Drupal::service('keyvalue.database');",
      ""
    ],
    "description": [
      "Defines the key/value store factory for the database backend."
    ],
    "scope": "php"
  },
  "keyvalue.expirable": {
    "prefix": [
      "@Service (\"keyvalue.expirable\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\KeyValueStore\\KeyValueExpirableFactory",
      " */",
      "${1:\\$keyvalue_expirable_service} = \\Drupal::service('keyvalue.expirable');",
      ""
    ],
    "description": [
      "Defines the key/value store factory."
    ],
    "scope": "php"
  },
  "keyvalue.expirable.database": {
    "prefix": [
      "@Service (\"keyvalue.expirable.database\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\KeyValueStore\\KeyValueDatabaseExpirableFactory",
      " */",
      "${1:\\$keyvalue_expirable_database_service} = \\Drupal::service('keyvalue.expirable.database');",
      ""
    ],
    "description": [
      "Defines the key/value store factory for the database backend."
    ],
    "scope": "php"
  },
  "language.current_language_context": {
    "prefix": [
      "@Service (\"language.current_language_context\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Language\\ContextProvider\\CurrentLanguageContext",
      " */",
      "${1:\\$language_current_language_context_service} = \\Drupal::service('language.current_language_context');",
      ""
    ],
    "description": [
      "Sets the current language as a context."
    ],
    "scope": "php"
  },
  "language.default": {
    "prefix": [
      "@Service (\"language.default\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Language\\LanguageDefault",
      " */",
      "${1:\\$language_default_service} = \\Drupal::service('language.default');",
      ""
    ],
    "description": [
      "Provides a simple get and set wrapper to the default language object.",
      "",
      "The default language must be provided without dependencies since it is both",
      "configured and a dependency of the configuration system. The LanguageDefault",
      "object is a container service. The default values are stored on the container",
      "by \\Drupal\\Core\\DrupalKernel::buildContainer(). This allows services to",
      "override this parameter in a ServiceProvider, for example,",
      "\\Drupal\\language\\LanguageServiceProvider::alter()."
    ],
    "scope": "php"
  },
  "language_manager": {
    "prefix": [
      "@Service (\"language_manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Language\\LanguageManager",
      " */",
      "${1:\\$language_manager_service} = \\Drupal::service('language_manager');",
      ""
    ],
    "description": [
      "Class responsible for providing language support on language-unaware sites."
    ],
    "scope": "php"
  },
  "library.dependency_resolver": {
    "prefix": [
      "@Service (\"library.dependency_resolver\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Asset\\LibraryDependencyResolver",
      " */",
      "${1:\\$library_dependency_resolver_service} = \\Drupal::service('library.dependency_resolver');",
      ""
    ],
    "description": [
      "Resolves the dependencies of asset (CSS/JavaScript) libraries."
    ],
    "scope": "php"
  },
  "library.discovery": {
    "prefix": [
      "@Service (\"library.discovery\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Asset\\LibraryDiscovery",
      " */",
      "${1:\\$library_discovery_service} = \\Drupal::service('library.discovery');",
      ""
    ],
    "description": [
      "Discovers available asset libraries in Drupal."
    ],
    "scope": "php"
  },
  "library.discovery.collector": {
    "prefix": [
      "@Service (\"library.discovery.collector\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Asset\\LibraryDiscoveryCollector",
      " */",
      "${1:\\$library_discovery_collector_service} = \\Drupal::service('library.discovery.collector');",
      ""
    ],
    "description": [
      "A CacheCollector implementation for building library extension info."
    ],
    "scope": "php"
  },
  "library.discovery.parser": {
    "prefix": [
      "@Service (\"library.discovery.parser\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Asset\\LibraryDiscoveryParser",
      " */",
      "${1:\\$library_discovery_parser_service} = \\Drupal::service('library.discovery.parser');",
      ""
    ],
    "description": [
      "Parses library files to get extension data."
    ],
    "scope": "php"
  },
  "library.libraries_directory_file_finder": {
    "prefix": [
      "@Service (\"library.libraries_directory_file_finder\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Asset\\LibrariesDirectoryFileFinder",
      " */",
      "${1:\\$library_libraries_directory_file_finder_service} = \\Drupal::service('library.libraries_directory_file_finder');",
      ""
    ],
    "description": [
      "Finds files that are located in the supported 'libraries' directories."
    ],
    "scope": "php"
  },
  "link_generator": {
    "prefix": [
      "@Service (\"link_generator\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Utility\\LinkGenerator",
      " */",
      "${1:\\$link_generator_service} = \\Drupal::service('link_generator');",
      ""
    ],
    "description": [
      "Provides a class which generates a link with route names and parameters."
    ],
    "scope": "php"
  },
  "lock": {
    "prefix": [
      "@Service (\"lock\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Lock\\DatabaseLockBackend",
      " */",
      "${1:\\$lock_service} = \\Drupal::service('lock');",
      ""
    ],
    "description": [
      "Defines the database lock backend. This is the default backend in Drupal.",
      "",
      "@ingroup lock"
    ],
    "scope": "php"
  },
  "lock.persistent": {
    "prefix": [
      "@Service (\"lock.persistent\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Lock\\PersistentDatabaseLockBackend",
      " */",
      "${1:\\$lock_persistent_service} = \\Drupal::service('lock.persistent');",
      ""
    ],
    "description": [
      "Defines the persistent database lock backend.",
      "",
      "This backend is global for this Drupal installation.",
      "",
      "@ingroup lock"
    ],
    "scope": "php"
  },
  "logger.channel.file": {
    "prefix": [
      "@Service (\"logger.channel.file\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Logger\\LoggerChannel",
      " */",
      "${1:\\$logger_channel_file_service} = \\Drupal::service('logger.channel.file');",
      ""
    ],
    "description": [
      "Defines a logger channel that most implementations will use."
    ],
    "scope": "php"
  },
  "logger.channel_base": {
    "prefix": [
      "@Service (\"logger.channel_base\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Logger\\LoggerChannel",
      " */",
      "${1:\\$logger_channel_base_service} = \\Drupal::service('logger.channel_base');",
      ""
    ],
    "description": [
      "Defines a logger channel that most implementations will use."
    ],
    "scope": "php"
  },
  "logger.factory": {
    "prefix": [
      "@Service (\"logger.factory\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Logger\\LoggerChannelFactory",
      " */",
      "${1:\\$logger_factory_service} = \\Drupal::service('logger.factory');",
      ""
    ],
    "description": [
      "Defines a factory for logging channels."
    ],
    "scope": "php"
  },
  "logger.log_message_parser": {
    "prefix": [
      "@Service (\"logger.log_message_parser\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Logger\\LogMessageParser",
      " */",
      "${1:\\$logger_log_message_parser_service} = \\Drupal::service('logger.log_message_parser');",
      ""
    ],
    "description": [
      "Parses log messages and their placeholders."
    ],
    "scope": "php"
  },
  "main_content_renderer.ajax": {
    "prefix": [
      "@Service (\"main_content_renderer.ajax\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Render\\MainContent\\AjaxRenderer",
      " */",
      "${1:\\$main_content_renderer_ajax_service} = \\Drupal::service('main_content_renderer.ajax');",
      ""
    ],
    "description": [
      "Default main content renderer for Ajax requests."
    ],
    "scope": "php"
  },
  "main_content_renderer.dialog": {
    "prefix": [
      "@Service (\"main_content_renderer.dialog\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Render\\MainContent\\DialogRenderer",
      " */",
      "${1:\\$main_content_renderer_dialog_service} = \\Drupal::service('main_content_renderer.dialog');",
      ""
    ],
    "description": [
      "Default main content renderer for dialog requests."
    ],
    "scope": "php"
  },
  "main_content_renderer.html": {
    "prefix": [
      "@Service (\"main_content_renderer.html\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Render\\MainContent\\HtmlRenderer",
      " */",
      "${1:\\$main_content_renderer_html_service} = \\Drupal::service('main_content_renderer.html');",
      ""
    ],
    "description": [
      "Default main content renderer for HTML requests.",
      "",
      "For attachment handling of HTML responses:",
      "@see template_preprocess_html()",
      "@see \\Drupal\\Core\\Render\\AttachmentsResponseProcessorInterface",
      "@see \\Drupal\\Core\\Render\\BareHtmlPageRenderer",
      "@see \\Drupal\\Core\\Render\\HtmlResponse",
      "@see \\Drupal\\Core\\Render\\HtmlResponseAttachmentsProcessor"
    ],
    "scope": "php"
  },
  "main_content_renderer.modal": {
    "prefix": [
      "@Service (\"main_content_renderer.modal\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Render\\MainContent\\ModalRenderer",
      " */",
      "${1:\\$main_content_renderer_modal_service} = \\Drupal::service('main_content_renderer.modal');",
      ""
    ],
    "description": [
      "Default main content renderer for modal dialog requests."
    ],
    "scope": "php"
  },
  "main_content_renderer.off_canvas": {
    "prefix": [
      "@Service (\"main_content_renderer.off_canvas\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Render\\MainContent\\OffCanvasRenderer",
      " */",
      "${1:\\$main_content_renderer_off_canvas_service} = \\Drupal::service('main_content_renderer.off_canvas');",
      ""
    ],
    "description": [
      "Default main content renderer for off-canvas dialog requests.",
      "",
      "@internal"
    ],
    "scope": "php"
  },
  "main_content_renderer.off_canvas_top": {
    "prefix": [
      "@Service (\"main_content_renderer.off_canvas_top\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Render\\MainContent\\OffCanvasRenderer",
      " */",
      "${1:\\$main_content_renderer_off_canvas_top_service} = \\Drupal::service('main_content_renderer.off_canvas_top');",
      ""
    ],
    "description": [
      "Default main content renderer for off-canvas dialog requests.",
      "",
      "@internal"
    ],
    "scope": "php"
  },
  "main_content_view_subscriber": {
    "prefix": [
      "@Service (\"main_content_view_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\MainContentViewSubscriber",
      " */",
      "${1:\\$main_content_view_subscriber_service} = \\Drupal::service('main_content_view_subscriber');",
      ""
    ],
    "description": [
      "View subscriber rendering main content render arrays into responses.",
      "",
      "Additional target rendering formats can be defined by adding another service",
      "that implements \\Drupal\\Core\\Render\\MainContent\\MainContentRendererInterface",
      "and tagging it as a @code render.main_content_renderer @endcode, then",
      "\\Drupal\\Core\\Render\\MainContent\\MainContentRenderersPass will detect it and",
      "use it when appropriate.",
      "",
      "@see \\Drupal\\Core\\Render\\MainContent\\MainContentRendererInterface",
      "@see \\Drupal\\Core\\Render\\MainContentControllerPass"
    ],
    "scope": "php"
  },
  "maintenance_mode": {
    "prefix": [
      "@Service (\"maintenance_mode\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Site\\MaintenanceMode",
      " */",
      "${1:\\$maintenance_mode_service} = \\Drupal::service('maintenance_mode');",
      ""
    ],
    "description": [
      "Provides the default implementation of the maintenance mode service."
    ],
    "scope": "php"
  },
  "maintenance_mode_subscriber": {
    "prefix": [
      "@Service (\"maintenance_mode_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\MaintenanceModeSubscriber",
      " */",
      "${1:\\$maintenance_mode_subscriber_service} = \\Drupal::service('maintenance_mode_subscriber');",
      ""
    ],
    "description": [
      "Maintenance mode subscriber for controller requests."
    ],
    "scope": "php"
  },
  "menu.active_trail": {
    "prefix": [
      "@Service (\"menu.active_trail\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Menu\\MenuActiveTrail",
      " */",
      "${1:\\$menu_active_trail_service} = \\Drupal::service('menu.active_trail');",
      ""
    ],
    "description": [
      "Provides the default implementation of the active menu trail service.",
      "",
      "It uses the current route name and route parameters to compare with the ones",
      "of the menu links."
    ],
    "scope": "php"
  },
  "menu.default_tree_manipulators": {
    "prefix": [
      "@Service (\"menu.default_tree_manipulators\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Menu\\DefaultMenuLinkTreeManipulators",
      " */",
      "${1:\\$menu_default_tree_manipulators_service} = \\Drupal::service('menu.default_tree_manipulators');",
      ""
    ],
    "description": [
      "Provides a couple of menu link tree manipulators.",
      "",
      "This class provides menu link tree manipulators to:",
      "- perform render cached menu-optimized access checking",
      "- optimized node access checking",
      "- generate a unique index for the elements in a tree and sorting by it",
      "- flatten a tree (i.e. a 1-dimensional tree)"
    ],
    "scope": "php"
  },
  "menu.link_tree": {
    "prefix": [
      "@Service (\"menu.link_tree\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Menu\\MenuLinkTree",
      " */",
      "${1:\\$menu_link_tree_service} = \\Drupal::service('menu.link_tree');",
      ""
    ],
    "description": [
      "Implements the loading, transforming and rendering of menu link trees."
    ],
    "scope": "php"
  },
  "menu.parent_form_selector": {
    "prefix": [
      "@Service (\"menu.parent_form_selector\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Menu\\MenuParentFormSelector",
      " */",
      "${1:\\$menu_parent_form_selector_service} = \\Drupal::service('menu.parent_form_selector');",
      ""
    ],
    "description": [
      "Default implementation of the menu parent form selector service.",
      "",
      "The form selector is a list of all appropriate menu links."
    ],
    "scope": "php"
  },
  "menu.rebuild_subscriber": {
    "prefix": [
      "@Service (\"menu.rebuild_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\MenuRouterRebuildSubscriber",
      " */",
      "${1:\\$menu_rebuild_subscriber_service} = \\Drupal::service('menu.rebuild_subscriber');",
      ""
    ],
    "description": [
      "Rebuilds the default menu links and runs menu-specific code if necessary."
    ],
    "scope": "php"
  },
  "menu_link.static.overrides": {
    "prefix": [
      "@Service (\"menu_link.static.overrides\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Menu\\StaticMenuLinkOverrides",
      " */",
      "${1:\\$menu_link_static_overrides_service} = \\Drupal::service('menu_link.static.overrides');",
      ""
    ],
    "description": [
      "Defines an implementation of the menu link override using a config file."
    ],
    "scope": "php"
  },
  "messenger": {
    "prefix": [
      "@Service (\"messenger\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Messenger\\Messenger",
      " */",
      "${1:\\$messenger_service} = \\Drupal::service('messenger');",
      ""
    ],
    "description": [
      "The messenger service."
    ],
    "scope": "php"
  },
  "method_filter": {
    "prefix": [
      "@Service (\"method_filter\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Routing\\MethodFilter",
      " */",
      "${1:\\$method_filter_service} = \\Drupal::service('method_filter');",
      ""
    ],
    "description": [
      "Filters routes based on the HTTP method."
    ],
    "scope": "php"
  },
  "module_handler": {
    "prefix": [
      "@Service (\"module_handler\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Extension\\ModuleHandler",
      " */",
      "${1:\\$module_handler_service} = \\Drupal::service('module_handler');",
      ""
    ],
    "description": [
      "Class that manages modules in a Drupal installation."
    ],
    "scope": "php"
  },
  "module_installer": {
    "prefix": [
      "@Service (\"module_installer\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Extension\\ModuleInstaller",
      " */",
      "${1:\\$module_installer_service} = \\Drupal::service('module_installer');",
      ""
    ],
    "description": [
      "Default implementation of the module installer.",
      "",
      "It registers the module in config, installs its own configuration,",
      "installs the schema, updates the Drupal kernel and more.",
      "",
      "We don't inject dependencies yet, as we would need to reload them after",
      "each installation or uninstallation of a module.",
      "https://www.drupal.org/project/drupal/issues/2350111 for example tries to",
      "solve this dilemma."
    ],
    "scope": "php"
  },
  "module_required_by_themes_uninstall_validator": {
    "prefix": [
      "@Service (\"module_required_by_themes_uninstall_validator\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Extension\\ModuleRequiredByThemesUninstallValidator",
      " */",
      "${1:\\$module_required_by_themes_uninstall_validator_service} = \\Drupal::service('module_required_by_themes_uninstall_validator');",
      ""
    ],
    "description": [
      "Ensures modules cannot be uninstalled if enabled themes depend on them."
    ],
    "scope": "php"
  },
  "options_request_listener": {
    "prefix": [
      "@Service (\"options_request_listener\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\OptionsRequestSubscriber",
      " */",
      "${1:\\$options_request_listener_service} = \\Drupal::service('options_request_listener');",
      ""
    ],
    "description": [
      "Handles options requests.",
      "",
      "Therefore it sends an options response using all methods on all possible",
      "routes."
    ],
    "scope": "php"
  },
  "page_cache_kill_switch": {
    "prefix": [
      "@Service (\"page_cache_kill_switch\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\PageCache\\ResponsePolicy\\KillSwitch",
      " */",
      "${1:\\$page_cache_kill_switch_service} = \\Drupal::service('page_cache_kill_switch');",
      ""
    ],
    "description": [
      "A policy evaluating to static::DENY when the kill switch was triggered."
    ],
    "scope": "php"
  },
  "page_cache_request_policy": {
    "prefix": [
      "@Service (\"page_cache_request_policy\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\PageCache\\DefaultRequestPolicy",
      " */",
      "${1:\\$page_cache_request_policy_service} = \\Drupal::service('page_cache_request_policy');",
      ""
    ],
    "description": [
      "The default page cache request policy.",
      "",
      "Delivery of cached pages is denied if either the application is running from",
      "the command line or the request was not initiated with a safe method (GET or",
      "HEAD). Also caching is only allowed for requests without a session cookie."
    ],
    "scope": "php"
  },
  "page_cache_response_policy": {
    "prefix": [
      "@Service (\"page_cache_response_policy\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\PageCache\\ChainResponsePolicy",
      " */",
      "${1:\\$page_cache_response_policy_service} = \\Drupal::service('page_cache_response_policy');",
      ""
    ],
    "description": [
      "Implements a compound response policy.",
      "",
      "When evaluating the compound policy, all of the contained rules are applied",
      "to the response. The overall result is computed according to the following",
      "rules:",
      "",
      "",
      "  Returns static::DENY if any of the rules evaluated to static::DENY",
      "  Otherwise returns NULL",
      ""
    ],
    "scope": "php"
  },
  "pager.manager": {
    "prefix": [
      "@Service (\"pager.manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Pager\\PagerManager",
      " */",
      "${1:\\$pager_manager_service} = \\Drupal::service('pager.manager');",
      ""
    ],
    "description": [
      "Provides a manager for pagers.",
      "",
      "Pagers are cached, and can be retrieved when rendering."
    ],
    "scope": "php"
  },
  "pager.parameters": {
    "prefix": [
      "@Service (\"pager.parameters\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Pager\\PagerParameters",
      " */",
      "${1:\\$pager_parameters_service} = \\Drupal::service('pager.parameters');",
      ""
    ],
    "description": [
      "Provides pager information contained within the current request.",
      "",
      "@see \\Drupal\\Core\\Pager\\PagerManagerInterface"
    ],
    "scope": "php"
  },
  "paramconverter.configentity_admin": {
    "prefix": [
      "@Service (\"paramconverter.configentity_admin\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\ParamConverter\\AdminPathConfigEntityConverter",
      " */",
      "${1:\\$paramconverter_configentity_admin_service} = \\Drupal::service('paramconverter.configentity_admin');",
      ""
    ],
    "description": [
      "Makes sure the unmodified ConfigEntity is loaded on admin pages.",
      "",
      "Converts entity route arguments to unmodified entities as opposed to",
      "converting to entities with overrides, such as the negotiated language.",
      "",
      "This converter applies only if the path is an admin path, the entity is",
      "a config entity, and the \"with_config_overrides\" element is not set to TRUE",
      "on the parameter definition.",
      "",
      "Due to this converter having a higher weight than the default",
      "EntityConverter, every time this applies, it takes over the conversion duty",
      "from EntityConverter. As we only allow a single converter per route",
      "argument, EntityConverter is ignored when this converter applies."
    ],
    "scope": "php"
  },
  "paramconverter.entity": {
    "prefix": [
      "@Service (\"paramconverter.entity\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\ParamConverter\\EntityConverter",
      " */",
      "${1:\\$paramconverter_entity_service} = \\Drupal::service('paramconverter.entity');",
      ""
    ],
    "description": [
      "Parameter converter for upcasting entity IDs to full objects.",
      "",
      "This is useful in cases where the dynamic elements of the path can't be",
      "auto-determined; for example, if your path refers to multiple of the same",
      "type of entity (\"example/{node1}/foo/{node2}\") or if the path can act on any",
      "entity type (\"example/{entity_type}/{entity}/foo\").",
      "",
      "In order to use it you should specify some additional options in your route:",
      "@code",
      "example.route:",
      "  path: foo/{example}",
      "  options:",
      "    parameters:",
      "      example:",
      "        type: entity:node",
      "@endcode",
      "",
      "If you want to have the entity type itself dynamic in the url you can",
      "specify it like the following:",
      "@code",
      "example.route:",
      "  path: foo/{entity_type}/{example}",
      "  options:",
      "    parameters:",
      "      example:",
      "        type: entity:{entity_type}",
      "@endcode",
      "",
      "The conversion can be limited to certain entity bundles by specifying a",
      "parameter 'bundle' definition property as an array:",
      "@code",
      "example.route:",
      "  path: foo/{example}",
      "  options:",
      "    parameters:",
      "      example:",
      "        type: entity:node",
      "        bundle:",
      "          - article",
      "          - news",
      "@endcode",
      "In the above example, only node entities of types 'article' and 'news' are",
      "converted. For a node of a different type, such as 'page', the route will",
      "return 404 'Not found'.",
      "",
      "If your route needs to support pending revisions, you can specify the",
      "\"load_latest_revision\" parameter. This will ensure that the latest revision",
      "is returned, even if it is not the default one:",
      "@code",
      "example.route:",
      "  path: foo/{example}",
      "  options:",
      "    parameters:",
      "      example:",
      "        type: entity:node",
      "        load_latest_revision: TRUE",
      "@endcode",
      "",
      "When dealing with translatable entities, the \"load_latest_revision\" flag will",
      "make this converter load the latest revision affecting the translation",
      "matching the content language for the current request. If none can be found",
      "it will fall back to the latest revision. For instance, if an entity has an",
      "English default revision (revision 1) and an Italian pending revision",
      "(revision 2), \"/foo/1\" will return the former, while \"/it/foo/1\" will return",
      "the latter.",
      "",
      "@see entities_revisions_translations"
    ],
    "scope": "php"
  },
  "paramconverter.entity_revision": {
    "prefix": [
      "@Service (\"paramconverter.entity_revision\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\ParamConverter\\EntityRevisionParamConverter",
      " */",
      "${1:\\$paramconverter_entity_revision_service} = \\Drupal::service('paramconverter.entity_revision');",
      ""
    ],
    "description": [
      "Parameter converter for upcasting entity revision IDs to full objects.",
      "",
      "This is useful for pages which want to show a specific revision, like",
      "\"/entity_example/{entity_example}/revision/{entity_example_revision}\".",
      "",
      "",
      "In order to use it you should specify some additional options in your route:",
      "@code",
      "example.route:",
      "  path: /foo/{entity_example_revision}",
      "  options:",
      "    parameters:",
      "      entity_example_revision:",
      "        type: entity_revision:entity_example",
      "@endcode"
    ],
    "scope": "php"
  },
  "paramconverter.menu_link": {
    "prefix": [
      "@Service (\"paramconverter.menu_link\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\ParamConverter\\MenuLinkPluginConverter",
      " */",
      "${1:\\$paramconverter_menu_link_service} = \\Drupal::service('paramconverter.menu_link');",
      ""
    ],
    "description": [
      "Parameter converter for upcasting entity ids to full objects."
    ],
    "scope": "php"
  },
  "paramconverter_manager": {
    "prefix": [
      "@Service (\"paramconverter_manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\ParamConverter\\ParamConverterManager",
      " */",
      "${1:\\$paramconverter_manager_service} = \\Drupal::service('paramconverter_manager');",
      ""
    ],
    "description": [
      "Manages converter services for converting request parameters to full objects.",
      "",
      "A typical use case for this would be upcasting (converting) a node id to a",
      "node entity."
    ],
    "scope": "php"
  },
  "paramconverter_subscriber": {
    "prefix": [
      "@Service (\"paramconverter_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\ParamConverterSubscriber",
      " */",
      "${1:\\$paramconverter_subscriber_service} = \\Drupal::service('paramconverter_subscriber');",
      ""
    ],
    "description": [
      "Event subscriber for registering parameter converters with routes."
    ],
    "scope": "php"
  },
  "password": {
    "prefix": [
      "@Service (\"password\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Password\\PhpassHashedPassword",
      " */",
      "${1:\\$password_service} = \\Drupal::service('password');",
      ""
    ],
    "description": [
      "Secure hashing functions based on Portable PHP password hashing framework.",
      "",
      "@see http://www.openwall.com/phpass/"
    ],
    "scope": "php"
  },
  "password_generator": {
    "prefix": [
      "@Service (\"password_generator\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Password\\DefaultPasswordGenerator",
      " */",
      "${1:\\$password_generator_service} = \\Drupal::service('password_generator');",
      ""
    ],
    "description": [
      "Provides a default password generator."
    ],
    "scope": "php"
  },
  "path.current": {
    "prefix": [
      "@Service (\"path.current\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Path\\CurrentPathStack",
      " */",
      "${1:\\$path_current_service} = \\Drupal::service('path.current');",
      ""
    ],
    "description": [
      "Represents the current path for the current request.",
      "",
      "Note: You should not rely on paths but rather on route names / parameters or",
      "  other indicators like context. For some fundamental parts, like routing or",
      "  path processing, there is unfortunately no way around dealing with paths."
    ],
    "scope": "php"
  },
  "path.matcher": {
    "prefix": [
      "@Service (\"path.matcher\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Path\\PathMatcher",
      " */",
      "${1:\\$path_matcher_service} = \\Drupal::service('path.matcher');",
      ""
    ],
    "description": [
      "Provides a path matcher."
    ],
    "scope": "php"
  },
  "path.validator": {
    "prefix": [
      "@Service (\"path.validator\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Path\\PathValidator",
      " */",
      "${1:\\$path_validator_service} = \\Drupal::service('path.validator');",
      ""
    ],
    "description": [
      "Provides a default path validator and access checker."
    ],
    "scope": "php"
  },
  "path_processor_decode": {
    "prefix": [
      "@Service (\"path_processor_decode\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\PathProcessor\\PathProcessorDecode",
      " */",
      "${1:\\$path_processor_decode_service} = \\Drupal::service('path_processor_decode');",
      ""
    ],
    "description": [
      "Processes the inbound path by urldecoding it.",
      "",
      "Parameters in the URL sometimes represent code-meaningful strings. It is",
      "therefore useful to always urldecode() those values so that individual",
      "controllers need not concern themselves with it. This is Drupal-specific",
      "logic and may not be familiar for developers used to other Symfony-family",
      "projects.",
      "",
      "@todo Revisit whether or not this logic is appropriate for here or if",
      "  controllers should be required to implement this logic themselves. If we",
      "  decide to keep this code, remove this TODO."
    ],
    "scope": "php"
  },
  "path_processor_front": {
    "prefix": [
      "@Service (\"path_processor_front\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\PathProcessor\\PathProcessorFront",
      " */",
      "${1:\\$path_processor_front_service} = \\Drupal::service('path_processor_front');",
      ""
    ],
    "description": [
      "Processes the inbound path by resolving it to the front page if empty."
    ],
    "scope": "php"
  },
  "path_processor_manager": {
    "prefix": [
      "@Service (\"path_processor_manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\PathProcessor\\PathProcessorManager",
      " */",
      "${1:\\$path_processor_manager_service} = \\Drupal::service('path_processor_manager');",
      ""
    ],
    "description": [
      "Path processor manager.",
      "",
      "Holds an array of path processor objects and uses them to sequentially process",
      "a path, in order of processor priority."
    ],
    "scope": "php"
  },
  "pgsql.entity.query.sql": {
    "prefix": [
      "@Service (\"pgsql.entity.query.sql\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\Query\\Sql\\pgsql\\QueryFactory",
      " */",
      "${1:\\$pgsql_entity_query_sql_service} = \\Drupal::service('pgsql.entity.query.sql');",
      ""
    ],
    "description": [
      "PostgreSQL specific entity query implementation.",
      "",
      "To add a new query implementation extending the default SQL one, add",
      "a service definition like pgsql.entity.query.sql and a factory class like",
      "this. The system will automatically find the relevant Query, QueryAggregate,",
      "Condition, ConditionAggregate, Tables classes in this namespace, in the",
      "namespace of the parent class and so on. So after creating an empty query",
      "factory class like this, it is possible to just drop in a class extending",
      "the base class in this namespace and it will be used automatically but it",
      "is optional: if a class is not extended the relevant default is used.",
      "",
      "@see \\Drupal\\Core\\Entity\\Query\\QueryBase::getNamespaces()",
      "@see \\Drupal\\Core\\Entity\\Query\\QueryBase::getClass()"
    ],
    "scope": "php"
  },
  "placeholder_strategy": {
    "prefix": [
      "@Service (\"placeholder_strategy\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Render\\Placeholder\\ChainedPlaceholderStrategy",
      " */",
      "${1:\\$placeholder_strategy_service} = \\Drupal::service('placeholder_strategy');",
      ""
    ],
    "description": [
      "Renders placeholders using a chain of placeholder strategies."
    ],
    "scope": "php"
  },
  "placeholder_strategy.single_flush": {
    "prefix": [
      "@Service (\"placeholder_strategy.single_flush\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Render\\Placeholder\\SingleFlushStrategy",
      " */",
      "${1:\\$placeholder_strategy_single_flush_service} = \\Drupal::service('placeholder_strategy.single_flush');",
      ""
    ],
    "description": [
      "Defines the 'single_flush' placeholder strategy.",
      "",
      "This is designed to be the fallback strategy, so should have the lowest",
      "priority. All placeholders that are not yet replaced at this point will be",
      "rendered as is and delivered directly."
    ],
    "scope": "php"
  },
  "plugin.cache_clearer": {
    "prefix": [
      "@Service (\"plugin.cache_clearer\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Plugin\\CachedDiscoveryClearer",
      " */",
      "${1:\\$plugin_cache_clearer_service} = \\Drupal::service('plugin.cache_clearer');",
      ""
    ],
    "description": [
      "Defines a class which is capable of clearing the cache on plugin managers."
    ],
    "scope": "php"
  },
  "plugin.manager.action": {
    "prefix": [
      "@Service (\"plugin.manager.action\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Action\\ActionManager",
      " */",
      "${1:\\$plugin_manager_action_service} = \\Drupal::service('plugin.manager.action');",
      ""
    ],
    "description": [
      "Provides an Action plugin manager.",
      "",
      "@see \\Drupal\\Core\\Annotation\\Action",
      "@see \\Drupal\\Core\\Action\\ActionInterface",
      "@see \\Drupal\\Core\\Action\\ActionBase",
      "@see plugin_api"
    ],
    "scope": "php"
  },
  "plugin.manager.archiver": {
    "prefix": [
      "@Service (\"plugin.manager.archiver\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Archiver\\ArchiverManager",
      " */",
      "${1:\\$plugin_manager_archiver_service} = \\Drupal::service('plugin.manager.archiver');",
      ""
    ],
    "description": [
      "Provides an Archiver plugin manager.",
      "",
      "@see \\Drupal\\Core\\Archiver\\Annotation\\Archiver",
      "@see \\Drupal\\Core\\Archiver\\ArchiverInterface",
      "@see plugin_api"
    ],
    "scope": "php"
  },
  "plugin.manager.block": {
    "prefix": [
      "@Service (\"plugin.manager.block\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Block\\BlockManager",
      " */",
      "${1:\\$plugin_manager_block_service} = \\Drupal::service('plugin.manager.block');",
      ""
    ],
    "description": [
      "Manages discovery and instantiation of block plugins.",
      "",
      "@todo Add documentation to this class.",
      "",
      "@see \\Drupal\\Core\\Block\\BlockPluginInterface"
    ],
    "scope": "php"
  },
  "plugin.manager.condition": {
    "prefix": [
      "@Service (\"plugin.manager.condition\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Condition\\ConditionManager",
      " */",
      "${1:\\$plugin_manager_condition_service} = \\Drupal::service('plugin.manager.condition');",
      ""
    ],
    "description": [
      "A plugin manager for condition plugins.",
      "",
      "@see \\Drupal\\Core\\Condition\\Annotation\\Condition",
      "@see \\Drupal\\Core\\Condition\\ConditionInterface",
      "@see \\Drupal\\Core\\Condition\\ConditionPluginBase",
      "",
      "@ingroup plugin_api"
    ],
    "scope": "php"
  },
  "plugin.manager.display_variant": {
    "prefix": [
      "@Service (\"plugin.manager.display_variant\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Display\\VariantManager",
      " */",
      "${1:\\$plugin_manager_display_variant_service} = \\Drupal::service('plugin.manager.display_variant');",
      ""
    ],
    "description": [
      "Manages discovery of display variant plugins.",
      "",
      "@see \\Drupal\\Core\\Display\\Annotation\\DisplayVariant",
      "@see \\Drupal\\Core\\Display\\VariantInterface",
      "@see \\Drupal\\Core\\Display\\VariantBase",
      "@see plugin_api"
    ],
    "scope": "php"
  },
  "plugin.manager.element_info": {
    "prefix": [
      "@Service (\"plugin.manager.element_info\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Render\\ElementInfoManager",
      " */",
      "${1:\\$plugin_manager_element_info_service} = \\Drupal::service('plugin.manager.element_info');",
      ""
    ],
    "description": [
      "Provides a plugin manager for element plugins.",
      "",
      "@see \\Drupal\\Core\\Render\\Annotation\\RenderElement",
      "@see \\Drupal\\Core\\Render\\Annotation\\FormElement",
      "@see \\Drupal\\Core\\Render\\Element\\RenderElement",
      "@see \\Drupal\\Core\\Render\\Element\\FormElement",
      "@see \\Drupal\\Core\\Render\\Element\\ElementInterface",
      "@see \\Drupal\\Core\\Render\\Element\\FormElementInterface",
      "@see plugin_api"
    ],
    "scope": "php"
  },
  "plugin.manager.entity_reference_selection": {
    "prefix": [
      "@Service (\"plugin.manager.entity_reference_selection\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityReferenceSelection\\SelectionPluginManager",
      " */",
      "${1:\\$plugin_manager_entity_reference_selection_service} = \\Drupal::service('plugin.manager.entity_reference_selection');",
      ""
    ],
    "description": [
      "Plugin type manager for Entity Reference Selection plugins.",
      "",
      "@see \\Drupal\\Core\\Entity\\Annotation\\EntityReferenceSelection",
      "@see \\Drupal\\Core\\Entity\\EntityReferenceSelection\\SelectionInterface",
      "@see plugin_api"
    ],
    "scope": "php"
  },
  "plugin.manager.field.field_type": {
    "prefix": [
      "@Service (\"plugin.manager.field.field_type\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Field\\FieldTypePluginManager",
      " */",
      "${1:\\$plugin_manager_field_field_type_service} = \\Drupal::service('plugin.manager.field.field_type');",
      ""
    ],
    "description": [
      "Plugin manager for 'field type' plugins.",
      "",
      "@ingroup field_types"
    ],
    "scope": "php"
  },
  "plugin.manager.field.formatter": {
    "prefix": [
      "@Service (\"plugin.manager.field.formatter\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Field\\FormatterPluginManager",
      " */",
      "${1:\\$plugin_manager_field_formatter_service} = \\Drupal::service('plugin.manager.field.formatter');",
      ""
    ],
    "description": [
      "Plugin type manager for field formatters.",
      "",
      "@ingroup field_formatter"
    ],
    "scope": "php"
  },
  "plugin.manager.field.widget": {
    "prefix": [
      "@Service (\"plugin.manager.field.widget\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Field\\WidgetPluginManager",
      " */",
      "${1:\\$plugin_manager_field_widget_service} = \\Drupal::service('plugin.manager.field.widget');",
      ""
    ],
    "description": [
      "Plugin type manager for field widgets.",
      "",
      "@ingroup field_widget"
    ],
    "scope": "php"
  },
  "plugin.manager.link_relation_type": {
    "prefix": [
      "@Service (\"plugin.manager.link_relation_type\")"
    ],
    "body": [
      "/**",
      " * @var \\Drupal\\Core\\Http\\LinkRelationTypeManager",
      " */",
      "${1:\\$plugin_manager_link_relation_type_service} = \\Drupal::service('plugin.manager.link_relation_type');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "plugin.manager.mail": {
    "prefix": [
      "@Service (\"plugin.manager.mail\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Mail\\MailManager",
      " */",
      "${1:\\$plugin_manager_mail_service} = \\Drupal::service('plugin.manager.mail');",
      ""
    ],
    "description": [
      "Provides a Mail plugin manager.",
      "",
      "@see \\Drupal\\Core\\Annotation\\Mail",
      "@see \\Drupal\\Core\\Mail\\MailInterface",
      "@see plugin_api"
    ],
    "scope": "php"
  },
  "plugin.manager.menu.contextual_link": {
    "prefix": [
      "@Service (\"plugin.manager.menu.contextual_link\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Menu\\ContextualLinkManager",
      " */",
      "${1:\\$plugin_manager_menu_contextual_link_service} = \\Drupal::service('plugin.manager.menu.contextual_link');",
      ""
    ],
    "description": [
      "Defines a contextual link plugin manager to deal with contextual links.",
      "",
      "@see \\Drupal\\Core\\Menu\\ContextualLinkInterface"
    ],
    "scope": "php"
  },
  "plugin.manager.menu.link": {
    "prefix": [
      "@Service (\"plugin.manager.menu.link\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Menu\\MenuLinkManager",
      " */",
      "${1:\\$plugin_manager_menu_link_service} = \\Drupal::service('plugin.manager.menu.link');",
      ""
    ],
    "description": [
      "Manages discovery, instantiation, and tree building of menu link plugins.",
      "",
      "This manager finds plugins that are rendered as menu links."
    ],
    "scope": "php"
  },
  "plugin.manager.menu.local_action": {
    "prefix": [
      "@Service (\"plugin.manager.menu.local_action\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Menu\\LocalActionManager",
      " */",
      "${1:\\$plugin_manager_menu_local_action_service} = \\Drupal::service('plugin.manager.menu.local_action');",
      ""
    ],
    "description": [
      "Provides the default local action manager using YML as primary definition."
    ],
    "scope": "php"
  },
  "plugin.manager.menu.local_task": {
    "prefix": [
      "@Service (\"plugin.manager.menu.local_task\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Menu\\LocalTaskManager",
      " */",
      "${1:\\$plugin_manager_menu_local_task_service} = \\Drupal::service('plugin.manager.menu.local_task');",
      ""
    ],
    "description": [
      "Provides the default local task manager using YML as primary definition."
    ],
    "scope": "php"
  },
  "plugin.manager.queue_worker": {
    "prefix": [
      "@Service (\"plugin.manager.queue_worker\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Queue\\QueueWorkerManager",
      " */",
      "${1:\\$plugin_manager_queue_worker_service} = \\Drupal::service('plugin.manager.queue_worker');",
      ""
    ],
    "description": [
      "Defines the queue worker manager.",
      "",
      "@see \\Drupal\\Core\\Queue\\QueueWorkerInterface",
      "@see \\Drupal\\Core\\Queue\\QueueWorkerBase",
      "@see \\Drupal\\Core\\Annotation\\QueueWorker",
      "@see plugin_api"
    ],
    "scope": "php"
  },
  "plugin_form.factory": {
    "prefix": [
      "@Service (\"plugin_form.factory\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Plugin\\PluginFormFactory",
      " */",
      "${1:\\$plugin_form_factory_service} = \\Drupal::service('plugin_form.factory');",
      ""
    ],
    "description": [
      "Provides form discovery capabilities for plugins."
    ],
    "scope": "php"
  },
  "private_key": {
    "prefix": [
      "@Service (\"private_key\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\PrivateKey",
      " */",
      "${1:\\$private_key_service} = \\Drupal::service('private_key');",
      ""
    ],
    "description": [
      "Manages the Drupal private key."
    ],
    "scope": "php"
  },
  "psr7.http_foundation_factory": {
    "prefix": [
      "@Service (\"psr7.http_foundation_factory\")"
    ],
    "body": [
      "/**",
      " * @var Symfony\\Bridge\\PsrHttpMessage\\Factory\\HttpFoundationFactory",
      " */",
      "${1:\\$psr7_http_foundation_factory_service} = \\Drupal::service('psr7.http_foundation_factory');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "psr7.http_message_factory": {
    "prefix": [
      "@Service (\"psr7.http_message_factory\")"
    ],
    "body": [
      "/**",
      " * @var Symfony\\Bridge\\PsrHttpMessage\\Factory\\PsrHttpFactory",
      " */",
      "${1:\\$psr7_http_message_factory_service} = \\Drupal::service('psr7.http_message_factory');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "psr_response_view_subscriber": {
    "prefix": [
      "@Service (\"psr_response_view_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\PsrResponseSubscriber",
      " */",
      "${1:\\$psr_response_view_subscriber_service} = \\Drupal::service('psr_response_view_subscriber');",
      ""
    ],
    "description": [
      "Response subscriber for handling PSR-7 responses."
    ],
    "scope": "php"
  },
  "queue": {
    "prefix": [
      "@Service (\"queue\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Queue\\QueueFactory",
      " */",
      "${1:\\$queue_service} = \\Drupal::service('queue');",
      ""
    ],
    "description": [
      "Defines the queue factory."
    ],
    "scope": "php"
  },
  "queue.database": {
    "prefix": [
      "@Service (\"queue.database\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Queue\\QueueDatabaseFactory",
      " */",
      "${1:\\$queue_database_service} = \\Drupal::service('queue.database');",
      ""
    ],
    "description": [
      "Defines the key/value store factory for the database backend."
    ],
    "scope": "php"
  },
  "redirect.destination": {
    "prefix": [
      "@Service (\"redirect.destination\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Routing\\RedirectDestination",
      " */",
      "${1:\\$redirect_destination_service} = \\Drupal::service('redirect.destination');",
      ""
    ],
    "description": [
      "Provides helpers for redirect destinations."
    ],
    "scope": "php"
  },
  "redirect_leading_slashes_subscriber": {
    "prefix": [
      "@Service (\"redirect_leading_slashes_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\RedirectLeadingSlashesSubscriber",
      " */",
      "${1:\\$redirect_leading_slashes_subscriber_service} = \\Drupal::service('redirect_leading_slashes_subscriber');",
      ""
    ],
    "description": [
      "Redirects paths containing successive slashes to those with single slashes."
    ],
    "scope": "php"
  },
  "redirect_response_subscriber": {
    "prefix": [
      "@Service (\"redirect_response_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\RedirectResponseSubscriber",
      " */",
      "${1:\\$redirect_response_subscriber_service} = \\Drupal::service('redirect_response_subscriber');",
      ""
    ],
    "description": [
      "Allows manipulation of the response object when performing a redirect."
    ],
    "scope": "php"
  },
  "render_cache": {
    "prefix": [
      "@Service (\"render_cache\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Render\\PlaceholderingRenderCache",
      " */",
      "${1:\\$render_cache_service} = \\Drupal::service('render_cache');",
      ""
    ],
    "description": [
      "Adds automatic placeholdering to the RenderCache.",
      "",
      "This automatic placeholdering is performed to ensure the containing elements",
      "and overarching response are as cacheable as possible. Elements whose subtree",
      "bubble either max-age=0 or high-cardinality cache contexts (such as 'user'",
      "and 'session') are considered poorly cacheable.",
      "",
      "@see sites/default/default.services.yml",
      "",
      "Automatic placeholdering is performed only on elements whose subtree was",
      "generated using a #lazy_builder callback and whose bubbled cacheability meets",
      "the auto-placeholdering conditions as configured in the renderer.config",
      "container parameter.",
      "",
      "This RenderCache implementation automatically replaces an element with a",
      "placeholder:",
      "- on render cache hit, i.e. ::get()",
      "- on render cache miss, i.e. ::set() (in subsequent requests, it will be a",
      "  cache hit)",
      "",
      "In either case, the render cache is guaranteed to contain the to-be-rendered",
      "placeholder, so replacing (rendering) the placeholder will be very fast.",
      "",
      "Finally, in case the render cache item disappears between the time it is",
      "decided to automatically placeholder the element and the time where the",
      "placeholder is replaced (rendered), that is guaranteed to not be problematic.",
      "Because this only automatically placeholders elements that have a",
      "#lazy_builder callback set, which means that in the worst case, it will need",
      "to be re-rendered."
    ],
    "scope": "php"
  },
  "render_placeholder_generator": {
    "prefix": [
      "@Service (\"render_placeholder_generator\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Render\\PlaceholderGenerator",
      " */",
      "${1:\\$render_placeholder_generator_service} = \\Drupal::service('render_placeholder_generator');",
      ""
    ],
    "description": [
      "Turns a render array into a placeholder."
    ],
    "scope": "php"
  },
  "renderer": {
    "prefix": [
      "@Service (\"renderer\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Render\\Renderer",
      " */",
      "${1:\\$renderer_service} = \\Drupal::service('renderer');",
      ""
    ],
    "description": [
      "Turns a render array into an HTML string."
    ],
    "scope": "php"
  },
  "renderer_non_html": {
    "prefix": [
      "@Service (\"renderer_non_html\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\RenderArrayNonHtmlSubscriber",
      " */",
      "${1:\\$renderer_non_html_service} = \\Drupal::service('renderer_non_html');",
      ""
    ],
    "description": [
      "Throws 406 if requesting non-HTML format and controller returns render array."
    ],
    "scope": "php"
  },
  "request_close_subscriber": {
    "prefix": [
      "@Service (\"request_close_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\RequestCloseSubscriber",
      " */",
      "${1:\\$request_close_subscriber_service} = \\Drupal::service('request_close_subscriber');",
      ""
    ],
    "description": [
      "Subscriber for all responses."
    ],
    "scope": "php"
  },
  "request_format_route_filter": {
    "prefix": [
      "@Service (\"request_format_route_filter\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Routing\\RequestFormatRouteFilter",
      " */",
      "${1:\\$request_format_route_filter_service} = \\Drupal::service('request_format_route_filter');",
      ""
    ],
    "description": [
      "Provides a route filter, which filters by the request format."
    ],
    "scope": "php"
  },
  "request_stack": {
    "prefix": [
      "@Service (\"request_stack\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Http\\RequestStack",
      " */",
      "${1:\\$request_stack_service} = \\Drupal::service('request_stack');",
      ""
    ],
    "description": [
      "Forward-compatibility shim for Symfony's RequestStack.",
      "",
      "@todo https://www.drupal.org/node/3265121 Remove in Drupal 10.0.x."
    ],
    "scope": "php"
  },
  "required_module_uninstall_validator": {
    "prefix": [
      "@Service (\"required_module_uninstall_validator\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Extension\\RequiredModuleUninstallValidator",
      " */",
      "${1:\\$required_module_uninstall_validator_service} = \\Drupal::service('required_module_uninstall_validator');",
      ""
    ],
    "description": [
      "Ensures that required modules cannot be uninstalled."
    ],
    "scope": "php"
  },
  "resolver_manager.entity": {
    "prefix": [
      "@Service (\"resolver_manager.entity\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\EntityResolverManager",
      " */",
      "${1:\\$resolver_manager_entity_service} = \\Drupal::service('resolver_manager.entity');",
      ""
    ],
    "description": [
      "Sets the entity route parameter converter options automatically.",
      "",
      "If controllers of routes with route parameters, type-hint the parameters with",
      "an entity interface, upcasting is done automatically."
    ],
    "scope": "php"
  },
  "response_filter.active_link": {
    "prefix": [
      "@Service (\"response_filter.active_link\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\ActiveLinkResponseFilter",
      " */",
      "${1:\\$response_filter_active_link_service} = \\Drupal::service('response_filter.active_link');",
      ""
    ],
    "description": [
      "Subscribes to filter HTML responses, to set the 'is-active' class on links.",
      "",
      "Only for anonymous users; for authenticated users, the active-link asset",
      "library is loaded.",
      "",
      "@see system_page_attachments()"
    ],
    "scope": "php"
  },
  "response_filter.rss.relative_url": {
    "prefix": [
      "@Service (\"response_filter.rss.relative_url\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\RssResponseRelativeUrlFilter",
      " */",
      "${1:\\$response_filter_rss_relative_url_service} = \\Drupal::service('response_filter.rss.relative_url');",
      ""
    ],
    "description": [
      "Subscribes to filter RSS responses, to make relative URIs absolute."
    ],
    "scope": "php"
  },
  "response_generator_subscriber": {
    "prefix": [
      "@Service (\"response_generator_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\ResponseGeneratorSubscriber",
      " */",
      "${1:\\$response_generator_subscriber_service} = \\Drupal::service('response_generator_subscriber');",
      ""
    ],
    "description": [
      "Response subscriber to add X-Generator header tag."
    ],
    "scope": "php"
  },
  "route_access_response_subscriber": {
    "prefix": [
      "@Service (\"route_access_response_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\RouteAccessResponseSubscriber",
      " */",
      "${1:\\$route_access_response_subscriber_service} = \\Drupal::service('route_access_response_subscriber');",
      ""
    ],
    "description": [
      "Response subscriber to bubble the route's access result's cacheability.",
      "",
      "During routing, access checking is performed. The corresponding access result",
      "is stored in the Request object's attributes, just like the matching route",
      "object is. In case of a cacheable response, the route's access result also",
      "determined the content of the response, and therefore the cacheability of the",
      "route's access result should also be applied to the resulting response.",
      "",
      "@see \\Drupal\\Core\\Routing\\AccessAwareRouterInterface::ACCESS_RESULT",
      "@see \\Drupal\\Core\\Routing\\AccessAwareRouter::matchRequest()",
      "@see \\Drupal\\Core\\Routing\\AccessAwareRouter::checkAccess()"
    ],
    "scope": "php"
  },
  "route_enhancer.entity": {
    "prefix": [
      "@Service (\"route_enhancer.entity\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\Enhancer\\EntityRouteEnhancer",
      " */",
      "${1:\\$route_enhancer_entity_service} = \\Drupal::service('route_enhancer.entity');",
      ""
    ],
    "description": [
      "Enhances an entity form route with the appropriate controller."
    ],
    "scope": "php"
  },
  "route_enhancer.entity_bundle": {
    "prefix": [
      "@Service (\"route_enhancer.entity_bundle\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Entity\\Enhancer\\EntityBundleRouteEnhancer",
      " */",
      "${1:\\$route_enhancer_entity_bundle_service} = \\Drupal::service('route_enhancer.entity_bundle');",
      ""
    ],
    "description": [
      "Sets the bundle parameter for routes with the _field_ui option."
    ],
    "scope": "php"
  },
  "route_enhancer.entity_revision": {
    "prefix": [
      "@Service (\"route_enhancer.entity_revision\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Routing\\Enhancer\\EntityRevisionRouteEnhancer",
      " */",
      "${1:\\$route_enhancer_entity_revision_service} = \\Drupal::service('route_enhancer.entity_revision');",
      ""
    ],
    "description": [
      "Adds _entity_revision to the request attributes, if possible."
    ],
    "scope": "php"
  },
  "route_enhancer.form": {
    "prefix": [
      "@Service (\"route_enhancer.form\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Routing\\Enhancer\\FormRouteEnhancer",
      " */",
      "${1:\\$route_enhancer_form_service} = \\Drupal::service('route_enhancer.form');",
      ""
    ],
    "description": [
      "Enhancer to add a wrapping controller for _form routes."
    ],
    "scope": "php"
  },
  "route_enhancer.param_conversion": {
    "prefix": [
      "@Service (\"route_enhancer.param_conversion\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Routing\\Enhancer\\ParamConversionEnhancer",
      " */",
      "${1:\\$route_enhancer_param_conversion_service} = \\Drupal::service('route_enhancer.param_conversion');",
      ""
    ],
    "description": [
      "Provides a route enhancer that handles parameter conversion."
    ],
    "scope": "php"
  },
  "route_http_method_subscriber": {
    "prefix": [
      "@Service (\"route_http_method_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\RouteMethodSubscriber",
      " */",
      "${1:\\$route_http_method_subscriber_service} = \\Drupal::service('route_http_method_subscriber');",
      ""
    ],
    "description": [
      "Provides a default value for the HTTP method restriction on routes.",
      "",
      "Most routes will only deal with GET and POST requests, so we restrict them to",
      "those two if nothing else is specified. This is necessary to give other",
      "routes a chance during the route matching process when they are listening",
      "for example to DELETE requests on the same path. A typical use case are REST",
      "web service routes that use the full spectrum of HTTP methods."
    ],
    "scope": "php"
  },
  "route_processor_csrf": {
    "prefix": [
      "@Service (\"route_processor_csrf\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Access\\RouteProcessorCsrf",
      " */",
      "${1:\\$route_processor_csrf_service} = \\Drupal::service('route_processor_csrf');",
      ""
    ],
    "description": [
      "Processes the outbound route to handle the CSRF token."
    ],
    "scope": "php"
  },
  "route_processor_current": {
    "prefix": [
      "@Service (\"route_processor_current\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\RouteProcessor\\RouteProcessorCurrent",
      " */",
      "${1:\\$route_processor_current_service} = \\Drupal::service('route_processor_current');",
      ""
    ],
    "description": [
      "Provides a route processor to replace ."
    ],
    "scope": "php"
  },
  "route_processor_manager": {
    "prefix": [
      "@Service (\"route_processor_manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\RouteProcessor\\RouteProcessorManager",
      " */",
      "${1:\\$route_processor_manager_service} = \\Drupal::service('route_processor_manager');",
      ""
    ],
    "description": [
      "Route processor manager.",
      "",
      "Holds an array of route processor objects and uses them to sequentially",
      "process an outbound route, in order of processor priority."
    ],
    "scope": "php"
  },
  "route_special_attributes_subscriber": {
    "prefix": [
      "@Service (\"route_special_attributes_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\SpecialAttributesRouteSubscriber",
      " */",
      "${1:\\$route_special_attributes_subscriber_service} = \\Drupal::service('route_special_attributes_subscriber');",
      ""
    ],
    "description": [
      "Provides a route subscriber which checks for invalid pattern variables."
    ],
    "scope": "php"
  },
  "route_subscriber.entity": {
    "prefix": [
      "@Service (\"route_subscriber.entity\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\EntityRouteAlterSubscriber",
      " */",
      "${1:\\$route_subscriber_entity_service} = \\Drupal::service('route_subscriber.entity');",
      ""
    ],
    "description": [
      "Registers the 'type' of route parameter names that match an entity type.",
      "",
      "@todo Matching on parameter *name* is not ideal, because it breaks",
      "  encapsulation: parameter names are local to the controller and route, and",
      "  controllers and routes can't be expected to know what all possible entity",
      "  types might exist across all modules in order to pick names that don't",
      "  conflict. Instead, the 'type' should be determined from introspecting what",
      "  kind of PHP variable (e.g., a type hinted interface) the controller",
      "  requires: https://www.drupal.org/node/2041907."
    ],
    "scope": "php"
  },
  "route_subscriber.module": {
    "prefix": [
      "@Service (\"route_subscriber.module\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\ModuleRouteSubscriber",
      " */",
      "${1:\\$route_subscriber_module_service} = \\Drupal::service('route_subscriber.module');",
      ""
    ],
    "description": [
      "A route subscriber to remove routes that depend on modules being enabled."
    ],
    "scope": "php"
  },
  "router": {
    "prefix": [
      "@Service (\"router\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Routing\\AccessAwareRouter",
      " */",
      "${1:\\$router_service} = \\Drupal::service('router');",
      ""
    ],
    "description": [
      "A router class for Drupal with access check and upcasting."
    ],
    "scope": "php"
  },
  "router.admin_context": {
    "prefix": [
      "@Service (\"router.admin_context\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Routing\\AdminContext",
      " */",
      "${1:\\$router_admin_context_service} = \\Drupal::service('router.admin_context');",
      ""
    ],
    "description": [
      "Provides a helper class to determine whether the route is an admin one."
    ],
    "scope": "php"
  },
  "router.builder": {
    "prefix": [
      "@Service (\"router.builder\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Routing\\RouteBuilder",
      " */",
      "${1:\\$router_builder_service} = \\Drupal::service('router.builder');",
      ""
    ],
    "description": [
      "Managing class for rebuilding the router table."
    ],
    "scope": "php"
  },
  "router.dumper": {
    "prefix": [
      "@Service (\"router.dumper\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Routing\\MatcherDumper",
      " */",
      "${1:\\$router_dumper_service} = \\Drupal::service('router.dumper');",
      ""
    ],
    "description": [
      "Dumps Route information to a database table.",
      "",
      "@see \\Drupal\\Core\\Routing\\RouteProvider"
    ],
    "scope": "php"
  },
  "router.no_access_checks": {
    "prefix": [
      "@Service (\"router.no_access_checks\")"
    ],
    "body": [
      "/**",
      " * @var \\Drupal\\Core\\Routing\\Router",
      " */",
      "${1:\\$router_no_access_checks_service} = \\Drupal::service('router.no_access_checks');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "router.path_roots_subscriber": {
    "prefix": [
      "@Service (\"router.path_roots_subscriber\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\EventSubscriber\\PathRootsSubscriber",
      " */",
      "${1:\\$router_path_roots_subscriber_service} = \\Drupal::service('router.path_roots_subscriber');",
      ""
    ],
    "description": [
      "Provides all available first bits of all route paths."
    ],
    "scope": "php"
  },
  "router.request_context": {
    "prefix": [
      "@Service (\"router.request_context\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Routing\\RequestContext",
      " */",
      "${1:\\$router_request_context_service} = \\Drupal::service('router.request_context');",
      ""
    ],
    "description": [
      "Holds information about the current request."
    ],
    "scope": "php"
  },
  "router.route_preloader": {
    "prefix": [
      "@Service (\"router.route_preloader\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Routing\\RoutePreloader",
      " */",
      "${1:\\$router_route_preloader_service} = \\Drupal::service('router.route_preloader');",
      ""
    ],
    "description": [
      "Defines a class which preloads non-admin routes.",
      "",
      "On an actual site we want to avoid too many database queries so we build a",
      "list of all routes which most likely appear on the actual site, which are all",
      "HTML routes not starting with \"/admin\"."
    ],
    "scope": "php"
  },
  "router.route_provider": {
    "prefix": [
      "@Service (\"router.route_provider\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Routing\\RouteProvider",
      " */",
      "${1:\\$router_route_provider_service} = \\Drupal::service('router.route_provider');",
      ""
    ],
    "description": [
      "A Route Provider front-end for all Drupal-stored routes."
    ],
    "scope": "php"
  },
  "router.route_provider.lazy_builder": {
    "prefix": [
      "@Service (\"router.route_provider.lazy_builder\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Routing\\RouteProviderLazyBuilder",
      " */",
      "${1:\\$router_route_provider_lazy_builder_service} = \\Drupal::service('router.route_provider.lazy_builder');",
      ""
    ],
    "description": [
      "A Route Provider front-end for all Drupal-stored routes."
    ],
    "scope": "php"
  },
  "router_listener": {
    "prefix": [
      "@Service (\"router_listener\")"
    ],
    "body": [
      "/**",
      " * @var Symfony\\Component\\HttpKernel\\EventListener\\RouterListener",
      " */",
      "${1:\\$router_listener_service} = \\Drupal::service('router_listener');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "serialization.json": {
    "prefix": [
      "@Service (\"serialization.json\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Component\\Serialization\\Json",
      " */",
      "${1:\\$serialization_json_service} = \\Drupal::service('serialization.json');",
      ""
    ],
    "description": [
      "Default serialization for JSON.",
      "",
      "@ingroup third_party"
    ],
    "scope": "php"
  },
  "serialization.phpserialize": {
    "prefix": [
      "@Service (\"serialization.phpserialize\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Component\\Serialization\\PhpSerialize",
      " */",
      "${1:\\$serialization_phpserialize_service} = \\Drupal::service('serialization.phpserialize');",
      ""
    ],
    "description": [
      "Default serialization for serialized PHP."
    ],
    "scope": "php"
  },
  "serialization.yaml": {
    "prefix": [
      "@Service (\"serialization.yaml\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Component\\Serialization\\Yaml",
      " */",
      "${1:\\$serialization_yaml_service} = \\Drupal::service('serialization.yaml');",
      ""
    ],
    "description": [
      "Provides a YAML serialization implementation.",
      "",
      "Proxy implementation that will choose the best library based on availability."
    ],
    "scope": "php"
  },
  "session": {
    "prefix": [
      "@Service (\"session\")"
    ],
    "body": [
      "/**",
      " * @var Symfony\\Component\\HttpFoundation\\Session\\Session",
      " */",
      "${1:\\$session_service} = \\Drupal::service('session');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "session_configuration": {
    "prefix": [
      "@Service (\"session_configuration\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Session\\SessionConfiguration",
      " */",
      "${1:\\$session_configuration_service} = \\Drupal::service('session_configuration');",
      ""
    ],
    "description": [
      "Defines the default session configuration generator."
    ],
    "scope": "php"
  },
  "session_handler.storage": {
    "prefix": [
      "@Service (\"session_handler.storage\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Session\\SessionHandler",
      " */",
      "${1:\\$session_handler_storage_service} = \\Drupal::service('session_handler.storage');",
      ""
    ],
    "description": [
      "Default session handler."
    ],
    "scope": "php"
  },
  "session_handler.write_safe": {
    "prefix": [
      "@Service (\"session_handler.write_safe\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Session\\WriteSafeSessionHandler",
      " */",
      "${1:\\$session_handler_write_safe_service} = \\Drupal::service('session_handler.write_safe');",
      ""
    ],
    "description": [
      "Wraps the session handler to prevent writes when not necessary or allowed."
    ],
    "scope": "php"
  },
  "session_manager": {
    "prefix": [
      "@Service (\"session_manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Session\\SessionManager",
      " */",
      "${1:\\$session_manager_service} = \\Drupal::service('session_manager');",
      ""
    ],
    "description": [
      "Manages user sessions.",
      "",
      "This class implements the custom session management code inherited from",
      "Drupal 7 on top of the corresponding Symfony component. Regrettably the name",
      "NativeSessionStorage is not quite accurate. In fact the responsibility for",
      "storing and retrieving session data has been extracted from it in Symfony 2.1",
      "but the class name was not changed.",
      "",
      "@todo",
      "  In fact the NativeSessionStorage class already implements all of the",
      "  functionality required by a typical Symfony application. Normally it is not",
      "  necessary to subclass it at all. In order to reach the point where Drupal",
      "  can use the Symfony session management unmodified, the code implemented",
      "  here needs to be extracted either into a dedicated session handler proxy",
      "  (e.g. sid-hashing) or relocated to the authentication subsystem."
    ],
    "scope": "php"
  },
  "session_manager.metadata_bag": {
    "prefix": [
      "@Service (\"session_manager.metadata_bag\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Session\\MetadataBag",
      " */",
      "${1:\\$session_manager_metadata_bag_service} = \\Drupal::service('session_manager.metadata_bag');",
      ""
    ],
    "description": [
      "Provides a container for application specific session metadata."
    ],
    "scope": "php"
  },
  "settings": {
    "prefix": [
      "@Service (\"settings\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Site\\Settings",
      " */",
      "${1:\\$settings_service} = \\Drupal::service('settings');",
      ""
    ],
    "description": [
      "Read only settings that are initialized with the class.",
      "",
      "@ingroup utility"
    ],
    "scope": "php"
  },
  "site.path": {
    "prefix": [
      "@Service (\"site.path\")"
    ],
    "body": [
      "/**",
      " * @var \\SplString",
      " */",
      "${1:\\$site_path_service} = \\Drupal::service('site.path');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "state": {
    "prefix": [
      "@Service (\"state\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\State\\State",
      " */",
      "${1:\\$state_service} = \\Drupal::service('state');",
      ""
    ],
    "description": [
      "Provides the state system using a key value store."
    ],
    "scope": "php"
  },
  "stream_wrapper.public": {
    "prefix": [
      "@Service (\"stream_wrapper.public\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\StreamWrapper\\PublicStream",
      " */",
      "${1:\\$stream_wrapper_public_service} = \\Drupal::service('stream_wrapper.public');",
      ""
    ],
    "description": [
      "Defines a Drupal public (public://) stream wrapper class.",
      "",
      "Provides support for storing publicly accessible files with the Drupal file",
      "interface."
    ],
    "scope": "php"
  },
  "stream_wrapper.temporary": {
    "prefix": [
      "@Service (\"stream_wrapper.temporary\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\StreamWrapper\\TemporaryStream",
      " */",
      "${1:\\$stream_wrapper_temporary_service} = \\Drupal::service('stream_wrapper.temporary');",
      ""
    ],
    "description": [
      "Defines a Drupal temporary (temporary://) stream wrapper class.",
      "",
      "Provides support for storing temporarily accessible files with the Drupal",
      "file interface."
    ],
    "scope": "php"
  },
  "stream_wrapper_manager": {
    "prefix": [
      "@Service (\"stream_wrapper_manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\StreamWrapper\\StreamWrapperManager",
      " */",
      "${1:\\$stream_wrapper_manager_service} = \\Drupal::service('stream_wrapper_manager');",
      ""
    ],
    "description": [
      "Provides a StreamWrapper manager.",
      "",
      "@see \\Drupal\\Core\\StreamWrapper\\StreamWrapperInterface"
    ],
    "scope": "php"
  },
  "string_translation": {
    "prefix": [
      "@Service (\"string_translation\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\StringTranslation\\TranslationManager",
      " */",
      "${1:\\$string_translation_service} = \\Drupal::service('string_translation');",
      ""
    ],
    "description": [
      "Defines a chained translation implementation combining multiple translators."
    ],
    "scope": "php"
  },
  "string_translator.custom_strings": {
    "prefix": [
      "@Service (\"string_translator.custom_strings\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\StringTranslation\\Translator\\CustomStrings",
      " */",
      "${1:\\$string_translator_custom_strings_service} = \\Drupal::service('string_translator.custom_strings');",
      ""
    ],
    "description": [
      "String translator using overrides from variables.",
      "",
      "This is a high performance way to provide a handful of string replacements.",
      "See settings.php for examples."
    ],
    "scope": "php"
  },
  "tempstore.private": {
    "prefix": [
      "@Service (\"tempstore.private\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\TempStore\\PrivateTempStoreFactory",
      " */",
      "${1:\\$tempstore_private_service} = \\Drupal::service('tempstore.private');",
      ""
    ],
    "description": [
      "Creates a PrivateTempStore object for a given collection."
    ],
    "scope": "php"
  },
  "tempstore.shared": {
    "prefix": [
      "@Service (\"tempstore.shared\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\TempStore\\SharedTempStoreFactory",
      " */",
      "${1:\\$tempstore_shared_service} = \\Drupal::service('tempstore.shared');",
      ""
    ],
    "description": [
      "Creates a shared temporary storage for a collection."
    ],
    "scope": "php"
  },
  "theme.initialization": {
    "prefix": [
      "@Service (\"theme.initialization\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Theme\\ThemeInitialization",
      " */",
      "${1:\\$theme_initialization_service} = \\Drupal::service('theme.initialization');",
      ""
    ],
    "description": [
      "Provides the theme initialization logic."
    ],
    "scope": "php"
  },
  "theme.manager": {
    "prefix": [
      "@Service (\"theme.manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Theme\\ThemeManager",
      " */",
      "${1:\\$theme_manager_service} = \\Drupal::service('theme.manager');",
      ""
    ],
    "description": [
      "Provides the default implementation of a theme manager."
    ],
    "scope": "php"
  },
  "theme.negotiator": {
    "prefix": [
      "@Service (\"theme.negotiator\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Theme\\ThemeNegotiator",
      " */",
      "${1:\\$theme_negotiator_service} = \\Drupal::service('theme.negotiator');",
      ""
    ],
    "description": [
      "Provides a class which determines the active theme of the page.",
      "",
      "It therefore uses ThemeNegotiatorInterface objects which are passed in",
      "using the 'theme_negotiator' tag."
    ],
    "scope": "php"
  },
  "theme.negotiator.ajax_base_page": {
    "prefix": [
      "@Service (\"theme.negotiator.ajax_base_page\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Theme\\AjaxBasePageNegotiator",
      " */",
      "${1:\\$theme_negotiator_ajax_base_page_service} = \\Drupal::service('theme.negotiator.ajax_base_page');",
      ""
    ],
    "description": [
      "Defines a theme negotiator that deals with the active theme on ajax requests.",
      "",
      "Many different pages can invoke an Ajax request to a generic Ajax path. It is",
      "almost always desired for an Ajax response to be rendered using the same",
      "theme as the base page, because most themes are built with the assumption",
      "that they control the entire page, so if the CSS for two themes are both",
      "loaded for a given page, they may conflict with each other. For example,",
      "Bartik is Drupal's default theme, and Seven is Drupal's default",
      "administration theme. Depending on whether the \"Use the administration theme",
      "when editing or creating content\" checkbox is checked, the node edit form may",
      "be displayed in either theme, but the Ajax response to the Field module's",
      "\"Add another item\" button should be rendered using the same theme as the rest",
      "of the page."
    ],
    "scope": "php"
  },
  "theme.negotiator.default": {
    "prefix": [
      "@Service (\"theme.negotiator.default\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Theme\\DefaultNegotiator",
      " */",
      "${1:\\$theme_negotiator_default_service} = \\Drupal::service('theme.negotiator.default');",
      ""
    ],
    "description": [
      "Determines the default theme of the site."
    ],
    "scope": "php"
  },
  "theme.registry": {
    "prefix": [
      "@Service (\"theme.registry\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Theme\\Registry",
      " */",
      "${1:\\$theme_registry_service} = \\Drupal::service('theme.registry');",
      ""
    ],
    "description": [
      "Defines the theme registry service.",
      "",
      "@internal",
      "",
      "Theme registry is expected to be used only internally since every",
      "hook_theme() implementation depends on the way this class is built. This",
      "class may get new features in minor releases so this class should be",
      "considered internal.",
      "",
      "@todo Replace local $registry variables in methods with $this->registry."
    ],
    "scope": "php"
  },
  "theme_handler": {
    "prefix": [
      "@Service (\"theme_handler\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Extension\\ThemeHandler",
      " */",
      "${1:\\$theme_handler_service} = \\Drupal::service('theme_handler');",
      ""
    ],
    "description": [
      "Default theme handler using the config system to store installation statuses."
    ],
    "scope": "php"
  },
  "theme_installer": {
    "prefix": [
      "@Service (\"theme_installer\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Extension\\ThemeInstaller",
      " */",
      "${1:\\$theme_installer_service} = \\Drupal::service('theme_installer');",
      ""
    ],
    "description": [
      "Manages theme installation/uninstallation."
    ],
    "scope": "php"
  },
  "title_resolver": {
    "prefix": [
      "@Service (\"title_resolver\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Controller\\TitleResolver",
      " */",
      "${1:\\$title_resolver_service} = \\Drupal::service('title_resolver');",
      ""
    ],
    "description": [
      "Provides the default implementation of the title resolver interface."
    ],
    "scope": "php"
  },
  "token": {
    "prefix": [
      "@Service (\"token\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Utility\\Token",
      " */",
      "${1:\\$token_service} = \\Drupal::service('token');",
      ""
    ],
    "description": [
      "Drupal placeholder/token replacement system.",
      "",
      "API functions for replacing placeholders in text with meaningful values.",
      "",
      "For example: When configuring automated emails, an administrator enters",
      "standard text for the email. Variables like the title of a node and the date",
      "the email was sent can be entered as placeholders like [node:title] and",
      "[date:short]. When a Drupal module prepares to send the email, it can call",
      "the Token::replace() function, passing in the text. The token system will",
      "scan the text for placeholder tokens, give other modules an opportunity to",
      "replace them with meaningful text, then return the final product to the",
      "original module.",
      "",
      "Tokens follow the form: [$type:$name], where $type is a general class of",
      "tokens like 'node', 'user', or 'comment' and $name is the name of a given",
      "placeholder. For example, [node:title] or [node:created:since].",
      "",
      "In addition to raw text containing placeholders, modules may pass in an array",
      "of objects to be used when performing the replacement. The objects should be",
      "keyed by the token type they correspond to. For example:",
      "",
      "@code",
      "// Load a node and a user, then replace tokens in the text.",
      "$text = 'On [date:short], [user:name] read [node:title].';",
      "$node = Node::load(1);",
      "$user = User::load(1);",
      "",
      "// [date:...] tokens use the current date automatically.",
      "$data = array('node' => $node, 'user' => $user);",
      "return Token::replace($text, $data);",
      "@endcode",
      "",
      "Some tokens may be chained in the form of [$type:$pointer:$name], where $type",
      "is a normal token type, $pointer is a reference to another token type, and",
      "$name is the name of a given placeholder. For example, [node:author:mail]. In",
      "that example, 'author' is a pointer to the 'user' account that created the",
      "node, and 'mail' is a placeholder available for any 'user'.",
      "",
      "@see Token::replace()",
      "@see hook_tokens()",
      "@see hook_token_info()"
    ],
    "scope": "php"
  },
  "transliteration": {
    "prefix": [
      "@Service (\"transliteration\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Transliteration\\PhpTransliteration",
      " */",
      "${1:\\$transliteration_service} = \\Drupal::service('transliteration');",
      ""
    ],
    "description": [
      "Enhances PhpTransliteration with an alter hook.",
      "",
      "@ingroup transliteration",
      "@see hook_transliteration_overrides_alter()"
    ],
    "scope": "php"
  },
  "twig": {
    "prefix": [
      "@Service (\"twig\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Template\\TwigEnvironment",
      " */",
      "${1:\\$twig_service} = \\Drupal::service('twig');",
      ""
    ],
    "description": [
      "A class that defines a Twig environment for Drupal.",
      "",
      "Instances of this class are used to store the configuration and extensions,",
      "and are used to load templates from the file system or other locations."
    ],
    "scope": "php"
  },
  "twig.extension": {
    "prefix": [
      "@Service (\"twig.extension\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Template\\TwigExtension",
      " */",
      "${1:\\$twig_extension_service} = \\Drupal::service('twig.extension');",
      ""
    ],
    "description": [
      "A class providing Drupal Twig extensions.",
      "",
      "This provides a Twig extension that registers various Drupal-specific",
      "extensions to Twig, specifically Twig functions, filter, and node visitors.",
      "",
      "@see \\Drupal\\Core\\CoreServiceProvider"
    ],
    "scope": "php"
  },
  "twig.extension.debug": {
    "prefix": [
      "@Service (\"twig.extension.debug\")"
    ],
    "body": [
      "/**",
      " * @var Twig\\Extension\\DebugExtension",
      " */",
      "${1:\\$twig_extension_debug_service} = \\Drupal::service('twig.extension.debug');",
      ""
    ],
    "description": [],
    "scope": "php"
  },
  "twig.extension.varDumper": {
    "prefix": [
      "@Service (\"twig.extension.varDumper\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Template\\DebugExtension",
      " */",
      "${1:\\$twig_extension_varDumper_service} = \\Drupal::service('twig.extension.varDumper');",
      ""
    ],
    "description": [
      "A class providing Drupal Twig Debug extension."
    ],
    "scope": "php"
  },
  "twig.loader.filesystem": {
    "prefix": [
      "@Service (\"twig.loader.filesystem\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Template\\Loader\\FilesystemLoader",
      " */",
      "${1:\\$twig_loader_filesystem_service} = \\Drupal::service('twig.loader.filesystem');",
      ""
    ],
    "description": [
      "Loads templates from the filesystem.",
      "",
      "This loader adds module and theme template paths as namespaces to the Twig",
      "filesystem loader so that templates can be referenced by namespace, like",
      "@block/block.html.twig or @my_theme/page.html.twig."
    ],
    "scope": "php"
  },
  "twig.loader.string": {
    "prefix": [
      "@Service (\"twig.loader.string\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Template\\Loader\\StringLoader",
      " */",
      "${1:\\$twig_loader_string_service} = \\Drupal::service('twig.loader.string');",
      ""
    ],
    "description": [
      "Loads string templates, also known as inline templates.",
      "",
      "This loader is intended to be used in a Twig loader chain and only loads",
      "string templates that begin with the following comment:",
      "@code",
      "{# inline_template_start #}",
      "@endcode",
      "",
      "This class override ensures that the string loader behaves as expected in",
      "the loader chain. If Twig's string loader is used as is, any string (even a",
      "reference to a file-based Twig template) is treated as a valid template and",
      "is rendered instead of a \\Twig\\Error\\LoaderError exception being thrown.",
      "",
      "@see \\Drupal\\Core\\Template\\TwigEnvironment::renderInline()",
      "@see \\Drupal\\Core\\Render\\Element\\InlineTemplate",
      "@see twig_render_template()"
    ],
    "scope": "php"
  },
  "twig.loader.theme_registry": {
    "prefix": [
      "@Service (\"twig.loader.theme_registry\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Template\\Loader\\ThemeRegistryLoader",
      " */",
      "${1:\\$twig_loader_theme_registry_service} = \\Drupal::service('twig.loader.theme_registry');",
      ""
    ],
    "description": [
      "Loads templates based on information from the Drupal theme registry.",
      "",
      "Allows for template inheritance based on the currently active template."
    ],
    "scope": "php"
  },
  "typed_data_manager": {
    "prefix": [
      "@Service (\"typed_data_manager\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\TypedData\\TypedDataManager",
      " */",
      "${1:\\$typed_data_manager_service} = \\Drupal::service('typed_data_manager');",
      ""
    ],
    "description": [
      "Manages data type plugins."
    ],
    "scope": "php"
  },
  "unrouted_url_assembler": {
    "prefix": [
      "@Service (\"unrouted_url_assembler\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Utility\\UnroutedUrlAssembler",
      " */",
      "${1:\\$unrouted_url_assembler_service} = \\Drupal::service('unrouted_url_assembler');",
      ""
    ],
    "description": [
      "Provides a way to build external or non Drupal local domain URLs.",
      "",
      "It takes into account configured safe HTTP protocols."
    ],
    "scope": "php"
  },
  "update.post_update_registry": {
    "prefix": [
      "@Service (\"update.post_update_registry\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Update\\UpdateRegistry",
      " */",
      "${1:\\$update_post_update_registry_service} = \\Drupal::service('update.post_update_registry');",
      ""
    ],
    "description": [
      "Provides all and missing update implementations.",
      "",
      "Note: This registry is specific to a type of updates, like 'post_update' as",
      "example.",
      "",
      "It therefore scans for functions named like the type of updates, so it looks",
      "like EXTENSION_UPDATETYPE_NAME() with NAME being a machine name."
    ],
    "scope": "php"
  },
  "update.post_update_registry_factory": {
    "prefix": [
      "@Service (\"update.post_update_registry_factory\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Update\\UpdateRegistryFactory",
      " */",
      "${1:\\$update_post_update_registry_factory_service} = \\Drupal::service('update.post_update_registry_factory');",
      ""
    ],
    "description": [
      "Service factory for the update registry."
    ],
    "scope": "php"
  },
  "update.update_hook_registry": {
    "prefix": [
      "@Service (\"update.update_hook_registry\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Update\\UpdateHookRegistry",
      " */",
      "${1:\\$update_update_hook_registry_service} = \\Drupal::service('update.update_hook_registry');",
      ""
    ],
    "description": [
      "Provides module updates versions handling."
    ],
    "scope": "php"
  },
  "update.update_hook_registry_factory": {
    "prefix": [
      "@Service (\"update.update_hook_registry_factory\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Update\\UpdateHookRegistryFactory",
      " */",
      "${1:\\$update_update_hook_registry_factory_service} = \\Drupal::service('update.update_hook_registry_factory');",
      ""
    ],
    "description": [
      "Service factory for the versioning update registry."
    ],
    "scope": "php"
  },
  "url_generator": {
    "prefix": [
      "@Service (\"url_generator\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Render\\MetadataBubblingUrlGenerator",
      " */",
      "${1:\\$url_generator_service} = \\Drupal::service('url_generator');",
      ""
    ],
    "description": [
      "Decorator for the URL generator, which bubbles bubbleable URL metadata.",
      "",
      "Implements a decorator for the URL generator that allows to automatically",
      "collect and bubble up bubbleable metadata associated with URLs due to",
      "outbound path and route processing. This approach helps keeping the render",
      "and the routing subsystems decoupled.",
      "",
      "@see \\Drupal\\Core\\RouteProcessor\\OutboundRouteProcessorInterface",
      "@see \\Drupal\\Core\\PathProcessor\\OutboundPathProcessorInterface",
      "@see \\Drupal\\Core\\Render\\BubbleableMetadata"
    ],
    "scope": "php"
  },
  "user_permissions_hash_generator": {
    "prefix": [
      "@Service (\"user_permissions_hash_generator\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Session\\PermissionsHashGenerator",
      " */",
      "${1:\\$user_permissions_hash_generator_service} = \\Drupal::service('user_permissions_hash_generator');",
      ""
    ],
    "description": [
      "Generates and caches the permissions hash for a user."
    ],
    "scope": "php"
  },
  "uuid": {
    "prefix": [
      "@Service (\"uuid\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Component\\Uuid\\Php",
      " */",
      "${1:\\$uuid_service} = \\Drupal::service('uuid');",
      ""
    ],
    "description": [
      "Generates a UUID v4 (RFC 4122 section 4.4) using PHP code.",
      "",
      "@see http://www.rfc-editor.org/rfc/rfc4122.txt",
      "@see http://www.rfc-editor.org/errata_search.php?rfc=4122&eid=3546"
    ],
    "scope": "php"
  },
  "validation.constraint": {
    "prefix": [
      "@Service (\"validation.constraint\")"
    ],
    "body": [
      "/**",
      " * @var Drupal\\Core\\Validation\\ConstraintManager",
      " */",
      "${1:\\$validation_constraint_service} = \\Drupal::service('validation.constraint');",
      ""
    ],
    "description": [
      "Constraint plugin manager.",
      "",
      "Manages validation constraints based upon",
      "\\Symfony\\Component\\Validator\\Constraint, whereas Symfony constraints are",
      "added in manually during construction. Constraint options are passed on as",
      "plugin configuration during plugin instantiation.",
      "",
      "While core does not prefix constraint plugins, modules have to prefix them",
      "with the module name in order to avoid any naming conflicts; for example, a",
      "\"profile\" module would have to prefix any constraints with \"Profile\".",
      "",
      "Constraint plugins may specify data types to which support is limited via the",
      "'type' key of plugin definitions. See",
      "\\Drupal\\Core\\Validation\\Annotation\\Constraint for details.",
      "",
      "@see \\Drupal\\Core\\Validation\\Annotation\\Constraint"
    ],
    "scope": "php"
  }
}